<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++ Programming Language Notes</title>
    <link href="/2023/01/13/C-Programming-Language-Notes/"/>
    <url>/2023/01/13/C-Programming-Language-Notes/</url>
    
    <content type="html"><![CDATA[<h1 id="The-C-Programming-Language-Part-Ⅰ-Introductory-Material"><a href="#The-C-Programming-Language-Part-Ⅰ-Introductory-Material" class="headerlink" title="The C++ Programming Language  Part Ⅰ: Introductory Material"></a><em>The C++ Programming Language</em>  Part Ⅰ: Introductory Material</h1><h2 id="Chapter-2-A-Tour-of-C-The-Basics"><a href="#Chapter-2-A-Tour-of-C-The-Basics" class="headerlink" title="Chapter 2. A Tour of C++: The Basics"></a>Chapter 2. A Tour of C++: The Basics</h2><ul><li>Introduction</li><li>The Basics<ul><li>Hello, World!</li><li>Types, Variables, and Arithmetic</li><li>Constants</li><li>Tests and Loops</li><li>Pointers, Arrays, and Loops</li></ul></li><li>User-Defined Types<ul><li>Structures</li><li>Classes</li><li>Enumerations</li></ul></li><li>Modularity<ul><li>Separate Compilation</li><li>Namespaces</li><li>Error Handling</li></ul></li><li>Postcript</li><li>Advice</li></ul><h3 id="2-1-Introduction"><a href="#2-1-Introduction" class="headerlink" title="2.1 Introduction"></a>2.1 Introduction</h3><ul><li><p>2，3，4，5章主要是”give you an idea of what C++ is”</p><ul><li>Chapter 2给出<ul><li>notion of C++</li><li>C++‘s model of memory</li><li>computation</li><li>the basic mechanism for organizing code into program</li></ul></li><li>Chapter 3介绍C++’s Abstraction mechanism</li><li>Chapter 4 和 Chapter 5 给出一些Standard-library facilities的例子</li></ul></li><li><p>严格的自底向上的方式介绍C++</p></li><li><p>This tour present C++ as an integrated whole.</p></li></ul><h3 id="2-2-The-Basics"><a href="#2-2-The-Basics" class="headerlink" title="2.2 The Basics"></a>2.2 The Basics</h3><ol><li><p>C++ is a compiled language.</p><ul><li>Source text必须由 compiler处理，产生object files。然后object files 被linker combined，产生executable program</li><li><img src="D:\obsidian\Louis\计算机专业知识\C++.assets\image-20230129151158655-1674976322141-1.png" alt="image-20230129151158655"></li></ul></li><li><p>An executable program is created for a specific hardware/system combination; it is not portable.</p><ul><li>When talk about portability of C++ programs, we usually mean portability of source code; that is the source code can be successfully compiled and run on a varity of systems.</li></ul></li><li><p>ISO C++ Standard defines two kinds of entities:</p><ul><li>Core language features.<ul><li>Such as built-in types (e.g. char and int) and loops (e.g. for-statements and while-statements)</li></ul></li><li>Standard-library components.<ul><li>Such as containers (e.g. vector and map) and I/O operations (e.g. &lt;&lt; and getline())</li><li>The standard-library components are perfectly ordinary C++ code provided by every C++ implementation. This implies that C++ is sufficiently expressive and efficient for the most demanding systems programming tasks.</li></ul></li></ul></li><li><p>C++ is a statically typed language.</p><ul><li>That is, the type of every entity (e.g., object, value, name, and expression) must be known to the compiler at its point of use.</li><li>The type of an object determines the set of operations applicable to it.</li></ul></li></ol><h4 id="2-2-1-Hello-World"><a href="#2-2-1-Hello-World" class="headerlink" title="2.2.1 Hello, World!"></a>2.2.1 Hello, World!</h4><ol start="5"><li>The minimal C++ program is<ul><li>定义main函数</li><li>没有任何参数</li><li>什么都不做</li><li>Curly braces, {}, expressing grouping in C++.</li><li>// 单行注释</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">// the minimal C++ program</span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>Every C++ program must have exactly one global function named main().</p><ul><li>The program starts by executing that function.</li><li>The int value returned by main(), if any, is the program’s return value to “the system.”<ul><li>If no value is return, the system will receive a value indicating successful compilation.</li><li>A nonzero value from main() indicates failure.</li><li>Not every operating system and execution envirnment make use of that return value:<ul><li>Linux/Unix-based environments often do</li><li>But Windows-based environments rarely do.</li></ul></li></ul></li></ul></li><li><p>Typically, a program produces some output.</p><ul><li>The line <code>#include &lt;iostream&gt;</code>  instructs the compiler to include the declarations of standard stream I/O facilities as found in iostream.</li><li>The operaor <code>&lt;&lt;</code> (“put to”) writes its second argument on its first.<ul><li>The string literal “Hello, World!\n” is written onto the standard output stream <code>std::cout</code>.</li><li>A string literal is a sequence of characters surrounded by double quotes.<ul><li>In a string literal, the backslash character <code>\</code> followed by another character denotes a single ‘‘special character.’’</li><li>In this case, <code>\n</code> is the newline character, so that the characters written are Hello, World! followed by a newline.</li></ul></li></ul></li><li>The <code>std::</code> specifies that the name <code>cout</code> is to be found in the standard-library namespace.</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>Essentially all executable code is placed in functions and called directly or indirectly from <code>main()</code>.<ul><li>A “return type” <code>void</code> indicates that a function does not return a value.</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <span class="hljs-comment">// make names from std visible without std::</span><br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> x*x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_square</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;The square of &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; <span class="hljs-built_in">square</span>(x) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">print_square</span>(<span class="hljs-number">1.234</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-Types-Variables-and-Arithmetic"><a href="#2-2-2-Types-Variables-and-Arithmetic" class="headerlink" title="2.2.2 Types, Variables, and Arithmetic"></a>2.2.2 Types, Variables, and Arithmetic</h4><ol start="9"><li>Every name and every expression has a type that determines the operations that may be performed on it.<ul><li>A declaration is a statement that introduces a name into the program. It specifies a type for the named entity.<ul><li>A <em>type</em> defines a set of possible values and set of operations (for an object).</li><li>An <em>object</em> is some memory that holds a value of some type.</li><li>A <em>value</em> is a set of bits interpreted according to a type.</li><li>A <em>variable</em> is a named object.</li></ul></li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> inch <span class="hljs-comment">// the declaration specifies that inch is of the type int</span><br></code></pre></td></tr></table></figure><ol start="10"><li><p>C++ offers a variety of fundamental types.</p><ul><li><code>bool</code>: true or false</li><li><code>char</code>: character</li><li><code>int</code>: integer</li><li><code>double</code>: double-precision floating-point number</li></ul></li><li><p>Each fundamental type corresponds directly to hardware facilities and has a fixed size that determines the range of values that can be stored in it.</p><ul><li><img src="D:\obsidian\Louis\计算机专业知识\C++.assets\image-20230129151354561.png" alt="image-20230129151354561"></li><li>A <code>char</code> variable is of the natural size to hold a character on a given machine (typically an 8-bit byte).</li><li>The sizes of other types are quoted in multiples of the size of a char.</li><li>The size of a type is implementation-defined and can be obtained by the <code>sizeof</code> operator.</li></ul></li><li><p>The arithmetic operator can be used for appropriate combination of these types.</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">x+y <span class="hljs-comment">// plus</span><br>+x <span class="hljs-comment">// unary plus</span><br>x-y <span class="hljs-comment">//minus</span><br>-x <span class="hljs-comment">//unary minus</span><br>x*y <span class="hljs-comment">//multiply</span><br>x/y <span class="hljs-comment">//divide</span><br>x%y <span class="hljs-comment">// remainder (modulus) for integers</span><br></code></pre></td></tr></table></figure><p>So can the comparision operators.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">x==y <span class="hljs-comment">// equal</span><br>x!=y <span class="hljs-comment">// not equal</span><br>x&lt;y <span class="hljs-comment">// less than</span><br>x&gt;y <span class="hljs-comment">// greater than</span><br>x&lt;=y <span class="hljs-comment">// less than or equal</span><br>x&gt;=y <span class="hljs-comment">// greater than or equal</span><br></code></pre></td></tr></table></figure><ol start="13"><li>In assignments and in arithmetic operations, C++ performs all meaningful conversions between the basic types so that they can be mixed freely.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">some_function</span><span class="hljs-params">()</span> <span class="hljs-comment">// function that does not return a value</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> d = <span class="hljs-number">2.2</span>; <span class="hljs-comment">// initializa floating-point number</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">7</span>; <span class="hljs-comment">// initialize integer</span><br>d = d+i; <span class="hljs-comment">// assign sum of d+i to d</span><br>i = d*i; <span class="hljs-comment">// assing product to i (truncating the double d*i to an int)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Note that <code>=</code> is the assignment operator and <code>==</code> test equality.</p><ol start="14"><li>C++ offers a variety of notations for expressing initialization.<ul><li>the <code>=</code> used above</li><li>a universal form based on <code>curly-brace-delimited initializer lists</code>.</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">double</span> d1 = <span class="hljs-number">2.3</span>;<br><span class="hljs-type">double</span> d2&#123;<span class="hljs-number">2.3</span>&#125;;<br><br>complex&lt;<span class="hljs-type">double</span>&gt; z = <span class="hljs-number">1</span>; <span class="hljs-comment">// a complex number with double-precision floating-point scalars</span><br>complex&lt;<span class="hljs-type">double</span>&gt; z2&#123;d1,d2&#125;<br>complex&lt;<span class="hljs-type">double</span>&gt; z3 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;; <span class="hljs-comment">// the = is optional with &#123;...&#125;</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; v&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;; <span class="hljs-comment">// a vector of ints</span><br></code></pre></td></tr></table></figure><p>The <code>=</code> form is traditional and dates back to C, but if in doubt, use the general {}-list form. If nothing else, it saves you from conversions that lose information (narrowing conversion).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> i1 = <span class="hljs-number">7.2</span>; <span class="hljs-comment">// i1 becomes 7</span><br><span class="hljs-type">int</span> i2&#123;<span class="hljs-number">7.2</span>&#125;; <span class="hljs-comment">// error: floating-point to integer conversion (narrowing conversion)</span><br><span class="hljs-type">int</span> i3 = &#123;<span class="hljs-number">7.2</span>&#125;; <span class="hljs-comment">// error: floating-point to integer conversion (the = is redundant)</span><br></code></pre></td></tr></table></figure><ol start="15"><li>A constant cannot be left uninitialized and a variable should only be left uninitialized in extremely rare circumstances.<ul><li>Don’t introduce a name untial you have a suitable value for it.</li><li>User-defined types (such as string, vector, Matrix, Motor_controller, and Orc_warrior) can be definec to be implicitly initialized.</li></ul></li><li>When defining a variable, you don;t actually need to state its type explicitly when it can be deduced from the initializer.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> b = <span class="hljs-literal">true</span>; <span class="hljs-comment">// a bool</span><br><span class="hljs-keyword">auto</span> ch = <span class="hljs-string">&#x27;x&#x27;</span>; <span class="hljs-comment">// a char</span><br><span class="hljs-keyword">auto</span> i = <span class="hljs-number">123</span>; <span class="hljs-comment">// an int</span><br><span class="hljs-keyword">auto</span> d = <span class="hljs-number">1.2</span>; <span class="hljs-comment">// a double</span><br><span class="hljs-keyword">auto</span> z = <span class="hljs-built_in">sqrt</span>(y); <span class="hljs-comment">// z has the type of whatever sqrt(y) returns</span><br></code></pre></td></tr></table></figure><p>With <code>auto</code>, we use the <code>=</code> syntax because there is no type conversion involved that might cause problems.</p><ol start="17"><li>We use <code>auto</code> where we don’t have a specific reason to mention the type explicitly. “Specific reasons” include:<ul><li>The definition is in a large scope where we want to make the type clearly visible to readers of our code.</li><li>We want to be explicit about a variable’s range or precision (e.g., double rather than float).</li></ul></li></ol><p>Using auto, we avoid redundancy and writing long type names.</p><ol start="18"><li>In addition to the conventional arithmetic and logical operators, C++ offers more specific operations for modifying a variable.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">x+=y; <span class="hljs-comment">// x = x+y</span><br>++x; <span class="hljs-comment">// increment: x = x+1</span><br>x-=y; <span class="hljs-comment">// x = x-y</span><br>--x; <span class="hljs-comment">// decrement: x = x-1</span><br>x*=y; <span class="hljs-comment">// scaling: x = x*y</span><br>x/=y; <span class="hljs-comment">// scaling: x = x/y</span><br>x%=y; <span class="hljs-comment">// x = x%y</span><br></code></pre></td></tr></table></figure><p>Thes operators are concise, convenient, and very frequently used.</p><h4 id="2-2-3-Constants"><a href="#2-2-3-Constants" class="headerlink" title="2.2.3 Constants"></a>2.2.3 Constants</h4><ol start="19"><li>C++ supports two notions of immutability.<ul><li><code>const</code>: meaning roughly “I promise not to change this value”.<ul><li>This is used primarily to specify interfaces, so that data can be passed to functions without fear of it being modified.</li><li>The compiler enforces the promise made by <code>const</code>.</li></ul></li><li><code>constexpr</code>: meaning roughly “to be evaluated at compile time”.<ul><li>This is used primarily to specify constants, to allow placement of data in memory where it is unlikely to be corrupted, and for performance.</li></ul></li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> dmv = <span class="hljs-number">17</span>; <span class="hljs-comment">// dmv is named constant</span><br><span class="hljs-type">int</span> var = <span class="hljs-number">17</span>; <span class="hljs-comment">// var is a variable, not a constant</span><br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> max1 = <span class="hljs-number">1.4</span>*<span class="hljs-built_in">square</span>(dmv); <span class="hljs-comment">// OK if square(17) is a constant expression</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> max2 = <span class="hljs-number">1.4</span>*<span class="hljs-built_in">square</span>(var); <span class="hljs-comment">// Error: var is not a constant expression(Cannot be know when compiling.)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> max3 = <span class="hljs-number">1.4</span>*<span class="hljs-built_in">square</span>(var); <span class="hljs-comment">// Ok: may be evaluated at run time</span><br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp;)</span></span>; <span class="hljs-comment">// Function sum() will bot modify its argument</span><br><br>vector&lt;<span class="hljs-type">double</span>&gt; v&#123;<span class="hljs-number">1.2</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">4.5</span>&#125;; <span class="hljs-comment">// v is not a constant</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> s1 = <span class="hljs-built_in">sum</span>(v); <span class="hljs-comment">// Ok: evaluted at run time</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> s2 = <span class="hljs-built_in">sum</span>(v); <span class="hljs-comment">// Error: sum(v) not constant expression</span><br></code></pre></td></tr></table></figure><ul><li><img src="D:\obsidian\Louis\计算机专业知识\C++.assets\image-20230117171611635.png" alt="image-20230117171611635"></li></ul><ol start="20"><li>For a function to be usable in a <code>constant expression</code>, that is, in an expression that will be evaluated by the compiler, it must be defined <code>constexpr</code>.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x*x;&#125;<br></code></pre></td></tr></table></figure><ul><li>To be <code>constexpr</code>, a function must be rather simple: just a return-statement computing a value.</li><li>A <code>constexpr</code> function can be used for non-constant arguments, but when that is done the result is not a constant expression.<ul><li>We allow a <code>constexpr</code> function to be called with non-constant-expression arguments in the contexts that do not require constant expression, so that we don’t have to define essentially the same function twice: once for constant expression and once for variables.</li></ul></li></ul><ol start="21"><li>In a few places, constant expressions are required by language rules(e.g., array bounds, case labels, some template arguments, and constants declared using <code>constexpr</code>). In other cases, compile-time evaluation is important for performance.</li></ol><ul><li>Independently of performance issues, the notion of immutability (of an object with an unchangable state) is an important design concern.</li></ul><h4 id="2-2-4-Tests-and-Loops"><a href="#2-2-4-Tests-and-Loops" class="headerlink" title="2.2.4 Tests and Loops"></a>2.2.4 Tests and Loops</h4><ol start="22"><li>C++ provides a conventional set of statements for expressing selection and looping.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">accept</span><span class="hljs-params">()</span> <span class="hljs-comment">// a simple function that prompts the user and returns a Boolean indicating the response</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Do you want to proceed (y or n)?\n&quot;</span>;<br>  <br>    <span class="hljs-type">char</span> answer = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; answer;<br>  <br>    <span class="hljs-keyword">if</span>(answer==<span class="hljs-string">&#x27;y&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>The <code>&gt;&gt;</code> operator (“get from”) is used for input; <code>cin</code> is the standard input stream.<ul><li>The type of the right-hand operand of <code>&gt;&gt;</code> determines what input is accepted, and its right-hand operand is the target of the input operation.</li></ul></li></ul><ol start="23"><li>A <code>switch</code>-statement tests a value against a set of constants.<ul><li>The case constants must be distinct.</li><li>If the value tested does not match any of them, the <code>default</code> is chosen. If no <code>default</code> is provided, no action is taken if the value doesn’t match any case constant.</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">accept2</span><span class="hljs-params">()</span> <span class="hljs-comment">// a simple function that prompts the user and returns a Boolean indicating the response</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Do you want to proceed (y or n)?\n&quot;</span>;<br>  <br>    <span class="hljs-type">char</span> answer = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; answer;<br>  <br>    <span class="hljs-keyword">switch</span>(answer)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;y&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">case</span><span class="hljs-number">&#x27;</span>n<span class="hljs-number">&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;I&#x27;ll take that for a no.\n&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="24"><li>Few programs are written without loops.<ul><li>The <code>while</code>-statement executes until its condition becomes <code>false</code>.</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">accept3</span><span class="hljs-params">()</span> <span class="hljs-comment">// a simple function that prompts the user and returns a Boolean indicating the response</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tries = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(tries&lt;<span class="hljs-number">4</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Do you want to proceed (y or n)?\n&quot;</span>;<br><br>        <span class="hljs-type">char</span> answer = <span class="hljs-number">0</span>;<br>        cin &gt;&gt; answer;<br><br>        <span class="hljs-keyword">switch</span>(answer)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;y&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">case</span><span class="hljs-number">&#x27;</span>n<span class="hljs-number">&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">default</span>:<br>                cout &lt;&lt; <span class="hljs-string">&quot;I&#x27;ll take that for a no.\n&quot;</span>;<br>                ++tries;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;I&#x27;ll take that for a no.\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-5-Pointers-Arrays-and-Loops"><a href="#2-2-5-Pointers-Arrays-and-Loops" class="headerlink" title="2.2.5 Pointers, Arrays, and Loops"></a>2.2.5 Pointers, Arrays, and Loops</h4><ol start="25"><li>An array of elements of type <code>char</code> can be declared like this:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> v[<span class="hljs-number">6</span>]; <span class="hljs-comment">// array of 6 characters</span><br></code></pre></td></tr></table></figure><p>Sillarly, a pointer can be declared like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> *p; <span class="hljs-comment">// pointer to character</span><br></code></pre></td></tr></table></figure><ul><li>In declarations, <code>[]</code> means “array of” and <code>*</code> means “pointer to.”</li><li>All arrays have <code>0</code> as their lower bound. The size of an array must be a constant expression.</li><li>A pointer variable can hold the address of an object of the appropriate type:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> *p = &amp;v[<span class="hljs-number">3</span>]; <span class="hljs-comment">// p points to v&#x27;s fourth element</span><br><span class="hljs-type">char</span> x = *p; <span class="hljs-comment">// *p is the object that p points to</span><br></code></pre></td></tr></table></figure><ul><li>In an expression, prefix unary <code>*</code> means “contents of “ and prefix unary <code>&amp;</code> means “address of.”<ul><li>We can represent the result of that initialized definition graphically.</li><li><img src="D:\obsidian\Louis\计算机专业知识\C++.assets\image-20230117175706348.png" alt="image-20230117175706348"></li></ul></li></ul><ol start="26"><li>The <code>for</code>-statement can be read as “set <code>i</code> to zero; while <code>i</code> is not <code>10</code>, copy the <code>i</code>th element and increment <code>i</code>.”</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">copy_fct</span><span class="hljs-params">()</span> <span class="hljs-comment">// copying ten elements from one array to another</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> v1[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-type">int</span> v2[<span class="hljs-number">10</span>]; <span class="hljs-comment">// to become a copy of v1</span><br>  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i=<span class="hljs-number">0</span>; i!=<span class="hljs-number">10</span>; ++i) <span class="hljs-comment">// copy elemets</span><br>        v2[i]=v1[i];<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>++</code> operator simply adds <code>1</code>.</li></ul><ol start="27"><li>C++ also offers a simplier <code>for</code>-statement, called a range-<code>for</code>-statement, for loops that traverse a sequence in the simplest way.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> v[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : v) <span class="hljs-comment">// for each x in v</span><br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : &#123;<span class="hljs-number">10</span>,<span class="hljs-number">21</span>,<span class="hljs-number">32</span>,<span class="hljs-number">43</span>,<span class="hljs-number">54</span>,<span class="hljs-number">65</span>&#125;)<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>The first range-<code>for</code>-statement can be read as “for every element of v, from the first to the last, place a copy in <code>x</code> and print it.”</li><li>Note that we don’t have to specify an array bound when we initialize it with a list.</li><li>The range-<code>for</code>-statement can be used for any sequence of elements.</li></ul><p>If we didn’t want to copy the values from <code>v</code> into the variable <code>x</code>, but rather just have <code>x</code> refer to an element, we could write:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increment</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> v[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; x : v)<br>        ++x;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>In a declaration, the unary suffix <code>&amp;</code> means “reference to.”<ul><li>A reference is similar to a pointer, execpt that you don’t need to use a prefix <code>*</code> to access the value referred to by the reference.</li><li>A referenc cannot be made to refer to a different object after its initialization.</li></ul></li></ul><h2 id="Chapter-3-A-Tour-of-C-Abstraction-mechanisms"><a href="#Chapter-3-A-Tour-of-C-Abstraction-mechanisms" class="headerlink" title="Chapter 3. A Tour of C++: Abstraction mechanisms"></a>Chapter 3. A Tour of C++: Abstraction mechanisms</h2><h3 id="3-2-Classes"><a href="#3-2-Classes" class="headerlink" title="3.2 Classes"></a>3.2 Classes</h3><h4 id="3-2-3-Virtual-Functions"><a href="#3-2-3-Virtual-Functions" class="headerlink" title="3.2.3 Virtual Functions"></a>3.2.3 Virtual Functions</h4><ol><li><p>A <code>Container</code> object must contain information to allow it select the right function to call at run time.</p><p>The usual implementation technique is for the compiler to convert the name of a virtual function into an index into a table of pointers to functions.</p><ul><li>That table is usually called the <em><strong>virtual function table</strong></em> or simply the <code>vtbl</code>.</li><li>Each class with virtual functions has its own <code>vtble</code> identifying its virtual functions.</li></ul></li></ol><ol start="2"><li>The space overhead is one pointer in each object of a class with virtual functions plus one <code>vtbl</code> for each such class.</li></ol><h3 id="3-4-Templates"><a href="#3-4-Templates" class="headerlink" title="3.4 Templates"></a>3.4 Templates</h3><h4 id="3-4-4-Variadic-Templates"><a href="#3-4-4-Variadic-Templates" class="headerlink" title="3.4.4 Variadic Templates"></a>3.4.4 Variadic Templates</h4><ol><li><p>A template can be defined to accept an arbitrary number of arguments of arbitrary types.</p><p>Such a template is called a <em><strong>variadic template</strong></em>. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span>... Tail&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T head, Tail... tail)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">g</span>(head); <span class="hljs-comment">// do something to head</span><br>    <span class="hljs-built_in">f</span>(tail...); <span class="hljs-comment">// try again with tail</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;&#125; <span class="hljs-comment">// do nothing</span><br></code></pre></td></tr></table></figure><p>The key to implementing a variadic template is to note that when you pass a list of arguments to it, you can separate the first argument from the rest.</p><ul><li>Here, we do something to the first argument (the <code>head</code>) and then recursively call <code>f()</code> with the rest of the arguments (the <code>tail</code>).</li><li>The <strong>elipsis</strong>, <code>...</code>, is used to indicate “the rest” of a list.</li><li>Eventually, of course, <code>tail</code> will become empty and we need a separate function to deal with that.</li></ul></li><li><p>We can call this <code>f()</code> like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;first:&quot;</span>;<br>    <span class="hljs-built_in">f</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;\nsecond:&quot;</span>;<br>    <span class="hljs-built_in">f</span>(<span class="hljs-number">0.2</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&quot;yuck!&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Chapter-4-A-Tour-of-C-Containers-and-Algorithms"><a href="#Chapter-4-A-Tour-of-C-Containers-and-Algorithms" class="headerlink" title="Chapter 4. A Tour of C++: Containers and Algorithms"></a>Chapter 4. A Tour of C++: Containers and Algorithms</h2><h2 id="Chapter-5-A-Tour-of-C-Concurrency-and-Utilities"><a href="#Chapter-5-A-Tour-of-C-Concurrency-and-Utilities" class="headerlink" title="Chapter 5. A Tour of C++: Concurrency and Utilities"></a>Chapter 5. A Tour of C++: Concurrency and Utilities</h2><h3 id="5-3-Concurrency"><a href="#5-3-Concurrency" class="headerlink" title="5.3 Concurrency"></a>5.3 Concurrency</h3><h4 id="5-3-1-Tasks-and-threads"><a href="#5-3-1-Tasks-and-threads" class="headerlink" title="5.3.1 Tasks and threads"></a>5.3.1 Tasks and <code>thread</code>s</h4><h1 id="The-C-Programming-Language-Part-Ⅱ-Basic-Facilities"><a href="#The-C-Programming-Language-Part-Ⅱ-Basic-Facilities" class="headerlink" title="The C++ Programming Language  Part Ⅱ : Basic Facilities"></a>The C++ Programming Language  Part Ⅱ : Basic Facilities</h1><h2 id="Chapter-6-Types-and-Declarations"><a href="#Chapter-6-Types-and-Declarations" class="headerlink" title="Chapter 6. Types and Declarations"></a>Chapter 6. Types and Declarations</h2><ol><li><p>The standard header <code>&lt;cstddef&gt;</code> defines an alias that is very widely used in both standard-library declarations and user code:</p><ul><li><code>size_t</code> is an implementation-defined unsigned integer type that can hold the size in bytes of every object.</li></ul><p>Consequetly, it is used where we need to hold an object size. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">allocate</span><span class="hljs-params">(<span class="hljs-type">size_t</span>, n)</span></span>; <span class="hljs-comment">// get n bytes</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-4-Objects-and-Values"><a href="#6-4-Objects-and-Values" class="headerlink" title="6.4 Objects and Values"></a>6.4 Objects and Values</h3><h4 id="6-4-2-Lifetimes-of-Objects"><a href="#6-4-2-Lifetimes-of-Objects" class="headerlink" title="6.4.2 Lifetimes of Objects"></a>6.4.2 Lifetimes of Objects</h4><ol><li><p>The <em><strong>lifetime</strong></em> of an object starts when its constructor completes and ends when its destructor starts executing.</p><ul><li>Objects of type without a declared constructor, such as an <code>int</code>, can be considered to have default constructors and destructors that do nothing.</li></ul></li><li><p>We can classify objects based on their lifetimes:</p><ul><li><em><strong>Automatic</strong></em><ul><li>Unless the programmer specifies otherwise (section 12.1.8, section 16.2.12), an object declared in a function is created when its definition is encountered and destroyed when its name goes out of scope.</li><li>Such objects are sometimes called <em><strong>automatic</strong></em> objects.</li><li>In typical implementation, automatic objects are allocated on the stack; each call of the function gets its own <em><strong>stack frame</strong></em> to hold its automatic objects.</li></ul></li><li><em><strong>Static</strong></em>:<ul><li>Objects declared in global or namespace scope (section 6.3.4) and <code>static</code>s declared in functions (section 12.1.8) or classes(section 16.2.12) are created and initialized once (only) and “live” until the program terminates (section 15.4.3).</li><li>Such objects are called <em><strong>static</strong></em> objects.</li><li>A static object has the same address throughout the life of a program execution.</li><li>Static objects can cause serious problems in a multi-threaded program because they are shared among all threads and typically require locking to avoid data races (section 5.3.1, section 42.3).</li></ul></li><li><em><strong>Free store</strong></em>:<ul><li>Using the <code>new</code> and <code>delete</code> operators, we can create objects whose lifetimes are controlled directly (section 11.2).</li></ul></li><li><em><strong>Temporary objects</strong></em>:<ul><li>E.g., intermediate results in a computation or an object used to hold a value for a reference to <code>const</code> argument.</li><li>Their lifetime is determined by their use.</li><li>If they are bound to a reference, their lifetime is that of the reference; otherwise, they “live” until the end of the full expression of which they are part.<ul><li>A <em><strong>full expression</strong></em> is an expression that is not part of another expression.</li><li>Typically, temporary objects are automatic.</li></ul></li></ul></li><li><em><strong>Thread-local objects</strong></em>:<ul><li>that is, objects declared <code>thread_local</code> (section 42.2.8)</li><li>Such objects are created when their thread is and destroy when their thread is.</li></ul></li></ul></li><li><p><em><strong>Static</strong></em> and <em><strong>automatic</strong></em> are traditionally referred to as <em><strong>storage classes</strong></em>.</p></li><li><p>Array elements and nonstatic class members have their lifetimes determined by the object of which they are part.</p></li></ol><h2 id="Chapter-7-Pointers-Arrays-and-References"><a href="#Chapter-7-Pointers-Arrays-and-References" class="headerlink" title="Chapter 7. Pointers, Arrays, and References"></a>Chapter 7. Pointers, Arrays, and References</h2><h3 id="7-3-Arrays"><a href="#7-3-Arrays" class="headerlink" title="7.3 Arrays"></a>7.3 Arrays</h3><h4 id="7-3-2-String-Literals"><a href="#7-3-2-String-Literals" class="headerlink" title="7.3.2 String Literals"></a>7.3.2 String Literals</h4><ol><li><p>A <em><strong>string literal</strong></em> is a character sequence enclosed within double quotes:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-string">&quot;this is a string&quot;</span><br></code></pre></td></tr></table></figure><p>A string literal contains one more character than it appears to have; it is terminated by the <strong>null character</strong>, <code>&#39;\0&#39;</code>, with the value <code>0</code>. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">sizeof</span>(<span class="hljs-string">&quot;Bohr&quot;</span>)==<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>The type of a string literal is “array of the appropriate number of <code>const</code> characters,” so <code>&quot;Bohr&quot;</code> is of type <code>const char[5]</code>.</p></li></ol><h3 id="7-7-References"><a href="#7-7-References" class="headerlink" title="7.7 References"></a>7.7 References</h3><ol><li><p>To reflect the lvalue/rvalue and <code>const</code>/non-<code>const</code> distinctions, there are three kinds of references:</p><ul><li><em><strong>lvalue references</strong></em>: <ul><li>to refer to objects whose value we want to change</li></ul></li><li><code>const</code> <em><strong>references</strong></em>:<ul><li>to refer to objects whose value we do not want to change (e.g., a constant)</li></ul></li><li><em><strong>rvalue references</strong></em>: <ul><li>to refer to objects whose value we do not need to preserve after we have used it (e.g., a temporary)</li></ul></li></ul><p>Collectively, they are called <em><strong>references</strong></em>. The first two are both called <em><strong>lvalue references</strong></em>.</p></li></ol><h4 id="7-7-1-Lvalue-References"><a href="#7-7-1-Lvalue-References" class="headerlink" title="7.7.1 Lvalue References"></a>7.7.1 Lvalue References</h4><ol><li><p>Initialization of a reference is trivial when the initializer is an lvalue (an object whose address you can take; section 6.4).</p><ul><li>The initializer for “plain” <code>T&amp;</code> must be a lvalue of type <code>T</code>.</li></ul><p>The initializer for a <code>const T&amp;</code> need not be an lvalue or evenof type <code>T</code>. In such cases:</p><ul><li>First, implicit type conversion to <code>T</code> is applied if necessary (section 10.5).</li><li>Then, the resulting value is placed in a temporary variable of type <code>T</code>.</li><li>Finally, this temporary variable is used as the value of the initializer.</li></ul></li></ol><h4 id="7-7-2-Rvalue-References"><a href="#7-7-2-Rvalue-References" class="headerlink" title="7.7.2 Rvalue References"></a>7.7.2 Rvalue References</h4><h4 id="7-7-3-References-to-References"><a href="#7-7-3-References-to-References" class="headerlink" title="7.7.3 References to References"></a>7.7.3 References to References</h4><h4 id="7-7-4-Pointers-and-References"><a href="#7-7-4-Pointers-and-References" class="headerlink" title="7.7.4 Pointers and References"></a>7.7.4 Pointers and References</h4><h2 id="Chapter-8-Structures-Unions-and-Enumerations"><a href="#Chapter-8-Structures-Unions-and-Enumerations" class="headerlink" title="Chapter 8. Structures, Unions, and Enumerations"></a>Chapter 8. Structures, Unions, and Enumerations</h2><h3 id="8-3-Unions"><a href="#8-3-Unions" class="headerlink" title="8.3 Unions"></a>8.3 Unions</h3><ol><li>A <code>union</code> is a <code>struct</code> in which all members are allocated at the same address so that <code>union</code> occupies only as much space as its largest member.<ul><li>Naturally, a <code>union</code> can hold a value for only one member at a time.</li></ul></li></ol><h4 id="8-3-2-Anonymous-unions"><a href="#8-3-2-Anonymous-unions" class="headerlink" title="8.3.2 Anonymous unions"></a>8.3.2 Anonymous <code>union</code>s</h4><ol><li>A anonymous <code>union</code> is an object, not a type, and its members can be accessed without mentioning an object name.<ul><li>That means that we can use members of an anonymous <code>union</code> exactly as we use other member of a class – as long as we remember that <code>union</code> members really can be used only one at a time.</li></ul></li></ol><h3 id="8-4-Enumerations"><a href="#8-4-Enumerations" class="headerlink" title="8.4 Enumerations"></a>8.4 Enumerations</h3><ol><li><p>An <em>enumeration</em> is a type that can hold a set of integer values specified by the user. Some of an enumeration’s possible values are named and called enumerators.</p><ul><li><p>For example</p><ul><li><p>```C++<br>enum class Color{red, green, blue};</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs csharp">     - This defines an enumberation called `Color` <span class="hljs-keyword">with</span> enumerators `red`, `green`, <span class="hljs-keyword">and</span> `blue`.<br>   - <span class="hljs-string">&quot;An enumeration&quot;</span> <span class="hljs-keyword">is</span> colloquially shortented <span class="hljs-string">&quot;an `enum`.&quot;</span><br><span class="hljs-number">2.</span> There are two kinds of enumerations:<br><br>   - <span class="hljs-built_in">enum</span> classes, <span class="hljs-keyword">for</span> which the enumerator<br><br><span class="hljs-meta">## Chapter 9. Statements</span><br><br><span class="hljs-meta">### 9.5 Iteration Statements</span><br><br><span class="hljs-meta">#### 9.5.1 Range-`for` Statements</span><br><br><span class="hljs-number">1.</span> The simplest loop <span class="hljs-keyword">is</span> a range-`<span class="hljs-keyword">for</span>`-statement; it simply gives the programmer access to each element of a range.<br><br><span class="hljs-meta">## Chapter 10. Expressions</span><br><br><span class="hljs-meta">### 10.3 Operator Summary</span><br><br><span class="hljs-meta">#### 10.3.4 Temporary Objects</span><br><br><span class="hljs-number">1.</span> Often, the compiler must introduce an <span class="hljs-built_in">object</span> to hold an intermediate result of an expression.<br><br>- For example, <span class="hljs-keyword">for</span> `v=x+y∗z` the result of `y∗z` has to be put somewhere before it <span class="hljs-keyword">is</span> added to `x`.<br><br>   For built-<span class="hljs-keyword">in</span> types, <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> all handled so that a ***temporary <span class="hljs-built_in">object</span>*** (often referred to <span class="hljs-keyword">as</span> just a ***temporary***) <span class="hljs-keyword">is</span> invisible to the user.<br><br>   For a user-defined type that holds a resource knowing the lifetime of a temporary can be important.<br><br><span class="hljs-number">2.</span> <span class="hljs-function">Unless bound to a reference <span class="hljs-keyword">or</span> used to initialize a named <span class="hljs-title">object</span> (<span class="hljs-params">variable</span>), a temporary <span class="hljs-built_in">object</span> <span class="hljs-keyword">is</span> destroyed at the end od the full expression <span class="hljs-keyword">in</span> which it was created.</span><br><span class="hljs-function"></span><br><span class="hljs-function">   - A ***full expression*** <span class="hljs-keyword">is</span> an expression that <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> a subexpression of some other expression.</span><br><span class="hljs-function">3. The standard-library `<span class="hljs-built_in">string</span>` has a member `<span class="hljs-title">c_str</span>()` that returns a C-style pointer to a zero-terminated array of charactors.</span><br><span class="hljs-function"></span><br><span class="hljs-function">   Also, the <span class="hljs-keyword">operator</span> `+` <span class="hljs-keyword">is</span> defined to mean <span class="hljs-built_in">string</span> concatenation. These are useful facilities <span class="hljs-keyword">for</span> `<span class="hljs-built_in">string</span>`s.</span><br><span class="hljs-function"></span><br><span class="hljs-function">   However, <span class="hljs-keyword">in</span> combination they can cause obscure problems.</span><br><span class="hljs-function"></span><br><span class="hljs-function">   - For example:</span><br><span class="hljs-function">   - ```C++</span><br><span class="hljs-function">     <span class="hljs-keyword">void</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>&amp; s1, <span class="hljs-built_in">string</span>&amp; s2, <span class="hljs-built_in">string</span>&amp; s3</span>)</span><br>     &#123;<br>         <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* cs = (s1+s2).c_str(); <span class="hljs-comment">// temporary is created and be destroyed. (full expression)</span><br>         cout &lt;&lt; cs; <span class="hljs-comment">// Error: cs points to deallocated storage. (might work)</span><br>         <span class="hljs-keyword">if</span>(strlen(cs=(s2+s3).c_str())&lt;<span class="hljs-number">8</span> &amp;&amp; cs[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;a&#x27;</span>)&#123;<br>             <span class="hljs-comment">// cs used here: not guaranteed to work</span><br>         &#125;<br>     &#125;<br></code></pre></td></tr></table></figure></li><li><p>“Don’t do that!”</p></li><li><p>Such code does get written, so it is worth knowning how it is interpreted.</p><ul><li>A temporary string object is created to hold <code>s1+s2</code>. Next, A pointer to a C-style string is extraced from that object. Then – at the end of the expression – the temporary object is deleted.</li><li>The C-style string returned by <code>c_str()</code> was allocated as part of the temporary object holding <code>s1+s2</code>, and that storage is not guaranteed to exist after that temporary is destroyed.</li><li>Consequently, <code>cs</code> points to deallocated storage. The output operation <code>cout&lt;&lt;cs</code> might work as expected, but that would be sheer luck.</li><li>A compiler can detect and warn against many variants of this problem.</li></ul></li><li><p>The problem with the <code>if</code>-statement is a bit more subtle.</p><ul><li>The condition will work as expected because the full expression in which the temporary holding <code>s2+s3</code> is created is the condition itself.</li><li>However, that temporary is destroyed before the controlled statement is entered, so any use of <code>cs</code> there is not guaranteed to work.</li></ul></li></ul></li></ul></li><li><p>Please note that in this case, as in many others, the problems with temporaries arose from using a high-level data type in a low-level way.</p><ul><li><p>A cleaner programming style yields a more understandable program fragment and avoids the problems with temporaries completely.</p></li><li><p>For example:</p><ul><li><p>```C++<br>void f(string&amp; s1, string&amp; s2, string&amp; s3)<br>{</p><pre><code class="hljs">cout &lt;&lt; s1+s2;string s = s2+s3;if(s.length()&lt;8 &amp;&amp; s[0]==&#39;a&#39;)&#123;    // use s here&#125;</code></pre><p>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp">- A temporary can be used <span class="hljs-keyword">as</span> an initializer <span class="hljs-keyword">for</span> a `<span class="hljs-keyword">const</span>` reference <span class="hljs-keyword">or</span> a named <span class="hljs-built_in">object</span>.<br>- For example:<br><br>  - ```C++<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp;, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp;</span>)</span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">h</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>&amp;s1, <span class="hljs-built_in">string</span>&amp; s2</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; s = s1+s2;<br>        <span class="hljs-built_in">string</span> ss = s1+s2;<br>    <br>        g(s,ss); <span class="hljs-comment">// we can use s and ss here</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>This is fine. The temporary is destroyed when “its” reference or named object goes out of scope.</p><p>Remember that returning a reference to a local variable is an error and that a temporary object cannot be bound to a non-<code>const</code> lvaue reference.</p></li></ul></li></ul></li><li><p>A temporary object can also be created explicitly in an expression by invoking a constructor.</p><p>For example:</p><ul><li>```C++<br>void f(Shape&amp; s, int n, char ch)<br>{<pre><code class="hljs">s.move(string&#123;n,ch&#125;); // construct a string with n copies of ch to pass to Shape::move()// ...</code></pre>}<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">   - Such temporaries are destroyed <span class="hljs-keyword">in</span> exactly the same way <span class="hljs-keyword">as</span> the implicitly generated temporaries.<br><br><span class="hljs-comment">### 10.4 Constant Expressions</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. C++ offers two related meaning of &quot;constant&quot;:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   - `constexpr`: Evaluate at compile time.</span><br><span class="hljs-comment">   - `const`: Do not modify in this scope.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Basically, `constexpr`&#x27;s role is to enable and ensure compile-time evaluation, whereas `const`&#x27;s primary role is to sepcify immutability in interface.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2. A ***constant expression*** is an expression that a compiler can evaluate.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   - It cannot use values that are not known at compile time and it cannot have side effects.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Ultimately, a constant expression must start out with an integral value, a floating-point value, or an enumerator, and we can combine those using operator and `constexpr` functions that in turn produce values.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   In addition, some addresses can be used in some forms of constant expressions.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3. There are a variety of reasons why someone might want a named constant rather than a literal or a value stored in a variable:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   - Named constants make the code easier to understand and maintain.</span><br><span class="hljs-comment">   - A variable might be changed.</span><br><span class="hljs-comment">     - So we have to be more careful in our reasoning than for a constant.</span><br><span class="hljs-comment">   - The language requires constant expressions for array sizes, `case` labels, and `template` value arguments.</span><br><span class="hljs-comment">   - Embedded systems programmers like to put immutable data into read-only memory because read-only memory is cheaper than dynamic memory (in terms of cost and energy consumption), and often more plentiful. Also, data in read-only memory is immune to most system crashes.</span><br><span class="hljs-comment">   - If initialization is done at compile time, there can be no data races on that object in a multi-threaded system.</span><br><span class="hljs-comment">   - Sometimes, evaluating something once (at compile time) gives significantly better performance than doing so a million times at run time.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   We don&#x27;t just use constant expressions because of an obsession with performance. Often, the reason is that a constant expression is more direct representation of our system requirements.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span> <span class="hljs-number">10.5</span> Implicit Type Conversion<br><br><br><br><span class="hljs-comment">#### 10.5.1 Promotions</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span><span class="hljs-comment"># 10.5.2 Conversions</span><br><br><br><br><span class="hljs-comment">##### 10.5.2.1 Integral Conversions</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span><span class="hljs-comment">## 10.5.2.2 Floating-Point Conversions</span><br><br><br><br><span class="hljs-comment">##### 10.5.2.3 Pointer and Reference Conversions</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span><span class="hljs-comment">## 10.5.2.4 Pointer-to-Member Conversions</span><br><br><br><br><span class="hljs-comment">##### 10.5.2.5 Boolean Conversions</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span><span class="hljs-comment">## 10.5.2.6 Floating-Integral Conversions</span><br><br><br><br><br><br><span class="hljs-comment">## Chapter 11. Select Operations</span><br><br><span class="hljs-comment">### 11.2 Free Store</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span> <span class="hljs-number">11.4</span> Lambda Expressions<br><br><span class="hljs-comment">## Chapter 12. Functions</span><br><br><span class="hljs-comment">## Chapter 13. Exception Handling</span><br><br><span class="hljs-comment">### 13.6 A `vector` implementation</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span><span class="hljs-comment"># 13.6.1 A Simple `vector`</span><br><br><span class="hljs-number">1.</span> A typical implementation <span class="hljs-keyword">of</span> `<span class="language-javascript">vector</span>` (section <span class="hljs-number">4.4</span><span class="hljs-number">.1</span>, section <span class="hljs-number">31.4</span>) will consist <span class="hljs-keyword">of</span> a **handle** holding pointers to the first element, one-past-the-last element, <span class="hljs-keyword">and</span> one-past-the-last allocated space (section <span class="hljs-number">31.2</span><span class="hljs-number">.1</span>) (<span class="hljs-keyword">or</span> the equivalent information represented <span class="hljs-keyword">as</span> a pointer plus offsets):<br><br>   - ![image<span class="hljs-number">-20230124202038535</span>](D:\obsidian\Louis\计算机专业知识\C++.assets\image<span class="hljs-number">-20230124202038535.</span>png)<br><br>   In addition, it holds an allocator (here, `<span class="language-javascript">alloc</span>`), <span class="hljs-keyword">from</span> which the `<span class="language-javascript">vector</span>` can acquire memory <span class="hljs-keyword">for</span> its elements.<br><br>   - The <span class="hljs-keyword">default</span> allocator (section <span class="hljs-number">34.4</span><span class="hljs-number">.1</span>) uses `<span class="language-javascript"><span class="hljs-keyword">new</span></span>` <span class="hljs-keyword">and</span> `<span class="language-javascript"><span class="hljs-keyword">delete</span></span>` to acquire <span class="hljs-keyword">and</span> release memory.<br><span class="hljs-number">2.</span> Here <span class="hljs-keyword">is</span> a declaration <span class="hljs-keyword">of</span> `<span class="language-javascript">vector</span>` simplified to present only what <span class="hljs-keyword">is</span> needed to discuss exception safety <span class="hljs-keyword">and</span> avoidance <span class="hljs-keyword">of</span> resource leaks:<br><br>   ```<span class="language-javascript">C++</span><br><span class="language-javascript">   template&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> = allocator&lt;T&gt;&gt;</span><br><span class="language-javascript">   <span class="hljs-keyword">class</span> <span class="hljs-title class_">vector</span>&#123;</span><br><span class="language-javascript">   <span class="hljs-attr">private</span>:</span><br><span class="language-javascript">       T* elem; <span class="hljs-comment">// start of allocation</span></span><br><span class="language-javascript">       T* space; <span class="hljs-comment">// end of element sequence, start of space allocated for possible expression</span></span><br><span class="language-javascript">       T* last; <span class="hljs-comment">// end of allocated space</span></span><br><span class="language-javascript">       A alloc; <span class="hljs-comment">// allocator</span></span><br><span class="language-javascript">   </span><br><span class="language-javascript">   <span class="hljs-attr">public</span>:</span><br><span class="language-javascript">       using size_type = unsigned int; <span class="hljs-comment">// type used for vector sizes</span></span><br><span class="language-javascript">   </span><br><span class="language-javascript">       explicit <span class="hljs-title function_">vector</span>(size_type n, <span class="hljs-keyword">const</span> T&amp; val = <span class="hljs-title function_">T</span>(), <span class="hljs-keyword">const</span> A&amp; = <span class="hljs-title function_">A</span>());</span><br><span class="language-javascript">   </span><br><span class="language-javascript">       <span class="hljs-title function_">vector</span>(<span class="hljs-keyword">const</span> vector&amp; a); <span class="hljs-comment">// copy constructor</span></span><br><span class="language-javascript">       vector&amp; operator=(<span class="hljs-keyword">const</span> vector&amp; a); <span class="hljs-comment">// copy assignment</span></span><br><span class="language-javascript">   </span><br><span class="language-javascript">       <span class="hljs-title function_">vector</span>(vector&amp;&amp; a); <span class="hljs-comment">// move constructor</span></span><br><span class="language-javascript">       vector&amp; operator=(vector&amp;&amp; a); <span class="hljs-comment">// move assignment</span></span><br><span class="language-javascript">   </span><br><span class="language-javascript">       ~<span class="hljs-title function_">vector</span>();</span><br><span class="language-javascript">   </span><br><span class="language-javascript">       size_type <span class="hljs-title function_">size</span>() <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">return</span> space-elem;&#125;</span><br><span class="language-javascript">       size_type <span class="hljs-title function_">capacity</span>() <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">return</span> last-elem;&#125;</span><br><span class="language-javascript">       <span class="hljs-keyword">void</span> <span class="hljs-title function_">reserve</span>(size_type n); <span class="hljs-comment">// increase capacity to n</span></span><br><span class="language-javascript">   </span><br><span class="language-javascript">       <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span>(size_type n, <span class="hljs-keyword">const</span> T&amp; = &#123;&#125;); <span class="hljs-comment">// increase size to n</span></span><br><span class="language-javascript">       <span class="hljs-keyword">void</span> <span class="hljs-title function_">push_back</span>(<span class="hljs-keyword">const</span> T&amp;); <span class="hljs-comment">// add an element at the end</span></span><br><span class="language-javascript">   </span><br><span class="language-javascript">       <span class="hljs-comment">// ...</span></span><br><span class="language-javascript">   &#125;;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Chapter-14-Namespaces"><a href="#Chapter-14-Namespaces" class="headerlink" title="Chapter 14. Namespaces"></a>Chapter 14. Namespaces</h2><h4 id="14-2-4-Argument-Dependent-Lookup"><a href="#14-2-4-Argument-Dependent-Lookup" class="headerlink" title="14.2.4 Argument-Dependent Lookup"></a>14.2.4 Argument-Dependent Lookup</h4><ol><li>When a class member invokes a named function, other members of the same class and its base classes are preferred over functions potentially found based on argument types (operators follow a different rule; Section 18.5)</li></ol><h2 id="Chapter-15-Source-Files-and-Programs"><a href="#Chapter-15-Source-Files-and-Programs" class="headerlink" title="Chapter 15. Source Files and Programs"></a>Chapter 15. Source Files and Programs</h2><h3 id="15-4-Programs"><a href="#15-4-Programs" class="headerlink" title="15.4 Programs"></a>15.4 Programs</h3><h4 id="15-4-3-Program-Termination"><a href="#15-4-3-Program-Termination" class="headerlink" title="15.4.3 Program Termination"></a>15.4.3 Program Termination</h4><h1 id="The-C-Programming-Language-Part-Ⅲ-Abstraction-Mechanisms"><a href="#The-C-Programming-Language-Part-Ⅲ-Abstraction-Mechanisms" class="headerlink" title="The C++ Programming Language  Part Ⅲ : Abstraction Mechanisms"></a>The C++ Programming Language  Part Ⅲ : Abstraction Mechanisms</h1><h2 id="Chapter-16-Classes"><a href="#Chapter-16-Classes" class="headerlink" title="Chapter 16. Classes"></a>Chapter 16. Classes</h2><h3 id="16-2-Class-Basics"><a href="#16-2-Class-Basics" class="headerlink" title="16.2 Class Basics"></a>16.2 Class Basics</h3><h4 id="16-2-12-static-members"><a href="#16-2-12-static-members" class="headerlink" title="16.2.12 static members"></a>16.2.12 <code>static</code> members</h4><ol><li><p>A variable that is part of a class, yet is not part of an object of that class, is called a <code>static</code> member.</p><ul><li>This is exactly one copy of a <code>static</code> member instead of  one copy per object, as for ordinary non-<code>static</code> members (section 6.4.2).</li></ul><p>Similarly, a function that needs access to members of a class, yet doesn’t need to be invoked for a particular object, is called a <code>static</code> member function.</p></li><li><p>If used, a <code>static</code> member – a function or data member – must be defined somewhere.</p><p>The keyword <code>static</code> is not repeated in the definition of a <code>static</code> member.</p></li><li><p>In multi-threaded code, <code>static</code> data members require some kind of locking or access discipline to avoid race conditions (section 5.3.4; section 41.2.4).</p></li></ol><h3 id="16-3-Concrete-Classes"><a href="#16-3-Concrete-Classes" class="headerlink" title="16.3 Concrete Classes"></a>16.3 Concrete Classes</h3><ol><li>A class is called <em>concrete</em> (or <em>a concrete class</em>) if its representation is part of its definition.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> Chrono&#123;<br>    <span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Month</span> &#123;jan=<span class="hljs-number">1</span>,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec&#125;;<br>  <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span>&#123;<br>    <span class="hljs-keyword">public</span>: <span class="hljs-comment">// public interface</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bad_date</span>&#123;&#125;; <span class="hljs-comment">// exception class</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-type">int</span> dd=&#123;&#125;, Month mm=&#123;&#125;, <span class="hljs-type">int</span> yy=&#123;&#125;)</span></span>; <span class="hljs-comment">// &#123;&#125; means &quot;pick a default&quot;</span><br>      <br>        <span class="hljs-comment">// nonmodifying functions for examining the Date:</span><br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">day</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function">Month <span class="hljs-title">month</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">year</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>      <br>        <span class="hljs-function">string <span class="hljs-title">string_rep</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// string representation</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">char_rep</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">int</span> max)</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// C-style string representation</span><br>      <br>        <span class="hljs-comment">// (modifying) functions for changing the Date:</span><br>        <span class="hljs-function">Date&amp; <span class="hljs-title">add_year</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>; <span class="hljs-comment">// add n years</span><br>        <span class="hljs-function">Date&amp; <span class="hljs-title">add_month</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>; <span class="hljs-comment">// add n months</span><br>        <span class="hljs-function">Date&amp; <span class="hljs-title">add_day</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>; <span class="hljs-comment">// add n days</span><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_valid</span><span class="hljs-params">()</span>: // check if this Date representation is a date</span><br><span class="hljs-function">        int d, m, y;</span> <span class="hljs-comment">// representation</span><br>    &#125;;<br>  <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_date</span><span class="hljs-params">(<span class="hljs-type">int</span> d, Month m, <span class="hljs-type">int</span> y)</span></span>; <span class="hljs-comment">// true for a valid date</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_leapyear</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span></span>; <span class="hljs-comment">// true if y is a leap year</span><br>  <br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Date&amp; a, <span class="hljs-type">const</span> Date&amp; b);<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> Date&amp;a, <span class="hljs-type">const</span> Date&amp; b);<br>  <br>    <span class="hljs-function"><span class="hljs-type">const</span> Date&amp; <span class="hljs-title">default_date</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// the default date</span><br>  <br>    ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="hljs-type">const</span> Date&amp; d); <span class="hljs-comment">// print d to os</span><br>    istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; is, Date&amp; d); <span class="hljs-comment">// read Date from is into d</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Chapter-17-Construction-Cleanup-Copy-and-Move"><a href="#Chapter-17-Construction-Cleanup-Copy-and-Move" class="headerlink" title="Chapter 17. Construction, Cleanup, Copy, and Move"></a>Chapter 17. Construction, Cleanup, Copy, and Move</h2><h3 id="17-2-Constructors-and-Destructors"><a href="#17-2-Constructors-and-Destructors" class="headerlink" title="17.2 Constructors and Destructors"></a>17.2 Constructors and Destructors</h3><h4 id="17-2-5-virtual-Destructors"><a href="#17-2-5-virtual-Destructors" class="headerlink" title="17.2.5 virtual Destructors"></a>17.2.5 <code>virtual</code> Destructors</h4><ol><li><p>A destructors can be declared to be <code>virtual</code>, and usually should be for a class with a virtual function.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">// pure virtual function</span><br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Shape</span>();<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>    ~<span class="hljs-built_in">Circle</span>(); <span class="hljs-comment">// overrides ~Shape()</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>The reason we need a <code>virtual</code> destructor is that an object usually manipulated through the interface provided by a base class is often also <code>delete</code>d through that interface:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">user</span><span class="hljs-params">(Shape* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    p-&gt;<span class="hljs-built_in">draw</span>(); <span class="hljs-comment">// invoke the appropriate draw()</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">delete</span> p; <span class="hljs-comment">// invoke the appropriate destructor</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Had <code>Shape</code>‘s destructor not beed <code>virtual</code> that <code>delete</code> would have failed to invoke the appropriate derived class destructor (e.g., ~Circle()).</p><p>That failure would cause the resources owned by the deleted object (if any) to be leaked.</p></li></ul></li></ol><h3 id="17-5-Copy-and-Move"><a href="#17-5-Copy-and-Move" class="headerlink" title="17.5 Copy and Move"></a>17.5 Copy and Move</h3><h4 id="17-5-1-Copy"><a href="#17-5-1-Copy" class="headerlink" title="17.5.1 Copy"></a>17.5.1 Copy</h4><p>Consider a simple two-dimensional <code>Matrix</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span>&#123;<br>    array&lt;<span class="hljs-type">int</span>,2&gt; dim; <span class="hljs-comment">// two dimensions</span><br>    T* elem; <span class="hljs-comment">// pointer to dim[0]*dim[1] elements of type T</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Matrix</span>(<span class="hljs-type">int</span> d1, <span class="hljs-type">int</span> d2) :dim&#123;d1,d2&#125;, elem&#123;<span class="hljs-keyword">new</span> T[d1*d2]&#125;&#123;&#125; <span class="hljs-comment">// simplified (no error handling)\</span><br><span class="hljs-comment">    int size() const &#123;return dim[0]*dim[1];&#125;</span><br>  <br>    <span class="hljs-built_in">Matrix</span>(<span class="hljs-type">const</span> Matrix&amp;); <span class="hljs-comment">//copy constructor</span><br>    Matrix&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Matrix&amp;); <span class="hljs-comment">// copy assignment</span><br>  <br>    <span class="hljs-built_in">Matrix</span>(Matrix&amp;&amp;); <span class="hljs-comment">// move constructor</span><br>    Matrix&amp; <span class="hljs-keyword">operator</span>=(Matrix&amp;&amp;); <span class="hljs-comment">// move assignment</span><br>  <br>    ~<span class="hljs-built_in">Matrix</span>()&#123; <span class="hljs-keyword">delete</span>[] elem;&#125;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Chapter-18-Operator-Overloading"><a href="#Chapter-18-Operator-Overloading" class="headerlink" title="Chapter 18 Operator Overloading"></a>Chapter 18 Operator Overloading</h2><ul><li>Introduction</li><li>Operator Functions<ul><li>Binary and Unary Operators</li><li>Predefined Meanings for Operators</li><li>Operators and User defined Types</li><li>Passing Objects</li><li>Operators in Namespaces</li></ul></li><li>A Complex Number Type<ul><li>Member and Nonmember Operators</li><li>Mixed-Mode Arithmetic</li><li>Conversions</li><li>Literals</li><li>Accessor Functions</li><li>Helper Functions</li></ul></li><li>Type Conversion<ul><li>Conversion Operators</li><li><code>explicit</code> Conversion Operators</li><li>Ambiguities</li></ul></li><li>Advice</li></ul><h3 id="18-1-Introduction"><a href="#18-1-Introduction" class="headerlink" title="18.1 Introduction"></a>18.1 Introduction</h3><ol><li><p>Every technical field – and most nontechnical fields – has developed conventional shorthand notation to make convenient the presentation and discussion involving frequently used concepts.</p><ul><li><code>x+y*z</code> is clearer to us than <code>mutiply y by z and add the result to x</code>.</li></ul></li><li><p>Like most languages, C++ supports a set of operators for its built-in types. However, most concepts for which operators are conventionally used are not built-in types in C++, so they must be represented as user-defined types.</p><ul><li>For example, if you need complex arithmetic, matrix algebra, logic signals, or character strings in C++, you use classes to represent these notions.</li></ul><p>Defining operators for such classes sometimes allows a programmer to provide a more conventional and convenient notation for manipulating objects than that could be achieved using only the basic functional notation.</p></li><li><p>Consider:</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span>&#123; <span class="hljs-comment">// a very simplified complex</span><br>    <span class="hljs-type">double</span> re, im;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">complex</span>(<span class="hljs-type">double</span> r, <span class="hljs-type">double</span> i) :re&#123;r&#125;,im&#123;i&#125;&#123;&#125;<br>    complex <span class="hljs-keyword">operator</span>+(complex);<br>    complex <span class="hljs-keyword">operator</span>*(complex);<br>&#125;;<br></code></pre></td></tr></table></figure><p>This defines a simple implementation of the concept of complex numbers.</p><ul><li>A <code>complex</code> is represented by a pair of double-precision floating-point numbers manipulated by the operator <code>+</code> and <code>*</code>.</li><li>The programmber defines <code>complex::operator+()</code> and <code>complex::operator*()</code> to provide meanings for <code>+</code> and <code>*</code>.<ul><li>For example, if <code>b</code> and <code>c</code> are of type <code>complex</code>, <code>b+c</code> means <code>b.operator+(c)</code></li></ul></li></ul><p>We can now approximate the conventional interpretation of <code>complex</code> expressions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    complex a = complex&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3.1</span>&#125;;<br>    complex b&#123;<span class="hljs-number">1.2</span>,<span class="hljs-number">2</span>&#125;;<br>    complex c&#123;b&#125;;<br>  <br>    a = b+c;<br>    b = b+c*a;<br>    c = a*b+<span class="hljs-built_in">complex</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>The usual precedence rules hold.<ul><li>So the second statement means <code>b=b+(c*a)</code>, not <code>b=(b+c)*a</code>.</li></ul></li></ul><ol start="4"><li>C++ grammar is written so that the <code>&#123;&#125;</code> notation can only be used for initializers and on the right-hand side of an assignment:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(complex a, complex b)</span></span><br><span class="hljs-function"></span>&#123;<br>    a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;; <span class="hljs-comment">// Ok: right hand side of assignment</span><br>    a += &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;; <span class="hljs-comment">// Ok: right hand side of assignment</span><br>    b = a+&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;; <span class="hljs-comment">// Sytax error</span><br>    b = a+complex&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;; <span class="hljs-comment">// Ok</span><br>    <span class="hljs-built_in">g</span>(a,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;); <span class="hljs-comment">// Ok: a function argument is considered an initializer</span><br>    &#123;a,b&#125; = &#123;b,a&#125;; <span class="hljs-comment">// Sytax error</span><br>&#125;<br></code></pre></td></tr></table></figure><p>There seems to be no fundamental reason not to use <code>&#123;&#125;</code> in more places, but the technical problems of writing a grammar allowing <code>&#123;&#125;</code> everywhere in an expression (e.g., how would you know if a <code>&#123;</code> after a semicolon was the start of an expression or a block?) and also giving good error messages led to a more limited use of <code>&#123;&#125;</code> in expressions.</p><ol start="5"><li>Many of the most obvious uses of operator overloading are for numberic types. However, the usefulness of user-defined operators is not restricted to numberic types.<ul><li>For example, the design of general and abstract interfaces often leads to the use of operators such as <code>-&gt;</code>, <code>[]</code>, and <code>()</code>.</li></ul></li></ol><h3 id="18-2-Operator-Functions"><a href="#18-2-Operator-Functions" class="headerlink" title="18.2 Operator Functions"></a>18.2 Operator Functions</h3><ol start="6"><li>Functions defining meanings for the following operators can be declared:</li></ol><ul><li><img src="D:\obsidian\Louis\计算机专业知识\C++.assets\image-20230117195603731.png" alt="image-20230117195603731"></li></ul><ol start="7"><li><p>The following operators cannot be defined by a user:</p><ul><li><code>::</code>    scope resolution</li><li><code>.</code>     member selection</li><li><code>.*</code>    member selection through pointer to member</li></ul><p>They take a name, rather than a value, as their second operand and provide the primary means of referring to members. Allowing them to  be overloaded would lead to subtleties.</p></li><li><p>The named “operator” cannot be overloaded because they report fundamental facts about their operands:</p><ul><li><code>sizeof</code>    size of object</li><li><code>alignof</code>    alignment of object</li><li><code>typeid</code>    <code>type_info</code> of an object</li></ul></li><li><p>The ternary conditional expression operator cannot be overloaded (for no particularly fundamental reason):</p><ul><li><code>?:</code>    conditional evaluation</li></ul></li><li><p>User-defined literals are defined by using the <code>operator&quot;&quot;</code> notation.</p><ul><li>This is a syntactic subterfuge because there is no operator called <code>&quot;&quot;</code>.</li></ul><p>Similarly, <code>operaor T()</code> defines a conversion to a type <code>T</code>.</p></li><li><p>It is not possible to define new operator tokens, but you can use the function call notation when this set of operators is not adequate.</p><ul><li>For example, use <code>pow()</code>, not <code>**</code>.</li><li>These restrictions may seem Draconian, but more flexible rules can easily lead to ambiguities.<ul><li>For example, defining an operator <code>∗∗</code> to mean exponentiation may seem an obvious and easy task, but think again. Should <code>∗∗</code> bind to the left (as in Fortran) or to the right (as in Algol)? Should the expression <code>a∗∗p</code> be interpreted as <code>a∗(∗p)</code> or as <code>(a)∗∗(p)</code>?</li><li>There are solutions to all such technical questions.</li><li>However, it is most uncertain if applying subtle technical rules will lead to more readable and maintainable code. If doubt, use a named function.</li></ul></li></ul></li><li><p>The name of an operator function is the keyword <code>operator</code> followed by the operator itself.</p><ul><li>For example, <code>operator&lt;&lt;</code>.</li></ul><p>An operator function is declared and can be used like any other function.</p><ul><li>A use of the operator is only a shorthand for explicit call of the operator function.</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(complex a, complex b)</span></span><br><span class="hljs-function"></span>&#123;<br>    complex c = a + b; <span class="hljs-comment">// shorthand</span><br>    complex d = a.<span class="hljs-keyword">operator</span>+(b); <span class="hljs-comment">// explicit call</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Given the previous definition of <code>complex</code>, the two initializers are synonymous.</p><h4 id="18-2-1-Binary-and-Unary-Operators"><a href="#18-2-1-Binary-and-Unary-Operators" class="headerlink" title="18.2.1 Binary and Unary Operators"></a>18.2.1 Binary and Unary Operators</h4><ol start="13"><li>A binary operator can be defined by either a <a href="https://www.cnblogs.com/rickyk/p/4238380.html">non-<code>static</code> member function</a> taking one argument or a <a href="https://www.cnblogs.com/muchen/p/6353793.html">nonmember function</a> taking two arguments.<ul><li>For any bianry operator <code>@</code>, <code>aa@bb</code> can be interpreted as either <code>aa.operator@bb</code> or <code>operator@(aa,bb)</code>. If both are defined, overload resolution determines which, if any, interpretation is used.</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>+(<span class="hljs-type">int</span>);<br>    <span class="hljs-built_in">X</span>(<span class="hljs-type">int</span>);<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>+(X,X); <span class="hljs-comment">// non-static member function</span><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>+(X,<span class="hljs-type">double</span>);<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(X a)</span></span><br><span class="hljs-function"></span>&#123;<br>    a+<span class="hljs-number">1</span>; <span class="hljs-comment">// a.operator+(1)</span><br>    <span class="hljs-number">1</span>+a; <span class="hljs-comment">// ::operator+(X(1),a) nonmember function</span><br>    a+<span class="hljs-number">1.0</span>; <span class="hljs-comment">// ：：operator+(a,1.0)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/1022477">静态成员函数和非静态成员函数的区别？ - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><ol start="14"><li><p>A unary operator, whether prefix or postfix, can be defined by either a non-<code>static</code> member function taking no arguments or a nonmember function taking one argument.</p><ul><li>For any prefix unary operator <code>@</code>, <code>@aa</code> can be interpreted as either <code>aa.operator@()</code> or <code>operator@(aa)</code>. If both are defined, overload resolution determines which, if any, interpretation is used.</li><li>For any postfix unary operator <code>@</code>, <code>aa@</code> can be interpreted as either <code>aa.operator@()</code> or <code>operator@(aa,int)</code>. If both are defined, overload resolution determines which, if any, interpretation is used.</li><li>参考section 19.2.4节，介绍关于argument <code>int</code>作为一个dummy，只是用于区分prefix和postfix.<ul><li>The <code>int</code> argument is used to indicate that the function is to be invoked for postfix application of <code>++</code>.<ul><li>This <code>int</code> is never used; the argument is simply a dummy used to distinguish between prefix and postfix application.</li><li>The way to remember which version of an <code>operator++</code> is prefix is to note that the version without the dummy argument is prefix, exactly like all the other unary arithmetic and logical operators.</li></ul></li></ul></li></ul></li><li><p>An operator can be declared only for the syntax defined for it in the grammar.</p><ul><li>For example, a user cannot define a unary <code>%</code> or a ternary <code>+</code>.</li></ul><p>Consider:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span>&#123;<br><span class="hljs-keyword">public</span>: <span class="hljs-comment">// members (with implicit this pointer):</span><br>    X* <span class="hljs-keyword">operator</span>&amp;(); <span class="hljs-comment">// prefix unary &amp; (address of)</span><br>    X <span class="hljs-keyword">operator</span>&amp;(X); <span class="hljs-comment">// binary &amp; (and)</span><br>    X <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>); <span class="hljs-comment">// postfix increment</span><br>    X <span class="hljs-keyword">operator</span>&amp;(X,X); <span class="hljs-comment">// Error: ternary</span><br>    X <span class="hljs-keyword">operator</span>/(); <span class="hljs-comment">//Erro: Unary /</span><br>&#125;;<br><br><span class="hljs-comment">// nonmember functions:</span><br>X <span class="hljs-keyword">operator</span>-(X); <span class="hljs-comment">// prefix unary minus</span><br>X <span class="hljs-keyword">operator</span>-(X,X); <span class="hljs-comment">// binary minus</span><br>X <span class="hljs-keyword">operator</span>--(X&amp;,<span class="hljs-type">int</span>); <span class="hljs-comment">// postfix decrement</span><br>X <span class="hljs-keyword">operator</span>-(); <span class="hljs-comment">// Error: no operand</span><br>X <span class="hljs-keyword">operator</span>-(X,X,X); <span class="hljs-comment">// Error: ternary</span><br>X <span class="hljs-keyword">operator</span>%(X); <span class="hljs-comment">// Error: unary %</span><br></code></pre></td></tr></table></figure></li><li><p>The operators <code>operator=</code>, <code>operator[]</code>, <code>operator()</code>, and <code>operator-&gt;</code> must be non-<code>static</code> member functions.</p></li><li><p>The default meaning of <code>&amp;&amp;</code>, <code>||</code> and <code>,</code> involves sequencing: the first operand is evaluated before the second (and for <code>&amp;&amp;</code> and <code>||</code> the second operand is not always evaluated).</p><ul><li>This special rule does not hold for user-defined versions of <code>&amp;&amp;</code> , <code>||</code>, and <code>,</code>; instead these operators are treated exactly like other binary operators.</li></ul></li></ol><h4 id="18-2-2-Predefined-Meanings-for-Operators"><a href="#18-2-2-Predefined-Meanings-for-Operators" class="headerlink" title="18.2.2 Predefined Meanings for Operators"></a>18.2.2 Predefined Meanings for Operators</h4><ol start="18"><li><p>The meaning of some built-in operators are defined to be equivalent to some combination of other operators on the same arguments.</p><ul><li>For example, if <code>a</code> is an int,  <code>++a</code> means <code>a+=1</code>, which in turn means <code>a=a+1</code>.</li></ul><p>Such relations do not hold for user-defined operators unless the user defines them to.</p><ul><li>For example, a compiler will not generate a definition of <code>Z::operator+=()</code> from the definitions of <code>Z::operator+()</code> and <code>Z::operator=()</code>.</li></ul></li><li><p>The operator <code>=</code>(assignment), <code>&amp;</code>(address of), and <code>,</code>(sequencing) have predefined meanings when applied to class objects.</p><ul><li>These predefined meanings can be eliminated(“deleted”)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> X&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>&amp;() = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>,(<span class="hljs-type">const</span> X&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(X a, X b)</span></span><br><span class="hljs-function"></span>&#123;<br>    a = b; <span class="hljs-comment">// Error: no operator=()</span><br>    &amp;a; <span class="hljs-comment">// Error: no operator&amp;()</span><br>    a,b; <span class="hljs-comment">// Error: no operator,()</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>Alternatively, they can be given new meanings by suitable definitions.</p></li></ol><h4 id="18-2-3-Operators-and-User-Defined-Types"><a href="#18-2-3-Operators-and-User-Defined-Types" class="headerlink" title="18.2.3 Operators and User-Defined Types"></a>18.2.3 Operators and User-Defined Types</h4><ol start="20"><li><p>An operator function must either be a member or take at least one argument of a user-defined type (functions redefining the <code>new</code> and <code>delete</code> operators need not).</p><ul><li>This rule ensures that a user cannot change the meaning of an expression unless the expression contains an object of a user-defined type.</li></ul><p>In particular, it is not possible to define an operator function that operates exclusively on pointers.</p><ul><li>This ensures that C++ is extensible but not mutable (with the exception of operators <code>=</code>, <code>&amp;</code>, and <code>,</code> for class objects).</li></ul></li><li><p>An operator function intended to accept a built-in type as its first operand cannot be a member function.</p><ul><li>For example, consider adding a complex variable <code>aa</code> to the integer <code>2</code>: <code>aa+2</code> can, with suitably declared member function , be interpreted as <code>aa.operator+(2)</code>, but <code>2+aa</code> cannot because there is no class <code>int</code> for which to define <code>+</code> to mean <code>2+operator+(aa)</code>.<ul><li>Even if there were, two different member functions would be needed to cope with <code>2+aa</code> and <code>aa+2</code>. Because the compiler does not know the meaning of a user-defined +, it cannot assume that the operator is commutative and so interpret <code>2+aa</code> as <code>aa+2</code>.</li><li>This example is trivially handled using one or more nonmember functions.</li></ul></li></ul></li><li><p>Enumberations are user-defined types so that we can define operators for them.</p><ul><li><p>For example</p><ul><li>```C++<br>enum Day{sun,mon,tue,wed,thu,fri,sat};Day&amp; operator++(Day&amp; d)<br>{<pre><code class="hljs">return d = (sat == d) ? sun : static_cast&lt;Day&gt;(d+1);</code></pre>}<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><br>Every expression <span class="hljs-keyword">is</span> checked <span class="hljs-keyword">for</span> ambiguities. <span class="hljs-keyword">Where</span> a user-defined <span class="hljs-keyword">operator</span> provide a possible interpretation, the expression <span class="hljs-keyword">is</span> checked according <span class="hljs-keyword">to</span> the <span class="hljs-keyword">overload</span> resolution rules <span class="hljs-keyword">in</span> Section <span class="hljs-number">12.3</span>.<br><br>#### <span class="hljs-number">18.2</span>.<span class="hljs-number">4</span> Passing objects<br><br><span class="hljs-number">23</span>. When we define an <span class="hljs-keyword">operator</span>, we typically want <span class="hljs-keyword">to</span> provide a conventional notation.<br><br>    - <span class="hljs-keyword">For</span> example, `a=b+c`.<br><br>    Consequently, we have limited choices <span class="hljs-keyword">of</span> how <span class="hljs-keyword">to</span> pass arguments <span class="hljs-keyword">to</span> the <span class="hljs-keyword">operator</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">and</span> <span class="hljs-title function_">how</span> <span class="hljs-title function_">it</span> <span class="hljs-title function_">returns</span> <span class="hljs-title function_">its</span> <span class="hljs-title function_">value</span>.<br><br>    - <span class="hljs-title function_">For</span> <span class="hljs-title function_">example</span>, <span class="hljs-title function_">we</span> <span class="hljs-title function_">cannot</span> <span class="hljs-title function_">require</span> <span class="hljs-title function_">pointer</span> <span class="hljs-title function_">arguments</span> <span class="hljs-title function_">and</span> <span class="hljs-title function_">expect</span> <span class="hljs-title function_">programmers</span> <span class="hljs-title function_">to</span> <span class="hljs-title function_">use</span> <span class="hljs-title function_">the</span> <span class="hljs-title function_">address</span>-<span class="hljs-title function_">of</span> <span class="hljs-title function_">operator</span> <span class="hljs-title function_">or</span> <span class="hljs-title function_">return</span> <span class="hljs-title function_">a</span> <span class="hljs-title function_">pointer</span> <span class="hljs-title function_">and</span> <span class="hljs-title function_">expect</span> <span class="hljs-title function_">the</span> <span class="hljs-title function_">user</span> <span class="hljs-title function_">to</span> <span class="hljs-title function_">dereference</span> <span class="hljs-title function_">it</span>: `*a=&amp;b+&amp;c` <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> acceptable.<br><span class="hljs-number">24</span>. <span class="hljs-keyword">For</span> arguments, we have two main choices:<br><br>    - Pass-<span class="hljs-keyword">by</span>-value<br>    - Pass-<span class="hljs-keyword">by</span>-<span class="hljs-keyword">reference</span><br><br>    <span class="hljs-keyword">For</span> small objects, say, one <span class="hljs-keyword">to</span> four words, call-<span class="hljs-keyword">by</span>-value <span class="hljs-keyword">is</span> typically a viable alternative <span class="hljs-keyword">and</span> often the one that gives the best performance.<br><br>    However, performance <span class="hljs-keyword">of</span> argument passing <span class="hljs-keyword">and</span> use depends <span class="hljs-keyword">on</span> machine architecture, compiler <span class="hljs-keyword">interface</span> conventions (Application Binary Interfaces<span class="hljs-punctuation">;</span> ABIs), <span class="hljs-keyword">and</span> the number <span class="hljs-keyword">of</span> times an argument <span class="hljs-keyword">is</span> accessed (it almost always <span class="hljs-keyword">is</span> faster <span class="hljs-keyword">to</span> access an argument passed <span class="hljs-keyword">by</span> value than one passed <span class="hljs-keyword">by</span> <span class="hljs-keyword">reference</span>).<br><br>    - <span class="hljs-keyword">For</span> example, assument taht a `Point` <span class="hljs-keyword">is</span> represented <span class="hljs-keyword">as</span> a pair <span class="hljs-keyword">of</span> `int`s:<br><br>      - ```C++<br>        void Point::<span class="hljs-keyword">operator</span>+=(Point delta)<span class="hljs-punctuation">;</span> <span class="hljs-comment">// pass-by-value (small object)</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>For larger objects, we pass by reference.</p><ul><li><p>For example.</p><ul><li>```C++<br>template<class T><br>class Matrix{<pre><code class="hljs">array&lt;int,2&gt; dim; // two dimensionsT* elem; // pointer to dim[0]*dim[1] elements of type T</code></pre>public:<pre><code class="hljs">Matrix(int d1, int d2) :dim&#123;d1,d2&#125;, elem&#123;new T[d1*d2]&#125;&#123;&#125; // simplified (no error handling)\int size() const &#123;return dim[0]*dim[1];&#125;Matrix(const Matrix&amp;); //copy constructorMatrix&amp; operator=(const Matrix&amp;); // copy assignmentMatrix(Matrix&amp;&amp;); // move constructorMatrix&amp; operator=(Matrix&amp;&amp;); // move assignment~Matrix()&#123; delete[] elem;&#125;//...</code></pre>}<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">- Because a `<span class="hljs-keyword">Matrix</span>` (a simple <span class="hljs-keyword">matrix</span> of `double`s) is most likely larger than a few words, we <span class="hljs-keyword">use</span> pass-<span class="hljs-keyword">by</span>-reference:<br>- ```C++<br>  <span class="hljs-keyword">Matrix</span> operator+(<span class="hljs-keyword">const</span> <span class="hljs-keyword">Matrix</span>&amp;, <span class="hljs-keyword">const</span> <span class="hljs-keyword">Matrix</span>&amp;); <span class="hljs-comment">// pass-by-const-reference</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>In particular, we use <code>const</code> references to pass large objects that are not meant to be modified by the called function.</p></li></ul></li><li><p>Typically, an operator returns a result.</p><p>Returning a pointer or reference to a newly created object is usually a very bad idea:</p><ul><li>Using a pointer gives notational problems</li><li>Referring to an object on the free store (whether by a pointer or by a reference) results in memory management problems.</li></ul><p>Instead, return objects by value. For large objects, such as a <code>Matrix</code>, define move operations to make such transfers of values efficient.</p><ul><li><p>For example:</p><ul><li>```C++<br>Matrix operator+(const Matrix&amp; a, const Matrix&amp; b) // return-by-value<br>{<pre><code class="hljs">Matrix res&#123;a&#125;;return res+=b;</code></pre>}<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs maxima">- Note that operators that <span class="hljs-built_in">return</span> one of their argument objects can -- <span class="hljs-keyword">and</span> usually <span class="hljs-keyword">do</span> -- <span class="hljs-built_in">return</span> a reference.<br><br>  - For <span class="hljs-built_in">example</span>, we could <span class="hljs-built_in">define</span> `Matrix`&#x27;s operator `+=` like this:<br>  - ```C++<br>    Matrix&amp; Matrix::operator+=(const Matrix&amp; a) // <span class="hljs-built_in">return</span>-by-reference<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">dim</span>[<span class="hljs-number">0</span>]!=a.<span class="hljs-built_in">dim</span>[<span class="hljs-number">0</span>] || <span class="hljs-built_in">dim</span>[<span class="hljs-number">1</span>]!=a.<span class="hljs-built_in">dim</span>[<span class="hljs-number">1</span>])<br>            <span class="hljs-built_in">throw</span> <span class="hljs-built_in">std</span>::exception(<span class="hljs-string">&quot;bad Matrix += argument&quot;</span>);<br>        double* p = <span class="hljs-built_in">elem</span>;<br>        double* q = a.<span class="hljs-built_in">elem</span>;<br>        double* end = p+<span class="hljs-built_in">dim</span>[<span class="hljs-number">0</span>]*<span class="hljs-built_in">dim</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span>(p!=end)<br>            *p++=*q++;<br>    <br>        <span class="hljs-built_in">return</span> *this;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li>This is particularly common for operator functions that are implemented as members.</li></ul></li></ul></li><li><p>If a function is simply passes an object to another function, an rvalue reference argument should be used.</p></li></ol><h4 id="18-2-5-Operators-in-Namespaces"><a href="#18-2-5-Operators-in-Namespaces" class="headerlink" title="18.2.5 Operators in Namespaces"></a>18.2.5 Operators in Namespaces</h4><ol start="27"><li><p>An operator is either a member of a class or defined in some namespace (possibly the global namespace).</p><p>Consider this simplified version of string I/O from the standard library.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> std&#123; <span class="hljs-comment">// simplified std</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">string</span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ostream</span>&#123;<br>        <span class="hljs-comment">// ...</span><br>        ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(<span class="hljs-type">const</span> <span class="hljs-type">char</span>*); <span class="hljs-comment">// ouput C-style string</span><br>    &#125;;<br><br>    <span class="hljs-keyword">extern</span> ostream cout;<br><br>    ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp;, <span class="hljs-type">const</span> string&amp;); <span class="hljs-comment">// output std::string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>*p = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    std::string s = <span class="hljs-string">&quot;world&quot;</span>;<br>    std::cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; s &lt;&lt; <span class="hljs-string">&quot;!\n&quot;</span>; <span class="hljs-comment">// write out: Hello, world!</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Using <code>std::</code> prefix for <code>string</code> and <code>cout</code>, instead of <code>using namepsace std</code>, I was on my best behavior and didn’t pollute the global namespace or in other ways introduce unnecessary dependencies.</p></li><li><p>The  output operator for C-style strings is a member of <code>std::ostream</code>, so by definition</p><ul><li><code>std::cout &lt;&lt; p</code> means <code>std::cout.operator&lt;&lt;(p)</code></li></ul></li><li><p><code>std::ostream</code> doesn’t have a member function to output a <code>std::string</code>, so</p><ul><li><code>std::cout&lt;&lt;s</code> means <code>operator&lt;&lt;(std::cout,s)</code></li></ul></li><li><p>Operators defined in namespaces can be found based on their operand types just as functions can be found based on their argument types.</p><ul><li><p>In particular, <code>cout</code> is in namespace <code>std</code>, so <code>std</code> is considered when looking for suitable definition of <code>&lt;&lt;</code>.</p></li><li><p>In that way, for <code>std::cout&lt;&lt;s</code>, the compiler finds and uses:</p><ul><li>```C++<br>std::operator&lt;&lt;(std::ostream, const std::string&amp;)<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">28</span>. Consider a bianry operator `@`, if `x` is of type `X` <span class="hljs-literal">and</span> `y` is of type `Y`, `x@y` is resolved like this:<br><br>    - If `X` is a class, look for `operator@` as a member of `X` <span class="hljs-literal">or</span> as a member of a base of `X`; <span class="hljs-literal">and</span><br>    - look for declarations of `operator@` in the context surrounding `x@y`; <span class="hljs-literal">and</span><br>    - if `X` is defined in namespace `N`, look for declarations of `operator@` in `N`; <span class="hljs-literal">and</span><br>    - if `Y` is defined in naspace `M`, look for declarations of `operator@` in `M`.<br><br>    Declarations for several `operator@`s may be found an overload resolution rules are used to find the best match, if any.<br><br>    This lookup mechanism is applied only if the operator has at least one operand of a user-defined type.<br><br>    - Therefore, user-defined conversions will be considered.<br>    - Note that a type alias is just a synonym <span class="hljs-literal">and</span> <span class="hljs-literal">not</span> a separate user-defined type.<br><br>    Unary operators are resolved analogously.<br><br>    Note that in operator lookup no preference is given to members over nonmembers.<br><br>    - This different from lookup of named functions.<br><br>      - When a class member invokes a named function, other members of the same class <span class="hljs-literal">and</span> its base classes are preferred over functions potentially found based on argument types.<br>    - The lack of hiding operators ensures that built-in operator are never inaccessible <span class="hljs-literal">and</span> that users can supply <span class="hljs-keyword">new</span> meanings for an operator without modifying existing class declarations.<br><br>      - For example.<br>      - ```C++<br>        X operator!(X)<span class="hljs-comment">;</span><br>        <br>        struct Z&#123;<br>            Z operator!()<span class="hljs-comment">; // does not hide ::operator!()</span><br>            X f(X x) &#123; <span class="hljs-comment">/*...*/</span> <span class="hljs-keyword">return</span> !x<span class="hljs-comment">;&#125; // invoke ::operator!(X)</span><br>            int f(int x) &#123; <span class="hljs-comment">/*...*/</span> <span class="hljs-keyword">return</span> !x<span class="hljs-comment">;&#125; // invokde the built-in ! for ints</span><br>        &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>In particular, the standard <code>iostream</code> library defines <code>&lt;&lt;</code> member functions to output built-in types, and a user can define <code>&lt;&lt;</code> to output user-defined types without modifying class <code>ostream</code>.</p></li></ul></li></ol><h3 id="18-3-A-Complex-Number-Type"><a href="#18-3-A-Complex-Number-Type" class="headerlink" title="18.3 A Complex Number Type"></a>18.3 A Complex Number Type</h3><ol start="29"><li><p>The implementation of complex numbers presented in section 18.1 is too restrictive to please anyone.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span>&#123; <span class="hljs-comment">// a very simplified complex (from section 18.1)</span><br>    <span class="hljs-type">double</span> re, im;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">complex</span>(<span class="hljs-type">double</span> r, <span class="hljs-type">double</span> i) :re&#123;r&#125;,im&#123;i&#125;&#123;&#125;<br>    complex <span class="hljs-keyword">operator</span>+(complex);<br>    complex <span class="hljs-keyword">operator</span>*(complex);<br>&#125;;<br></code></pre></td></tr></table></figure><p>We would expect this to work:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    complex a&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    complex b&#123;<span class="hljs-number">3</span>&#125;;<br>    complex c&#123;a+<span class="hljs-number">2.3</span>&#125;;<br>    complex d&#123;<span class="hljs-number">2</span>+b&#125;;<br>    b = c*<span class="hljs-number">2</span>*c;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>In addtion, we would expect to be provided with a few additional operators.<ul><li>Such as <code>==</code> for comparison and <code>&lt;&lt;</code> for output, and a suitable set of mathematical functions, such as <code>sin()</code> and <code>sqrt()</code>.</li></ul></li></ul></li><li><p>Class <code>complex</code> is a concrete type, so its design follows the guidelines from section 16.3.</p><p>In addition, users of complex arithmetic rely so heavily on operators that the definition of <code>complex</code> brings into play most of the basic rules for operator overloading.</p></li><li><p>The <code>complex</code> type developed in this section uses <code>double</code> for its scalars and is roughly equivalent to the standard-library <code>complex&lt;double&gt;</code>.</p></li></ol><h4 id="18-3-1-Member-and-Nonmember-Operators"><a href="#18-3-1-Member-and-Nonmember-Operators" class="headerlink" title="18.3.1 Member and Nonmember Operators"></a>18.3.1 Member and Nonmember Operators</h4><ol start="32"><li><p>I prefer to minimize the number of functions that directly manipulate the representation of an object.</p><ul><li><p>This can be achieved by defining only operators that inherently modify the value of their first argument, such as <code>+=</code>, in the class itself.</p></li><li><p>Operators that simply produce a new value based on the values of their arguments, such as <code>+</code>, are then defined outside the class and use the essential operators in their implementation:</p></li><li><p>```C++<br>class complex{</p><pre><code class="hljs">double re, im;</code></pre><p>public:</p><pre><code class="hljs">complex&amp; operator+=(complex a); // needs access to representation// ...</code></pre><p>};<br>complex operator+(complex a, complex b)<br>{</p><pre><code class="hljs">return a += b; // access representation through +=</code></pre><p>}</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>  - The arguments to <span class="hljs-keyword">this</span> `<span class="hljs-keyword">operator</span>+()` are passed by value, so `a+b` does <span class="hljs-keyword">not</span> modify its operands.<br>- Given these declarations, we can write:<br><br>  ```C++<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(complex x, complex y, complex z)</span></span><br><span class="hljs-function">  </span>&#123;<br>      complex r1&#123;x+y+z&#125;; <span class="hljs-comment">// r1 = operator+(operator+(x,y),z)</span><br>  <br>      complex r2&#123;x&#125;; <span class="hljs-comment">// r2 = x</span><br>      r2 += y; <span class="hljs-comment">// r2.operator+=(y)</span><br>      r2 += z; <span class="hljs-comment">// r2.operator+=(z)</span><br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>Except for possible efficiency differentces, the computations of <code>r1</code> and <code>r2</code> are equivalent.</li></ul></li><li><p>Composite assignment operators such as <code>+=</code> and <code>*=</code> tend to be simpler to define than their “simple” counterparts <code>+</code> and <code>*</code>.</p><ul><li><p>This surprises most people at first, but follows from the fact that three objects are involved in a <code>+</code> operation (the two operands and the result), whereas only two objects are involved in a <code>+=</code> operation.</p></li><li><p>In the latter case, run-time efficiency is improved by eliminating the need for temporary variables.</p></li><li><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">inline</span> complex&amp; complex::<span class="hljs-keyword">operator</span>+=(complex a)<br>&#123;<br>    re += a.re;<br>    im += a.im;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>This does not require a temporary variable to hold the result of the addition and is simple for a compiler to inline perfectly.</li></ul></li></ul></li></ul></li><li><p>A good optimizer will generate close to optimal code for uses fo the plain <code>+</code> operator also.</p><p>However, we don’t always have a good optimizer, and not all types are as simple as <code>complex</code>.</p><ul><li>Section 19.4 discusses ways of defining operators with direct access to the representation of classes.</li></ul></li></ol><h4 id="18-3-2-Mixed-Mode-Arithmetic"><a href="#18-3-2-Mixed-Mode-Arithmetic" class="headerlink" title="18.3.2 Mixed-Mode Arithmetic"></a>18.3.2 Mixed-Mode Arithmetic</h4><ol start="34"><li><p>To cope with <code>2+z</code>, where <code>z</code> is a <code>complex</code>, we need to define operator <code>+</code> to accept operands of different types.</p><p>In Fortran terminology, we need <em><strong>mixed-mode arithmetic</strong></em>.</p><p>We can achieve that simply by adding appropriate versions of the operators:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span>&#123;<br>    <span class="hljs-type">double</span> re, im;<br><span class="hljs-keyword">public</span>:<br>    complex&amp; <span class="hljs-keyword">operator</span>+=(complex a)<br>    &#123;<br>        re += a.re;<br>        im += a.im;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    complex&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">double</span> a)<br>    &#123;<br>        re += a;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>The three variants of <code>operator+()</code> can be defined outside <code>complex</code>:</p><ul><li>```C++<br>complex operator+(complex a, complex b)<br>{<pre><code class="hljs">return a += b; // calls complex::operator+=(complex)</code></pre>}complex operator+(complex a, double b)<br>{<pre><code class="hljs">return &#123;a.real()+b, a.imag()&#125;; // real() and imag() are defined in section 18.3.6</code></pre>}complex operator+(double a, complex b)<br>{<pre><code class="hljs">return &#123;a+b.real(), b.imag()&#125;;</code></pre>}<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>Given these declarations of `+`, we can write:<br><br>```C++<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(complex x, complex y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> r1 = x+y; <span class="hljs-comment">// calls operator+(complex, complex)</span><br>    <span class="hljs-keyword">auto</span> r2 = x+<span class="hljs-number">2</span>; <span class="hljs-comment">// calls operator+(complex, double)</span><br>    <span class="hljs-keyword">auto</span> r3 = <span class="hljs-number">2</span>+x; <span class="hljs-comment">// calls operator+(double, complex)</span><br>    <span class="hljs-keyword">auto</span> r4 = <span class="hljs-number">2</span>+<span class="hljs-number">3</span>; <span class="hljs-comment">// built-in integer addition (for completeness)</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h4 id="18-3-3-Conversions"><a href="#18-3-3-Conversions" class="headerlink" title="18.3.3 Conversions"></a>18.3.3 Conversions</h4><ol start="35"><li><p>To cope with assignments and initialization of <code>complex</code> variables with scalars, we need a conversion of a scalar (integer or floating-point number) to a <code>complex</code>.</p><ul><li>For example:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">complex b&#123;<span class="hljs-number">3</span>&#125;; <span class="hljs-comment">// should mean b.re=3, b.im=0</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">comp</span><span class="hljs-params">(complex x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x = <span class="hljs-number">4</span>; <span class="hljs-comment">// should mean x.re=4, x.im=0</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>We can achieve that by providing a constructor that takes a single number.</p><p>A constructor taking a single argument specifies a conversion from its argument type to the constuctors type.</p><ul><li>For example</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span>&#123;<br>    <span class="hljs-type">double</span> re, im;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">complex</span>(<span class="hljs-type">double</span> r) :re&#123;r&#125;, im&#123;<span class="hljs-number">0</span>&#125; &#123;&#125; <span class="hljs-comment">// build a complex from a double</span><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>The constructor specifies the traditional embedding of the real line in the complex plane.</li></ul></li><li><p>A constructor is a prescription for creating a value of a given type.</p><ul><li>The constructor is used when a value of a type is expected and when such a value can be created by a constructor for the value supplied as an initializer or assigned value.</li><li>Thus, a constructor requiring a single argument need not be called explicitly.</li><li>For example:</li><li>```C++<br>complex b{3};<br>// means<br>complex b{3,0};<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">37.</span> A user-defined conversion is implicitly applied only <span class="hljs-keyword">if</span> it is unique.<br><br>    - If you don<span class="hljs-number">&#x27;</span>t want a constructor to be used implicitly, declare it `<span class="hljs-keyword">explicit</span>`.<br><span class="hljs-number">38.</span> Naturally, we still need the constructor that takes two `<span class="hljs-type">double</span>`s, <span class="hljs-keyword">and</span> a <span class="hljs-keyword">default</span> constructor initializing a `complex` to `&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;` is also useful:<br><br>    ```C++<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span>&#123;<br>    <span class="hljs-type">double</span> re, im;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">complex</span>() :re&#123;<span class="hljs-number">0</span>&#125;, im&#123;<span class="hljs-number">0</span>&#125; &#123;&#125; <span class="hljs-comment">// default constructor</span><br>        <span class="hljs-built_in">complex</span>(<span class="hljs-type">double</span> r) :re&#123;r&#125;, im&#123;<span class="hljs-number">0</span>&#125; &#123;&#125; <span class="hljs-comment">// constructor from scalar to a complex</span><br>        <span class="hljs-built_in">complex</span>(<span class="hljs-type">double</span> r, <span class="hljs-type">double</span> i) :re&#123;r&#125;, im&#123;i&#125; &#123;&#125; <span class="hljs-comment">// constructor that takes two doubles</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;;<br></code></pre></td></tr></table></figure></li></ul><p>Using default arguments, we can abbreviate:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span>&#123;<br><span class="hljs-type">double</span> re, im;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">complex</span>(<span class="hljs-type">double</span> r=<span class="hljs-number">0</span>, <span class="hljs-type">double</span> i=<span class="hljs-number">0</span>) :re&#123;r&#125;, im&#123;i&#125; &#123;&#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>By default, copying <code>complex</code> values is defined as copying the real and imaginary parts.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    complex z;<br>    complex x&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    complex y&#123;x&#125;; <span class="hljs-comment">// y also has the value &#123;1,2&#125;</span><br>    z = x; <span class="hljs-comment">// z also has the value &#123;1,2&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="18-3-3-1-Conversions-of-Operands"><a href="#18-3-3-1-Conversions-of-Operands" class="headerlink" title="18.3.3.1 Conversions of Operands"></a>18.3.3.1 Conversions of Operands</h5><ol start="40"><li><p>We defined three versions of each of the four standard arithmetic operators(<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">complex <span class="hljs-keyword">operator</span>+(complex, complex);<br>complex <span class="hljs-keyword">operator</span>+(complex, <span class="hljs-type">double</span>);<br>complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">double</span>, complex);<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>This can get tedious, and what is tedious easily becomes error-prone.</p><ul><li>What if we had three alternatives for the type of each argument for each funtion?<ul><li>We would need 3 versions of each single-argument function,  9 version of each two-argument function, 27 versions of each three-argument function, etc.</li></ul></li><li>Often these variants are very similar.<ul><li>In fact, almost all variants involve a simple conversion of arguments to a common type followed by a standard algorithm.</li></ul></li></ul></li><li><p>The alternative to providing different versions of a function for each combination of arguments is rely on conversions.</p><ul><li><p>For example, our <code>complex</code> class provides a constructor that converts a <code>double</code> to a <code>complex</code>.</p></li><li><p>Consequently, we could simply declare only one version of the equality operator for <code>complex</code>:</p><ul><li>```C++<br>bool operator==(complex, complex);void f(complex x, complex y)<br>{<pre><code class="hljs">x==y; // means operator(x,y)x==3; // means operator(x,complex(3))3==y; // means operator(complex(3),y)</code></pre>}<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-number">42.</span> There can be reasons for preferring to define separate functions.<br><br>    - For example, <span class="hljs-keyword">in</span> some cases the conversion can impose overhead, and <span class="hljs-keyword">in</span> other cases, a simpler algorithm can be used for  specific argument types.<br><br>    <span class="hljs-keyword">Where</span> such issues are not significant, relying on conversions and providing <span class="hljs-keyword">only</span> the most general variant of a <span class="hljs-function"><span class="hljs-keyword">function</span></span> -- plus possibly a few critical variants -- contain the combinatorial explosion of variants that can arise from mixed-mode arithmetic.<br><span class="hljs-number">43.</span> <span class="hljs-keyword">Where</span> several variants of a <span class="hljs-function"><span class="hljs-keyword">function</span></span> or an operator <span class="hljs-keyword">exist</span>, the compiler must pick <span class="hljs-string">&quot;the right&quot;</span> variant based on the argument types and  the available (standard and user-defined) conversions.<br><br>    - Unless a best match exists, an expression is ambiguous and is an error.<br><span class="hljs-number">44.</span> An object constructed by explicit or <span class="hljs-keyword">implicit</span> <span class="hljs-keyword">use</span> of a constructor <span class="hljs-keyword">in</span> an expression (temporary objects; section <span class="hljs-number">10.3</span><span class="hljs-number">.4</span>) is automatic and will be destroyed at the first opportunity.<br><span class="hljs-number">45.</span> No <span class="hljs-keyword">implicit</span> user-defined conversions are applied to the left-hand side of a `.` (or a `-&gt;`). This is the <span class="hljs-keyword">case</span> even when `.` is <span class="hljs-keyword">implicit</span>.<br><br>    For example:<br><br>    - ```C++<br>      void g(<span class="hljs-keyword">complex</span> z)<br>      &#123;<br>          <span class="hljs-number">3</span>+z; // Ok: <span class="hljs-keyword">complex</span>(<span class="hljs-number">3</span>)+z<br>          <span class="hljs-number">3.</span>operator+=(z); // Error: <span class="hljs-number">3</span> is not a <span class="hljs-keyword">class</span> object (no user-defined conversion)<br>          <span class="hljs-number">3</span>+=z; // Error: <span class="hljs-number">3</span> is not a <span class="hljs-keyword">class</span> object (. is <span class="hljs-keyword">implicit</span>)<br>      &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Thus, you can approximate tthe notion that an operator requires an lvaue as its left-hand operand by making that operator a member.</p><ul><li>However, that is only an approximation because it is possible to access a temporary with a modifying operation, such as <code>operator+=()</code>:</li><li>```C++<br>complex x{4,5};<br>complex z{sqrt(x)+={1,2}}; // like tmp=sqrt(x), tmp+={1,2}<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">      - If we don&#x27;t want implicit conversions, we can use `explicit` to suppress them.<br><br>#### <span class="hljs-number">18.3</span>.<span class="hljs-number">4</span> Literals<br><br><span class="hljs-number">46</span>. We have literals of built-in types.<br><br>    - For example, `1,<span class="hljs-number">2</span>` <span class="hljs-literal">and</span> `12e3` are literals of type `double`.<br><br>    For `complex`, we can come pretty close to that by declaring constructors `constexpr`.<br><br><span class="hljs-title">    - For example:</span><br><br>      - ```C++<br>        class complex&#123;<br><span class="hljs-title">        public:</span><br><span class="hljs-title">            constexpr complex(double r=0, double i=0) :</span>re&#123;r&#125;, im&#123;i&#125; &#123;&#125;<br>            // ...<br>        &#125;<br></code></pre></td></tr></table></figure></li><li>Given that, a <code>complex</code> can be constructed from its constituent parts at compile time just like a literal from a built-in type. For example:</li><li>```C++<br>complex z1{1,2,12e3};<br>constexpr complex z2{1.2,12e3}; // guaranteed compile-time initialization<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">    - When constructors are simple <span class="hljs-keyword">and</span> inline, <span class="hljs-keyword">and</span> especially when they are `constexpr`, it <span class="hljs-keyword">is</span> quite reasonable to think of constructor invocations <span class="hljs-keyword">with</span> literal arguments <span class="hljs-keyword">as</span> literals.<br><span class="hljs-number">47.</span> It <span class="hljs-keyword">is</span> possible to go further <span class="hljs-keyword">and</span> introduce a user-defined literal (section <span class="hljs-number">19.2</span><span class="hljs-number">.6</span>) <span class="hljs-keyword">in</span> support of our `<span class="hljs-built_in">complex</span>` <span class="hljs-built_in">type</span>.<br><br>    In particular, we could define `i` to be a suffix meaning <span class="hljs-string">&quot;imaginary.&quot;</span><br><br>    - For example:<br><br>      - ```c++<br>        constexpr <span class="hljs-built_in">complex</span>&lt;double&gt; operato<span class="hljs-string">r&quot;&quot;</span>i(long double d) // imaginary literal<br>        &#123;<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>,d&#125;; // <span class="hljs-built_in">complex</span> <span class="hljs-keyword">is</span> a literal <span class="hljs-built_in">type</span> (user-defined)<br>        &#125;<br></code></pre></td></tr></table></figure></li><li>This would allow us to wirte:</li><li>```C++<br>complex z1{1.2+12e3i};complex f(double d)<br>{<pre><code class="hljs">auto x&#123;2.3i&#125;;return x+sqrt(d+12e3i)+12e3i;</code></pre>}<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fortran">- The user-defined literal gives us one advantage over what we get from `constexpr` constructors:<br><br>  - We can <span class="hljs-keyword">use</span> user-defined literals <span class="hljs-keyword">in</span> the middle of expressions <span class="hljs-keyword">where</span> `&#123;&#125;` notation can <span class="hljs-keyword">only</span> be used when qualified by a <span class="hljs-keyword">type</span> <span class="hljs-keyword">name</span>.<br>- The example above is roughly equivalent to:<br>- ```C++<br>  <span class="hljs-keyword">complex</span> z1&#123;<span class="hljs-number">1.2</span>,<span class="hljs-number">12e3</span>&#125;;<br>  <br>  <span class="hljs-keyword">complex</span> f(<span class="hljs-keyword">double</span> d)<br>  &#123;<br>      <span class="hljs-keyword">complex</span> x&#123;<span class="hljs-number">0</span>,<span class="hljs-number">2.3</span>&#125;;<br>      <span class="hljs-keyword">return</span> x+<span class="hljs-built_in">sqrt</span>(<span class="hljs-keyword">complex</span>&#123;d,<span class="hljs-number">12e3</span>&#125;)+<span class="hljs-keyword">complex</span>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">12e3</span>&#125;;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>I suspect that the choice of style of literal depends on your sense of aesthetics and the conventions of your field of work.</p><p>The standard-library <code>complex</code> uses <code>constexpr</code> constructors rather that a user-defined literal.</p></li></ol><h4 id="18-3-5-Accessor-Functions"><a href="#18-3-5-Accessor-Functions" class="headerlink" title="18.3.5 Accessor Functions"></a>18.3.5 Accessor Functions</h4><ol start="50"><li><p>So far, we have provided class <code>complex</code> with constructors and arithmetic operators only.</p><p>In particular, we often need to be able to examine and change the value of the real and imaginary parts:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">compelx</span>&#123;<br><span class="hljs-type">double</span> re, im;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">real</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> re;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">imag</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> im;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">real</span><span class="hljs-params">(<span class="hljs-type">double</span> r)</span> </span>&#123;re = r;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">imag</span><span class="hljs-params">(<span class="hljs-type">double</span> i)</span> </span>&#123;im = i;&#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>I don’t consider it a good idea to provide individual access to all members of a class; in general, it is not.</p><ul><li>For many types, individual access (sometimes referred to as <em>get-and-set functions</em>) is an invitation to disaster.</li><li>If we are not careful, individual access could compromise an invariant, and it typically complicates changes to the representation.</li><li>For example:<ul><li>consider the opportunities for misuse from providing getters and setters for every member of the <code>Date</code> from section 16.3 or (even more so) for the <code>String</code> from section 19.3.</li></ul></li></ul></li><li><p>However, for <code>complex</code>, <code>real()</code> and <code>imag()</code> are sematically significant:</p><ul><li><p>Some algorithms are most cleanly written if they can set the real and imaginary parts independently.</p></li><li><p>For example:</p><ul><li>Given <code>real()</code> and <code>imag()</code>, we can simplify simple, common, and useful operations, such as <code>==</code>, as nonmember functions (without compromising performance).</li><li>```c++<br>inline bool operator==(complex a, complex b)<br>{<pre><code class="hljs">return a.real()==b.real() &amp;&amp; a.imag()==b.imag();</code></pre>}<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>#### <span class="hljs-number">18.3</span><span class="hljs-number">.6</span> Helper Functions<br><br><span class="hljs-number">51.</span> If we put all the bits <span class="hljs-keyword">and</span> pieces together, the `complex` <span class="hljs-keyword">class</span> <span class="hljs-title class_">becomes</span>:<br><br>    ```C++<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span>&#123;<br>    <span class="hljs-type">double</span> re, im;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">complex</span><span class="hljs-params">(<span class="hljs-type">double</span> r=<span class="hljs-number">0</span>, <span class="hljs-type">double</span> i=<span class="hljs-number">0</span>)</span> : re(r), im(i) &#123;</span>&#125;<br>    <br>        <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">real</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> re;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">imag</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> im;&#125;<br>    <br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">real</span><span class="hljs-params">(<span class="hljs-type">double</span> r)</span> </span>&#123; re = r;&#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">imag</span><span class="hljs-params">(<span class="hljs-type">double</span> i)</span> </span>&#123; im = i;&#125;<br>    <br>        complex&amp; <span class="hljs-keyword">operator</span>+=(complex);<br>        complex&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">double</span>);<br>    <br>        <span class="hljs-comment">// -=, *= and /=</span><br>    &#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>In addition, we must provide a number of helper functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">complex <span class="hljs-keyword">operator</span>+(complex, compelx);<br>complex <span class="hljs-keyword">operator</span>+(complex, <span class="hljs-type">double</span>);<br>complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">double</span>, complex);<br><br><span class="hljs-comment">// binary -,*, and /</span><br><br>complex <span class="hljs-keyword">operator</span>-(complex); <span class="hljs-comment">// unary minus</span><br>complex <span class="hljs-keyword">operator</span>+(complex); <span class="hljs-comment">// unary plus</span><br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(compelx, complex);<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(complex, complex);<br><br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; complex&amp;); <span class="hljs-comment">//input</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp;, complex); <span class="hljs-comment">// output</span><br></code></pre></td></tr></table></figure><ul><li>Note that the members <code>real()</code> and <code>imag()</code> are essential for defining the comparisons.</li><li>The definitions of most of the following helper functions similarly rely on <code>real()</code> and <code>imag()</code>.</li></ul></li><li><p>We might provide functions to allow users to think in terms of polar coordinates:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">complex <span class="hljs-title">polar</span><span class="hljs-params">(<span class="hljs-type">double</span> rho, <span class="hljs-type">double</span> theta)</span></span>;<br><span class="hljs-function">complex <span class="hljs-title">conj</span><span class="hljs-params">(complex)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(complex)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">arg</span><span class="hljs-params">(complex)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">norm</span><span class="hljs-params">(complex)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">real</span><span class="hljs-params">(complex)</span></span>; <span class="hljs-comment">// for notational convenience</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">imag</span><span class="hljs-params">(complex)</span></span>; <span class="hljs-comment">// for notational convenience</span><br></code></pre></td></tr></table></figure></li><li><p>Finally, we must provide an appropriate set of standard mathematical functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">complex <span class="hljs-title">acos</span><span class="hljs-params">(complex)</span></span>;<br><span class="hljs-function">complex <span class="hljs-title">asin</span><span class="hljs-params">(complex)</span></span>;<br><span class="hljs-function">complex <span class="hljs-title">atan</span><span class="hljs-params">(complex)</span></span>;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><p>From a user’s point of view, the <code>complex</code> type presented here is almost identical to the <code>complex&lt;double&gt;</code> found in <code>&lt;complex&gt;</code> in the standard library.</p></li></ol><h3 id="18-4-Type-Conversion"><a href="#18-4-Type-Conversion" class="headerlink" title="18.4 Type Conversion"></a>18.4 Type Conversion</h3><ol start="55"><li><p>Type conversion can be accomplished by:</p><ul><li>A constructor taking a single argument</li><li>A conversion operator</li></ul><p>In either case the conversion can be</p><ul><li><code>explicit</code>;<ul><li>that is, the conversion is only performed in a direct initialization, i.e., as an initialier not using a <code>=</code>.</li></ul></li><li>Implicit;<ul><li>that is, it will be applied wherever it can be used unambiguously, e.g., as a function argument.</li></ul></li></ul></li></ol><h4 id="18-4-1-Conversion-Operators"><a href="#18-4-1-Conversion-Operators" class="headerlink" title="18.4.1 Conversion Operators"></a>18.4.1 Conversion Operators</h4><ol start="56"><li><p>Using a constructor taking a single argument to specify type conversion is convenient but has implications that can be undesirable.</p><p>Also, a constructor cannot specify</p><ul><li>an implicit conversion from a user-defined type to a built-in type (because the built-in types are not classes), or</li><li>a conversion from a new class to a previously defined class (without modifying the declaration for the old class).</li></ul><p>These problems can be handled by defining a <em><strong>conversion operator</strong></em> for the source type.</p><ul><li><p>A member function <code>X::operator T()</code>, where <code>T</code> is a type name, defines a conversion from <code>X</code> to <code>T</code>.</p><ul><li><p>For example, we could define a 6-bit non-negative integer, <code>Tingy</code>, that can mix freely with integers in arithmetic operations. <code>Tiny</code> throws <code>Bad_range</code> if its operations overflow or underflow:</p></li><li><p>```C++<br>class Tiny{</p><pre><code class="hljs">char v;void assign(int i) &#123; if(i&amp;~077) throw Bad_range(); v=i;&#125;</code></pre><p>public:</p><pre><code class="hljs">class Bad_range();Tiny(int i) &#123; assign(i);&#125;Tiny&amp; operator=(int i) &#123; assign(i); return *this;&#125;operator int() const &#123; return v;&#125; // conversion to int function</code></pre><p>};</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><br>  - The <span class="hljs-built_in">range</span> is checked whenever a `<span class="hljs-built_in">Tiny</span>` is initialized by an `<span class="hljs-built_in">int</span>` and whenever an `<span class="hljs-built_in">int</span>` is assigned to one.<br>  - No <span class="hljs-built_in">range</span> check is needed when we copy a `<span class="hljs-built_in">Tiny</span>`, so the <span class="hljs-keyword">default</span> copy constructor and assignment are just right.<br>- To enable the usual <span class="hljs-keyword">integer</span> operations on `<span class="hljs-built_in">Tiny</span>` variables, we define the <span class="hljs-keyword">implicit</span> conversion from `<span class="hljs-built_in">Tiny</span>` to `<span class="hljs-built_in">int</span>`, `<span class="hljs-built_in">Tiny</span>::operator <span class="hljs-built_in">int</span>()`.<br>- Note that the <span class="hljs-keyword">type</span> being converted to is part of the <span class="hljs-keyword">name</span> of the operator and cannot be repeated as the <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span> of the conversion <span class="hljs-function"><span class="hljs-keyword">function</span></span>:<br><br>  - ```C++<br>    <span class="hljs-built_in">Tiny</span>::operator <span class="hljs-built_in">int</span>() const &#123; <span class="hljs-keyword">return</span> v;&#125; // right<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">Tiny</span>::operator <span class="hljs-built_in">int</span>() const &#123; <span class="hljs-keyword">return</span> v;&#125; // error<br></code></pre></td></tr></table></figure><ul><li>In this respect also, a conversion operator resembles a constructor. (constructor also doesn’t have a return type)</li></ul></li><li><p>Whenever a <code>Tiny</code> appears where an <code>int</code> is needed, the appropriate <code>int</code> is used. For example:</p><ul><li>```C++<br>int main()<br>{<pre><code class="hljs">Tiny c1 = 2;Tiny c2 = 62;Tiny c3 = c2 - c1; // c3 = 60Tiny c4 = c3; // no range check (not necessary)int i = c1 + c2; // i = 64c1 = c1+c2; // range error: c1 can&#39;t be 64 (6-bit non-negative integer)i = c3-64; // i = -4c2 = c3-64; // range error: c2 can&#39;t be -4c3 = c4; // no range check (not necessary)</code></pre>}<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-number">57</span>. Conversion functions appear <span class="hljs-keyword">to</span> be particularly useful <span class="hljs-keyword">for</span> handling data structures <span class="hljs-keyword">when</span> reading (implemented <span class="hljs-keyword">by</span> a conversion <span class="hljs-keyword">operator</span>) <span class="hljs-built_in">is</span> trivial, <span class="hljs-keyword">while</span> assignment <span class="hljs-built_in">and</span> initialization are distinctly less trivial.<br><span class="hljs-number">58</span>. The `istream` <span class="hljs-built_in">and</span> `ostream` types rely <span class="hljs-keyword">on</span> a conversion <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> enable statements such <span class="hljs-keyword">as</span>:<br><br>    ```C++<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;x)<br>        cout&lt;&lt;x;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>The input operation <code>cin&gt;&gt;x</code> returns an <code>istream&amp;</code>. That value is implicitly converted to a value indicating the state of <code>cin</code>. This value can then be tested by the <code>while</code>.</p></li><li><p>However, it is typically <em><strong>not</strong></em> a good idea to define an implicit conversion from one type to another in such a way that information is lost in the conversion.</p></li></ul></li><li><p>In general, it is wise to be sparing in the introduction of conversion operators.</p><ul><li>When used in excess, they lead to ambiguities. Such ambiguities are caught by the compiler, but they can be a nuisance to resolve.</li><li>Probably the best idea is initially to do conversions by named functions, such as <code>X::make_int()</code>.<ul><li>If such a function becomes popular enough to make explicit use inelegant, it can be replaced by a conversion operator <code>X::operator int()</code>.</li></ul></li></ul></li><li><p>If both user-defined conversions and user-defined operators are defined, it is possible to get ambiguities between the user-defined operators and the built-in operators. For example</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> <span class="hljs-keyword">operator</span>+(Tiny, Tiny);<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Tiny t, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    t+i; <span class="hljs-comment">// Error, ambiguous: &quot;operator+(t,Tiny(i))&quot; or &quot;int(t)+i&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="18-4-2-explicit-Conversion-Operators"><a href="#18-4-2-explicit-Conversion-Operators" class="headerlink" title="18.4.2 explicit Conversion Operators"></a>18.4.2 <code>explicit</code> Conversion Operators</h4><ol start="61"><li><p>Conversion operators tend to be defined so that they can be used everywhere.</p><p>However, it is possible to declare a conversion operator <code>explicit</code> and have it apply only for direct initialization, where an equivalent <code>explicit</code> constructor would have beed used.</p><ul><li><p>For example, the standard-library <code>unique_ptr</code> has an explicit conversion to <code>bool</code>:</p></li><li><p>```C++<br>template&lt;typename T, typename D = default_delete<T>&gt;<br>class unique_ptr{<br>public:</p><pre><code class="hljs">// ...explicit operator bool() const noexcept; // dose *this hold a pointer(that is not nullptr)?</code></pre><p>};</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">- The reason to declare <span class="hljs-keyword">this</span> conversion <span class="hljs-keyword">operator</span> `<span class="hljs-keyword">explicit</span>` is to avoid its use in surprising contexts. Consider:<br><br>  - ```C++<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(unique_ptr&lt;Record&gt; p, unique_ptr&lt;<span class="hljs-type">int</span>&gt; q)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!p) <span class="hljs-comment">// Ok: We want this use</span><br>            <span class="hljs-keyword">throw</span> Invalid_unique_ptr&#123;&#125;;<br>    <br>        <span class="hljs-type">bool</span> b = p; <span class="hljs-comment">// error; suspicious use</span><br>        <span class="hljs-type">int</span> x = p+q; <span class="hljs-comment">// error; we definitly don&#x27;t want this</span><br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><p>Had <code>unique_ptr</code>‘s conversion to bool not been <code>explicit</code>, the last two definitions would have compiled.</p><ul><li>The value of <code>b</code> would have become <code>true</code> and the value of <code>x</code> would have become <code>1</code> or <code>2</code> (depending on whether <code>q</code> was valid or not).</li></ul></li></ul></li></ul></li></ol><h4 id="18-4-3-Ambiguities"><a href="#18-4-3-Ambiguities" class="headerlink" title="18.4.3 Ambiguities"></a>18.4.3 Ambiguities</h4><ol start="62"><li><p>An assignment of a value of type <code>V</code> to an object of class <code>X</code> is legal if there is an assignment operator <code>X::operator=(Z)</code> so that <code>v</code> is <code>Z</code> or there is a unique conversion of <code>V</code> to <code>Z</code>.</p><ul><li>Initialization is treated equivalently.</li></ul></li><li><p>In some cases, a value if the desired type can be constructed by repeated use of constructors or conversion operators.</p><ul><li>This must be handled by explicit conversions; only one level of user-defined implicit conversion is legal.</li></ul><p>In some cases, a value of the desired type can be constructed in more than one way; such cases are illegal. For example:</p><ul><li>```C++<br>class X{ /<em>…</em>/ X(int); X(const char*);};<br>class Y{ /<em>…</em>/ Y(int);};<br>class Z{/<em>…</em>/ Z(int);};X f(X);<br>Y f(Y);Z g(Z);void k1()<br>{<pre><code class="hljs">f(1); // Error: ambiguous f(X(1)) or f(Y(1))?f(X(1)); // OKf(Y(1)); // OKg(&quot;Mack&quot;); // Error:two user-defined conversions needed; g(Z&#123;X&#123;&quot;Mack&quot;&#125;&#125;) not triedg(X&#123;&quot;Doc&quot;&#125;); // OK: g(Z&#123;X&#123;&quot;Doc&quot;&#125;&#125;)g(Z&#123;&quot;Suzy&quot;&#125;); // OK: g(Z&#123;X&#123;&quot;Suzy&quot;&#125;&#125;)</code></pre>}<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">64.</span> User-<span class="hljs-function">defined conversions are considered only <span class="hljs-keyword">if</span> a call cannot be resolved without <span class="hljs-title">them</span> (<span class="hljs-params">i.e., <span class="hljs-keyword">using</span> only built-<span class="hljs-keyword">in</span> conversions</span>). For example:</span><br><span class="hljs-function"></span><br><span class="hljs-function">    - ```C++</span><br><span class="hljs-function">      <span class="hljs-keyword">class</span> XX</span>&#123;<span class="hljs-comment">/*...*/</span> XX(<span class="hljs-built_in">int</span>);&#125;;<br>      <br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">h</span>(<span class="hljs-params"><span class="hljs-built_in">double</span></span>)</span>;<br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">h</span>(<span class="hljs-params">XX</span>)</span>;<br>      <br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">k2</span>()</span><br>      &#123;<br>          h(<span class="hljs-number">1</span>); <span class="hljs-comment">// h(double&#123;1&#125;) or h(XX&#123;1&#125;)? h(double&#123;1&#125;)!</span><br>      &#125;<br></code></pre></td></tr></table></figure></li><li>The call <code>h(1)</code> means <code>h(double(1))</code> because that alternative uses only a standard conversion rather than a user-defined conversion.</li></ul></li><li><p>The rules for conversion are neither the simplest to implement, nor the simplest to document, nor the most general that could be devised.</p><p>They are, however, considerably safer, and the resulting resolutions are typically less surprising than alternatives.</p><p>It is far easier to manually resolve an ambiguity than to find an error caused by an unsuspected conversion.</p></li><li><p>The insistence on strict bottom-up analysis implies that the return type is not used in overloading function. For example:</p><ul><li>```C++<br>class Quad{<br>public:<pre><code class="hljs">Quad(double);// ...</code></pre>};Quad operator+(Quad,Quad); // the return type of + is Quadvoid f(double a1, double a2)<br>{<pre><code class="hljs">Quad r1 = a1+a2; // double-precision floating-point add (the return type Quad of + is not used.)Quad r2 = Quad&#123;a1&#125;+a2; // force quad arithmetic</code></pre>}<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp">- The reason <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> design choice is partly that strict bottom-up analysis is more comprehensible <span class="hljs-keyword">and</span> partly that it is <span class="hljs-keyword">not</span> considered the compiler<span class="hljs-number">&#x27;</span>s job to decide which precision the programmer might want <span class="hljs-keyword">for</span> the addition.<br><br>Once the types of both sides of an initialization <span class="hljs-keyword">or</span> assignment have been determined, both types are used to resolve the initialization <span class="hljs-keyword">and</span> assignment. For example:<br><br>- ```C++<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Real</span>&#123;<br>  <span class="hljs-keyword">public</span>:<br>      <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">double</span><span class="hljs-params">()</span></span>;<br>      <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">int</span><span class="hljs-params">()</span></span>;<br>      <span class="hljs-comment">// ...</span><br>  &#125;;<br>  <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(Real a)</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-type">double</span> d = a; <span class="hljs-comment">// d = a.double();</span><br>      <span class="hljs-type">int</span> i = a; <span class="hljs-comment">// i = a.int();</span><br>  <br>      d = a; <span class="hljs-comment">// d = a.double();</span><br>      i = a; <span class="hljs-comment">// i = a.int();</span><br>  &#125;<br></code></pre></td></tr></table></figure></li><li>In these cases, the type analysis is still bottom-up, with only a single operator and its argument types considered at any one time.</li></ul></li></ol><h3 id="18-5-Advice"><a href="#18-5-Advice" class="headerlink" title="18.5 Advice"></a>18.5 Advice</h3><ol><li>Define operators primarily to mimic conventional usage.</li><li>Redefine or prohibit copying if the default is not appropriate for a type.</li><li>For large operands, use <code>const</code> reference argument type.</li><li>For large results, use a move constructor.</li><li>Prefer member functions over nonmembers for operations that need access to the representation.</li><li>Prefer nonmember functions over members for operations that do not need access to the represention.</li><li>Use namespaces to associate helper functions with “their” class.</li><li>Use nonmember functions for symmetric operators.</li><li>Use member functions to express operators that require an lvalue as their left-hand operand.</li><li>Use user-defined literals to mimic conventional notation.</li><li>Provide “<code>set()</code> and <code>get()</code> functions” for a data member only if the fundamental semantics of a class require them.</li><li>Be cautious about introducing implicit conversions.</li><li>Avoid value-destroying (“narrowing”) conversions.</li><li>Do not define the same conversion as both a constructor and a conversion operator. (60)</li></ol><h2 id="Chapter-19-Special-Operators"><a href="#Chapter-19-Special-Operators" class="headerlink" title="Chapter 19. Special Operators"></a>Chapter 19. Special Operators</h2><ul><li>Introduction</li><li>Special Operators<ul><li>Subscripting</li><li>Function Call</li><li>Dereferencing</li><li>Increment and Decrement</li><li>Allocation and Deallocation</li><li>User-Defined Literals</li></ul></li><li>A String Class<ul><li>Essential Operations</li><li>Access to Charactors</li><li>Representation</li><li>Member Functions</li><li>Helper Functions</li><li>Using Our String</li></ul></li><li>Friends<ul><li>Finding Friends</li><li>Friends and Members</li></ul></li><li>Advice</li></ul><h3 id="19-1-Introduction"><a href="#19-1-Introduction" class="headerlink" title="19.1 Introduction"></a>19.1 Introduction</h3><ol><li>Overloading is not just arithmetic and logical operations.<ul><li>In fact, operators are crucial in the design of:<ul><li>containers (e.g., <code>vector</code> and <code>map</code>)</li><li>“smart pointer”(e.g., <code>unique_ptr</code> and <code>shared_ptr</code>)</li><li>iterators</li><li>other classes concerned with resource management.</li></ul></li></ul></li></ol><h3 id="19-2-Special-Operators"><a href="#19-2-Special-Operators" class="headerlink" title="19.2 Special Operators"></a>19.2 Special Operators</h3><ol start="2"><li>Special operators <code>[]</code>, <code>()</code>, <code>-&gt;</code>, <code>++</code>, <code>--</code>, <code>new</code>, <code>delete</code> are special only in that the mapping from their use in the code to a programmer’s definition differs slightly from that used for conventional unary and binary operators, such as <code>+</code>, <code>&lt;</code>, and <code>~</code>.<ul><li>The <code>[]</code>(subscript) and <code>()</code>(call) operators are among the most useful user-defined operators.</li></ul></li></ol><h4 id="19-2-1-Subscripting"><a href="#19-2-1-Subscripting" class="headerlink" title="19.2.1 Subscripting"></a>19.2.1 Subscripting</h4><ol start="3"><li><p>An <code>operator[]</code> function can be used to give subscripts a meaning for class objects.</p><p>The second argument (the subscript) of an <code>operator[]</code> function may be of any type.</p><p>This makes it possible to define <code>vector</code>s, associative arrats, etc.</p><ul><li><p>As an example, we can define a simple associative array type like this:</p></li><li><p>```C++<br>struct Assoc{</p><pre><code class="hljs">vector&lt;pair&lt;string,int&gt;&gt; vec; // vector of &#123;name,value&#125; pairsconst int&amp; operator[](const string &amp;) const; // return reference to const elementint&amp; operator[](const string&amp;); // return reference to element</code></pre><p>};</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>  - An `Assoc` keeps a vector of `std::pair`s.<br>- The implementation uses the same trivial <span class="hljs-keyword">and</span> inefficient search method.<br>- ```C++<br>  <span class="hljs-type">int</span>&amp; Assoc::<span class="hljs-keyword">operator</span>[](<span class="hljs-type">const</span> string&amp; s)<br>      <span class="hljs-comment">// search for s; return a reference to it value if found</span><br>      <span class="hljs-comment">// otherwise, make a new pair &#123;s,0&#125; and return a reference to its value</span><br>  &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : vec)<br>          <span class="hljs-keyword">if</span>(s == x.first) <span class="hljs-keyword">return</span> x.second;<br>  <br>      vec.<span class="hljs-built_in">push_back</span>(&#123;s,<span class="hljs-number">0</span>&#125;); <span class="hljs-comment">// initial value:0</span><br>  <br>      <span class="hljs-keyword">return</span> vec.<span class="hljs-built_in">back</span>().second; <span class="hljs-comment">// return last element</span><br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>We can use <code>Assoc</code> like this:</p></li><li><p>```C++<br>int main() // count the occurrences of each word on input<br>{</p><pre><code class="hljs">Assoc values;string buf;while(cin&gt;&gt;buf) ++values[buf];for(auto x : values.vec)    cout &lt;&lt; &quot;&#123;&quot; &lt;&lt; x.first &lt;&lt; &quot;,&quot; &lt;&lt; x.second &lt;&lt; &quot;&#125;\n&quot;;</code></pre><p>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp">   - The standard-library `map` <span class="hljs-keyword">and</span> `unordered_map` are further developments of the idea of an associative array <span class="hljs-keyword">with</span> less naive implementations.<br><span class="hljs-number">4.</span> An `<span class="hljs-keyword">operator</span>[]()` must be a non-<span class="hljs-keyword">static</span> member function.<br><br><span class="hljs-meta">#### 19.2.2 Function Call</span><br><br><span class="hljs-number">5.</span> Function call, that <span class="hljs-keyword">is</span> the notation ***expression(expression-list)***, can be interpreted <span class="hljs-keyword">as</span> a binary operation <span class="hljs-keyword">with</span> the ***expression*** <span class="hljs-keyword">as</span> the left-hand operand <span class="hljs-keyword">and</span> the ***expression-list*** <span class="hljs-keyword">as</span> the right-hand operand.<br><span class="hljs-number">6.</span> The call <span class="hljs-keyword">operator</span>, `()`, can be overloaded <span class="hljs-keyword">in</span> the same way <span class="hljs-keyword">as</span> other operators can. For example:<br><br>   ```C++<br>   <span class="hljs-keyword">struct</span> Action&#123;<br>       <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">operator</span>()(<span class="hljs-params"><span class="hljs-built_in">int</span></span>)</span>;<br>       <span class="hljs-function">pair&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">operator</span>()(<span class="hljs-params"><span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span></span>)</span>;<br>       <span class="hljs-function"><span class="hljs-built_in">double</span> <span class="hljs-title">operator</span>()(<span class="hljs-params"><span class="hljs-built_in">double</span></span>)</span>;<br>       <span class="hljs-comment">// ...</span><br>   &#125;;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span>(<span class="hljs-params">Action act</span>)</span><br>   &#123;<br>       <span class="hljs-built_in">int</span> x = act(<span class="hljs-number">2</span>);<br>       auto y = act(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>       <span class="hljs-built_in">double</span> z = act(<span class="hljs-number">2.3</span>)<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>An argument list for an <code>operator()()</code> is evaluated and checked according to the usual argument-passing-rules.</p></li></ul><p>Overloading the function call operator seems to be useful primarily for defining types that have only a single operation and for types for which one operation is predominant.</p><p>The <em><strong>call operator</strong></em> is also known as the <em><strong>application operator</strong></em>.</p></li><li><p>The most obvious and also the most important, use of the <code>()</code> operator is to provide the usual function call syntax for objects that in some way behave like functions.</p><p>An object that acts like a function is often call a <em><strong>function-liker object</strong></em> or simply a <em><strong>function object</strong></em>.</p><ul><li><p>Such function objects allow us to write code that takes nontrivial operations as parameters.</p></li><li><p>In many cases, it is essential that function objects can hold data needed to perform their operation.</p></li><li><p>For example, we can define a class with an <code>operator()()</code> that adds a stored value to its argument:</p><ul><li><p>```C++<br>class Add{</p><pre><code class="hljs">complex val;</code></pre><p>public:</p><pre><code class="hljs">Add(complex c) :val(c) &#123;&#125; // save a valueAdd(double r, double i): val&#123;&#123;r,i&#125;&#125; &#123;&#125;void operator()(complex&amp; c) const &#123;c += val;&#125; // add a value to argument</code></pre><p>};</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">- An <span class="hljs-keyword">object</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">class</span> `Add` is initialized <span class="hljs-keyword">with</span> a complex number, <span class="hljs-keyword">and</span> <span class="hljs-keyword">when</span> invoked using `<span class="hljs-literal">()</span>`, it  adds that number <span class="hljs-keyword">to</span> its argument. For example:<br>- ```C++<br>  void h(vector&lt;complex&gt;&amp; vec, <span class="hljs-built_in">list</span>&lt;complex&gt;&amp; lst, complex z)<br>  &#123;<br>      <span class="hljs-keyword">for</span><span class="hljs-constructor">_each(<span class="hljs-params">vec</span>.<span class="hljs-params">begin</span>()</span>,vec.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>,Add&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;);<br>      <span class="hljs-keyword">for</span><span class="hljs-constructor">_each(<span class="hljs-params">lst</span>.<span class="hljs-params">begin</span>()</span>,lst.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>,Add&#123;z&#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><p>This will add <code>complex&#123;2,3&#125;</code> to every element of the <code>vector</code> and <code>z</code> to every element of the <code>list</code>.</p><ul><li>Note that Add{z} constructs an object that is used repeatedly by <code>for_each()</code>:  <code>Add&#123;z&#125;</code>‘s <code>operator()()</code> is called for each element of the sequence.</li></ul></li><li><p>This all works because <code>for_each</code> is a template that applies <code>()</code> to its third argument without caring exactly what that third argument really is:</p><ul><li>```C++<br>template&lt;typename Iter, typename Fct&gt;<br>Fct for_each(Iter b, Iter e, Fct f)<br>{<pre><code class="hljs">while(b != e) f(*b++);return f;</code></pre>}<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima">         - At <span class="hljs-built_in">first</span> glance, this technique may look esoteric, but it <span class="hljs-built_in">is</span> simple, efficient, <span class="hljs-keyword">and</span> extremely useful.<br><span class="hljs-number">8</span>. Note that a <span class="hljs-built_in">lambda</span> expression (section <span class="hljs-number">3.4</span><span class="hljs-number">.3</span>, section <span class="hljs-number">11.4</span>) <span class="hljs-built_in">is</span> basically a syntax <span class="hljs-keyword">for</span> defining a function object. For <span class="hljs-built_in">example</span>, we  could have written:<br><br>   ```C++<br>   void h2(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">complex</span>&gt;&amp; vec, list&lt;<span class="hljs-built_in">complex</span>&gt;&amp; lst, <span class="hljs-built_in">complex</span> z)<br>   &#123;<br>       for_each(vec.begin(),vec.end(),[](<span class="hljs-built_in">complex</span>&amp; a)&#123; a+=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;&#125;);<br>       for_each(lst.begin(),lst.end(),[](<span class="hljs-built_in">complex</span>&amp; a)&#123; a+=z;&#125;);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>In this case, each of the lambda expressions generates the equivalent of the function object <code>Add</code>.</p></li></ul></li><li><p>Other popular uses of <code>operator()()</code> are as a substring operator and as a subscripting operator for multidimensional arrays.</p></li><li><p>An <code>operator()()</code> must be a non-<code>static</code> member function.</p></li><li><p>Function call operators are often templates.</p></li></ol><h4 id="19-2-3-Dereferencing"><a href="#19-2-3-Dereferencing" class="headerlink" title="19.2.3 Dereferencing"></a>19.2.3 Dereferencing</h4><ol start="12"><li><p>The dereferencing operator, <code>-&gt;</code> (also known as the <em><strong>arrow</strong></em> operator), can be defined as a unary postfix operator. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ptr</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    X* <span class="hljs-keyword">operator</span>-&gt;();<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>Objects of class <code>Ptr</code> can be used to access members of class <code>X</code> in a very similar manner to the way pointers are used. For example:</li><li>```C++<br>void f(Ptr p)<br>{<pre><code class="hljs">p-&gt;m = 7; // (p.operator-&gt;())-&gt;m = 7</code></pre>}<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xl"><br>- T<span class="hljs-function"><span class="hljs-title">he</span> transformation of the object `p` into the pointer `p.operator-&gt;</span>()` does <span class="hljs-built_in">not</span> depend on the member `m` pointed to.<br>- T<span class="hljs-function"><span class="hljs-title">hat</span> <span class="hljs-keyword">is</span> the sense <span class="hljs-built_in">in</span> which `operator-&gt;</span>()` <span class="hljs-keyword">is</span> a unary <span class="hljs-keyword">postfix</span> operator.<br>- H<span class="hljs-function"><span class="hljs-title">owever</span>, there <span class="hljs-keyword">is</span> no new syntax introduced, so a member <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> still required after the `-&gt;</span>`. For example:<br><br>  - ```C++<br>    void g(Ptr p)<br>    &#123;<br>        X* <span class="hljs-function"><span class="hljs-title">q1</span> = p-&gt;</span>; <span class="hljs-comment">// sytax error</span><br>        X* <span class="hljs-function"><span class="hljs-title">q2</span> = p.operator-&gt;</span>(); <span class="hljs-comment">// OK</span><br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Overloading <code>-&gt;</code> is primarily useful for creating “smart pointers,” that is, objects that act like pointers and in addition perform some action whenever an object is accessed through them.</p><ul><li>The standard-library “smart pointers” <code>unique_ptr</code> and <code>shared_ptr</code> provide operator <code>-&gt;</code>.</li></ul></li><li><p>As an example, we could define a class <code>Disk_ptr</code> for accessing objects stored on disk.</p><ul><li><code>Disk_ptr</code>‘s constructor takes a name that can be used to find the object on disk,</li><li><code>Disk_ptr::operator-&gt;()</code> brings the object into main memory when accessed through its <code>Disk_ptr</code>,</li><li>and <code>Disk_ptr</code>‘s destructor eventually writes the updated object back out to desk.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Disk_ptr</span>&#123;<br>    string identifier;<br>    T* in_core_address;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Disk_ptr</span>(<span class="hljs-type">const</span> string&amp; s) : identifier&#123;s&#125;, in_core_address&#123;<span class="hljs-literal">nullptr</span>&#125; &#123;&#125;<br>    ~<span class="hljs-built_in">Disk_ptr</span>()&#123; <span class="hljs-built_in">write_to_disk</span>(in_core_address,identifier);&#125;<br><br>    T* <span class="hljs-keyword">operator</span>-&gt;()<br>    &#123;<br>        <span class="hljs-keyword">if</span>(in_core_address == <span class="hljs-literal">nullptr</span>)<br>            in_core_address = <span class="hljs-built_in">read_from_disk</span>(identitier);<br>        <span class="hljs-keyword">return</span> in_core_address;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>Disk_ptr</code> might be used like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rec</span>&#123;<br>    string name;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br>    Disk_ptr&lt;Rec&gt; p&#123;s&#125;; <span class="hljs-comment">// get Disk_ptr for s</span><br><br>    p-&gt;name = <span class="hljs-string">&quot;Roscoe&quot;</span>; <span class="hljs-comment">// update s; if necessary, first retrieve from disk</span><br>    <span class="hljs-comment">// ...</span><br>&#125; <span class="hljs-comment">// p&#x27;s destructor writes back to disk</span><br></code></pre></td></tr></table></figure><p>Naturally, a realistic program would contain error-handling code and use a less naive way of interacting with the disk.</p></li><li><p>For ordinary pointers, use of <code>-&gt;</code> is synonymous with some uses of unary <code>*</code> and <code>[]</code>.</p><p>Given a class <code>Y</code> for which <code>-&gt;</code>, <code>*</code> and <code>[]</code> have their default meaning and a <code>Y*</code> called <code>p</code>, then:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">p-&gt;m == (*p).m; <span class="hljs-comment">// is true</span><br>(*p).m == p[<span class="hljs-number">0</span>].m; <span class="hljs-comment">// is true</span><br>p-&gt;m == p[<span class="hljs-number">0</span>].m; <span class="hljs-comment">// is true</span><br></code></pre></td></tr></table></figure><ul><li>As usual, no such guarantee is provided for user-defined operators.</li></ul><p>The equivalence can be provided where desired:</p><ul><li><p>```C++<br>template<typename T><br>class Ptr{</p><pre><code class="hljs">Y* p;</code></pre><p>public:</p><pre><code class="hljs">Y* operator-&gt;() &#123; return p;&#125; // dereference to access memberY&amp; operator*() &#123; return *p;&#125; // dereference to access whole objectY&amp; operator[](int i) &#123; return p[i];&#125; // dereference to access element</code></pre><p>};</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>    If you provide more than one of these operators, it might be wise to provide the equivalence, just as it is wise to ensure that `++x` <span class="hljs-literal">and</span> `x+=<span class="hljs-number">1</span>` have the same effect as `x=x+<span class="hljs-number">1</span>` for a simple variable `x` of some class `X` is `++`, `+=`, `=`, <span class="hljs-literal">and</span> `+` are provided.<br><span class="hljs-number">16</span>. The overloading of `-&gt;` is important to a class of interesting programs <span class="hljs-literal">and</span> is <span class="hljs-literal">not</span> just a minor curiosity.<br><br>    The reason is that ***indirection*** is a key concept <span class="hljs-literal">and</span> that overloading `-&gt;` provides a clean, direct, <span class="hljs-literal">and</span> efficient way of representing indirection in a program.<br><br>    - Iterators (Chapter <span class="hljs-number">33</span>) provide an important example of this.<br><span class="hljs-number">17</span>. Operator `-&gt;` must be a non-`static` member function.<br><br>    If used, it <span class="hljs-keyword">return</span> type must be a pointer <span class="hljs-literal">or</span> an object of a class to which you can apply `-&gt;`.<br><br>    The body of a template class member function is only checked if the function is used (section <span class="hljs-number">26.2</span>.<span class="hljs-number">1</span>), so we can define `operator-&gt;()` without worrying about types, such as `Ptr&lt;int&gt;`, for which `-&gt;` does <span class="hljs-literal">not</span> make sense.<br><span class="hljs-number">18</span>. Despite the similarity between `-&gt;` <span class="hljs-literal">and</span> `.` (dot), there is no way of overloading operator `.` (dot).<br><br>#### <span class="hljs-number">19.2</span>.<span class="hljs-number">4</span> Increment <span class="hljs-literal">and</span> Decrement<br><br><span class="hljs-number">19</span>. Once people invent <span class="hljs-string">&quot;smart pointers,&quot;</span> they often decide to provide the increment operator `++` <span class="hljs-literal">and</span> the decrement operator   `--` to mirror these operators&#x27; use for built-in types.<br><br>    - This is especially obvious <span class="hljs-literal">and</span> necessary where the aim is to replace an ordinary pointer type with a <span class="hljs-string">&quot;smart pointer&quot;</span> type that has the same semantics, except that it adds a bit of run-time error checking.<br><span class="hljs-title">    - For example, consider a troublesome traditional program:</span><br><br>      - ```C++<br>        void f1(X a) // traditional use<br>        &#123;<br>            X v[<span class="hljs-number">200</span>]<span class="hljs-comment">;</span><br>            X* p = &amp;v[<span class="hljs-number">0</span>]<span class="hljs-comment">;</span><br>            p--<span class="hljs-comment">;</span><br>            *p = a<span class="hljs-comment">; // oops: p out of range, uncaught</span><br>            ++p<span class="hljs-comment">;</span><br>            ++p = a<span class="hljs-comment">; // OK</span><br>        &#125;<br></code></pre></td></tr></table></figure><ul><li><p>Here, we might want to replace the <code>X*</code> with an object of a class <code>Ptr&lt;X&gt;</code> that can be dereferenced only if it actually points to an <code>X</code>.</p><p>We would also like to ensure that <code>p</code> can be incremented and decremented only if it points to an object with an array and  the increment and decrement operations yield an object within that array.</p></li><li><p>That is, we would like something like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(Ptr&lt;X&gt; a)</span> <span class="hljs-comment">// checked</span></span><br><span class="hljs-function"></span>&#123;<br>    X v[<span class="hljs-number">200</span>];<br>    <span class="hljs-function">Ptr&lt;X&gt; <span class="hljs-title">p</span><span class="hljs-params">(&amp;v[<span class="hljs-number">0</span>],v)</span></span>;<br>    p--;<br>    *p = a; <span class="hljs-comment">// run-time error: p out of range</span><br>    ++p;<br>    *p = a; <span class="hljs-comment">// OK</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>The increment and decrement operators are unique among C++ operators in that they can be used as both prefix and postfix operators.</p><p>Consequently, we must define prefix and postfix increment and decrement for <code>Ptr&lt;T&gt;</code>. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ptr</span>&#123;<br>    T* ptr;<br>    T* array;<br>    <span class="hljs-type">int</span> sz;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span> N&gt;</span><br><span class="hljs-function">    <span class="hljs-title">Ptr</span><span class="hljs-params">(T* p, T(&amp;a)[N])</span></span>; <span class="hljs-comment">// bind to array a, sz==N, initial value p</span><br>    <span class="hljs-built_in">Ptr</span>(T* p, T* a, <span class="hljs-type">int</span> s); <span class="hljs-comment">// bind to array a of size s, initial value p</span><br>    <span class="hljs-built_in">Ptr</span>(T* p); <span class="hljs-comment">// bind to single objectm, sz==0, initial value p</span><br><br>    Ptr&amp; <span class="hljs-keyword">operator</span>++(); <span class="hljs-comment">// prefix</span><br>    Ptr <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>); <span class="hljs-comment">// postfix</span><br><br>    Ptr&amp; <span class="hljs-keyword">operator</span>--(); <span class="hljs-comment">// prefix</span><br>    Ptr <span class="hljs-keyword">operator</span>--(<span class="hljs-type">int</span>); <span class="hljs-comment">// postfix</span><br><br>    T&amp; <span class="hljs-keyword">operator</span>*(); <span class="hljs-comment">// prefix</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>The <code>int</code> argument is used to indicate that the function is to be invoked for postfix application of <code>++</code>.<ul><li>This <code>int</code> is never used; the argument is simply a dummy used to distinguish between prefix and postfix application.</li><li>The way to remember which version of an <code>operator++</code> is prefix is to note that the version without the dummy argument is prefix, exactly like all the other unary arithmetic and logical operators.</li><li>The dummy argument is used only for the “odd” postfix <code>++</code> and <code>--</code>.</li></ul></li></ul></li></ul></li></ul></li><li><p>Consider ommiting postfix <code>++</code> and <code>--</code> in a design. They are not only odd syntactically, they tend to be marginally harder to implement than the prefix versions, less efficient, and less frequently used.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>Ptr&amp; Ptr&lt;T&gt;::<span class="hljs-keyword">operator</span>++() <span class="hljs-comment">// return current object after incrementing</span><br>&#123;<br>    <span class="hljs-comment">// ... check that ptr+1 can be pointed to ...</span><br>    <span class="hljs-keyword">return</span> *++ptr;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>Ptr Ptr&lt;T&gt;::<span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) <span class="hljs-comment">// increment and return a Ptr with the old value</span><br>&#123;<br>    <span class="hljs-comment">// ... check that ptr+1 can be pointed to ...</span><br>    Ptr&lt;T&gt; old&#123;ptr,array,sz&#125;;<br>    ++ptr;<br>    <span class="hljs-keyword">return</span> old;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>The pre-increment operator can return a reference to its object.</li><li>The post-increment operator must make a new object to return.</li></ul></li><li><p>Using <code>Ptr</code>, the example is equivalent to:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f3</span><span class="hljs-params">(T a)</span> <span class="hljs-comment">// checked</span></span><br><span class="hljs-function"></span>&#123;<br>    T v[<span class="hljs-number">200</span>];<br>    <span class="hljs-function">Ptr&lt;T&gt; <span class="hljs-title">p</span><span class="hljs-params">(&amp;v[<span class="hljs-number">0</span>],v,<span class="hljs-number">200</span>)</span></span>;<br>    p.<span class="hljs-keyword">operator</span>--(<span class="hljs-number">0</span>); <span class="hljs-comment">// suffix: p--</span><br>    p.<span class="hljs-keyword">operator</span>*() = a; <span class="hljs-comment">// run-time error: p out of range (prefix * --&gt; *p)</span><br>    p.<span class="hljs-keyword">operator</span>++(); <span class="hljs-comment">// prefix: ++p</span><br>    p.<span class="hljs-keyword">operator</span>*() = a; <span class="hljs-comment">// OK (prefix * --&gt; *p)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Completing class <code>Ptr</code> is left as an exercise.</p><p>A pointer template that behaves correctly with respect to inheritance is presented in section 27.2.2.</p></li></ol><h4 id="19-2-5-Allocation-and-Deallocation"><a href="#19-2-5-Allocation-and-Deallocation" class="headerlink" title="19.2.5 Allocation and Deallocation"></a>19.2.5 Allocation and Deallocation</h4><ol start="22"><li><p>Operator <code>new</code> acquires its memory by calling an <code>operator new()</code>. Similarly, operator <code>delete</code> frees its memory by calling an <code>operator delete()</code>.</p><p>A user can redefine the global <code>operator new()</code> and <code>operator delete()</code> or define <code>operator new()</code> and <code>operator delete</code> for particular class.</p></li><li><p>Using the standard-library type alias <code>size_t</code> (section 6.2.8) for sizes, the declarations of the global versions look like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span>)</span></span>; <span class="hljs-comment">// use for individual object</span><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span>); <span class="hljs-comment">// use for array</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>*, <span class="hljs-type">size_t</span>)</span></span>; <span class="hljs-comment">// use for individual object</span><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span>*, <span class="hljs-type">size_t</span>); <span class="hljs-comment">// use for array</span><br><br><span class="hljs-comment">// for more versions, see section 11</span><br></code></pre></td></tr></table></figure><p>That is, when <code>new</code> needs memory on the free store for an object of type <code>X</code>, it calls <code>operator new(sizeof(X))</code>.</p><p>Similarly, when <code>new</code> needs memory on the free store for an array of <code>N</code> objects of type <code>X</code>, it calls <code>operator new[](N*sizeof(X))</code>.</p><p>A <code>new</code> expression may ask for more memory that is indicated by <code>N*sizeof(X)</code>, but it will always do so in terms of a number of characters (i.e., a number of bytes).</p></li><li><p>Replacing the global <code>operator new()</code> and <code>operator delete()</code> is not for the fainthearted and not recommended.</p><ul><li>After all, someone else might rely on some aspect of the default behavior or might even have supplied other versions of these function.</li></ul><p>A more selective, and often better, approach is to supply these operations for a specific class. This class might be the base for many derived classes.</p><ul><li><p>For example, we might like to have a class <code>Employee</code> provide a specialized allocator and deallocator for itself and all of its derived classes:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>*, <span class="hljs-type">size_t</span>)</span></span>;<br><br>    <span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span>);<br>    <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span>*, <span class="hljs-type">size_t</span>);<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>Member <code>operator new()</code>s and <code>operator delete()</code>s are implicitly <code>static</code> members.</p><ul><li>Consequently, they don’t have a <code>this</code> pointer and do not modify an object.</li><li>The provide storage that a constructor can initialize and a destructor can clean up.</li></ul></li><li><p>```C++<br>void* Employee::operator new(size_t s)<br>{</p><pre><code class="hljs">// allocate s bytes of memory and return a pointer to it</code></pre><p>}</p><p>void Employee::operator delete(void* p, size_t s)<br>{</p><pre><code class="hljs">if(p)&#123; // delete only if p!=0; see section 11.2, section 11.2.3    // assume p points to s bytes of memory allocated by Employee::operator new()    // and free that memory for reuse&#125;</code></pre><p>}</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><br>    Deleting <span class="hljs-keyword">a</span> <span class="hljs-string">&quot;plain&quot;</span> `Employee` gives <span class="hljs-keyword">an</span> argument <span class="hljs-built_in">value</span> <span class="hljs-keyword">of</span> `sizeof(Employee)`; deleting <span class="hljs-keyword">a</span> `Manager` derived <span class="hljs-built_in">from</span> `Employee` that does <span class="hljs-keyword">not</span> have its own `operator <span class="hljs-built_in">delete</span>()` gives <span class="hljs-keyword">an</span> argument <span class="hljs-built_in">value</span> <span class="hljs-keyword">of</span> `sizeof(Manager)`.<br><br>    - This allows <span class="hljs-keyword">a</span> class-specific allocator <span class="hljs-built_in">to</span> avoid storing size information <span class="hljs-keyword">with</span> <span class="hljs-keyword">each</span> allocation.<br><br>    Naturally, <span class="hljs-keyword">a</span> class-specific allocator can store such information (<span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> general-purpose allocator must) <span class="hljs-keyword">and</span> ignore <span class="hljs-keyword">the</span> `size_t` argument <span class="hljs-built_in">to</span> `operator <span class="hljs-built_in">delete</span>()`.<br><br>    - However, doing so makes <span class="hljs-keyword">it</span> harder <span class="hljs-built_in">to</span> improve significantly <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">speed</span> <span class="hljs-title">and</span> <span class="hljs-title">memory</span> <span class="hljs-title">consumption</span> <span class="hljs-title">of</span> <span class="hljs-title">a</span> <span class="hljs-title">general-purpose</span> <span class="hljs-title">allocator</span>.<br><span class="hljs-number">26.</span> How does <span class="hljs-keyword">a</span> compiler know how <span class="hljs-built_in">to</span> supply <span class="hljs-keyword">the</span> <span class="hljs-literal">right</span> size <span class="hljs-built_in">to</span> `operator <span class="hljs-built_in">delete</span>()`?<br><br>    - The type specified <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> `<span class="hljs-built_in">delete</span>` operation matches <span class="hljs-keyword">the</span> type <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> object being `<span class="hljs-built_in">delete</span>`d.<br><br>    If we `<span class="hljs-built_in">delete</span>` <span class="hljs-keyword">an</span> object through <span class="hljs-keyword">a</span> pointer <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> base class, that base class must have <span class="hljs-keyword">a</span> `virtual` destructor (section <span class="hljs-number">17.2</span><span class="hljs-number">.5</span>) <span class="hljs-keyword">for</span> correct size <span class="hljs-built_in">to</span> be given:<br><br>    ```C++<br>    Employee* p = <span class="hljs-built_in">new</span> Manager;<span class="hljs-comment"> // potential trouble (the exact type is lost)</span><br>   <span class="hljs-comment"> // ... </span><br>    <span class="hljs-built_in">delete</span> p;<span class="hljs-comment"> // hope Employee has a virtual destructor</span><br></code></pre></td></tr></table></figure><p>In principle, deallocation is then done by the destructor (which knows the sizes of its class).</p></li></ol><h4 id="19-2-6-User-defined-Literals"><a href="#19-2-6-User-defined-Literals" class="headerlink" title="19.2.6 User-defined Literals"></a>19.2.6 User-defined Literals</h4><ol start="27"><li><p>C++ provides literals for a variety of built-in types (section 6.2.6):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-number">123</span>; <span class="hljs-comment">// int</span><br><span class="hljs-number">1.2</span>; <span class="hljs-comment">// double</span><br><span class="hljs-number">1.2F</span>; <span class="hljs-comment">// float</span><br><span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">// char</span><br><span class="hljs-number">1ULL</span>; <span class="hljs-comment">// unsigned long long</span><br><span class="hljs-number">0xD0</span>; <span class="hljs-comment">// hexadecimal</span><br><span class="hljs-string">&quot;as&quot;</span>; <span class="hljs-comment">// C-style string (const char[3])</span><br></code></pre></td></tr></table></figure><p>In addition, we can define literals for user-defined types and new forms of literals for built-in types.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-string">&quot;Hi!&quot;</span>s; <span class="hljs-comment">// string, not &quot;zero-terminated array of char&quot;</span><br><span class="hljs-number">1.2</span>i; <span class="hljs-comment">// imaginary</span><br><span class="hljs-number">101010111000101b</span>; <span class="hljs-comment">// binary</span><br><span class="hljs-number">123</span>s; <span class="hljs-comment">//seconds</span><br><span class="hljs-number">123.56</span>km; <span class="hljs-comment">// not miles!(units)</span><br><span class="hljs-number">123456789012345678901234567890123456789</span>x; <span class="hljs-comment">//extended-precision</span><br></code></pre></td></tr></table></figure><p>Such <em><strong>user-defined literals</strong></em> are supported through the notion of <em><strong>literal operators</strong></em> that map literals with a given suffix into a desired type.</p><p>The name of a literal operator is <code>operator&quot;&quot;</code> followed by the suffix. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">constexpr</span> complex&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">i</span>(<span class="hljs-type">long</span> <span class="hljs-type">double</span> d) <span class="hljs-comment">// imaginary literal</span><br>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>,d&#125;; <span class="hljs-comment">// complex is a literal type</span><br>&#125;<br><br>std::string <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">s</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* p, <span class="hljs-type">size_t</span> n) <span class="hljs-comment">// std::string literal</span><br>&#123;<br>    <span class="hljs-keyword">return</span> string&#123;p,n&#125;; <span class="hljs-comment">// requires free-store allocation </span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>These two operators define suffixes <code>i</code> and <code>s</code>, respectively.</li><li>I use <code>constexpr</code> to enable compile-time evaluation.</li></ul></li><li><p>Given those, we can write:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp;)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">f</span>(<span class="hljs-string">&quot;Hello&quot;</span>); <span class="hljs-comment">// pass pointer to char* </span><br>    <span class="hljs-built_in">f</span>(<span class="hljs-string">&quot;Hello&quot;</span>s); <span class="hljs-comment">// pass (five-character) string object</span><br>    <span class="hljs-built_in">f</span>(<span class="hljs-string">&quot;Hello\n&quot;</span>s); <span class="hljs-comment">// pass (six-character) string object</span><br><br>    <span class="hljs-keyword">auto</span> z = <span class="hljs-number">2</span>+<span class="hljs-number">1</span>i; <span class="hljs-comment">// complex&#123;2,1&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>The basic (implementation) idea is that after parsing what could be a literal, the compiler always checks for a suffix.</p><p>The user-defined literal mechanism simply allows the user to specify a new suffix and define what is to be done with the literal before it.</p><p>It is not possible to redefine the meaning of a built-in literal suffix or augment the syntax of literals.</p></li><li><p>There are four kinds of literals that can be suffixed to make a user-defined literal:</p><ul><li><p>An integer literal (section 6.2.4.1):</p><ul><li>accepted by a literal operator taking an <code>unsigned long long</code> or</li><li><code>const char*</code> argument or</li><li>by a template literal operator,</li></ul><p>for example, <code>123m</code> or <code>12345678901234567890X</code></p></li><li><p>A floating-point literal (section 6.2.5.1):</p><ul><li>accepted by a literal operator taking a <code>long double</code> or</li><li>a <code>const char*</code> argument or</li><li>by a template literal operator,</li></ul><p>for example, <code>12345678901234567890.976543210x</code> or <code>3.99s</code></p></li><li><p>A string literal (section 7.3.2):</p><ul><li>accepted by a literal operator taking a (<code>const char*</code>, <code>size_t</code>) pair of argument,</li></ul><p>for example, <code>&quot;string&quot;s</code> and <code>R&quot;(Foo\bar)&quot;_path</code></p></li><li><p>A charactor literal (section 6.2.3.2):</p><ul><li>accepted by a literal operator taking a character argument of type <code>char</code>, <code>wchar_t</code>, <code>char16_t</code>, or <code>char32_t</code>,</li></ul><p>for example, <code>&#39;f&#39;_runic</code> or <code>u&#39;BEEF&#39;_w</code>.</p></li></ul><p>For example, we could define a literal operator to collect digits for integer values that cannot be represented in any of the built-in integer types:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">Bignum <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">x</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>*p) <span class="hljs-comment">// require a C-style string for my operator</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Bignum</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Bignum)</span></span>;<br><br><span class="hljs-built_in">f</span>(<span class="hljs-number">123456789012345678901234567890123456789012345</span>x); <span class="hljs-comment">// did not put those digits in double quotes.</span><br><span class="hljs-comment">// the compiler derived a C-style string from the digits provided</span><br></code></pre></td></tr></table></figure><ul><li>Here, the C-style string <code>&quot;123456789012345678901234567890123456789012345&quot;</code> is passed to <code>operator&quot;&quot; x()</code>.</li><li>Note that I did not put those digits in double quotes.<ul><li>I required a C-style string for my operator, and the compiler delivered it from the digits provided.</li></ul></li></ul></li><li><p>To get a C-style string from the program souce text into a literal operator, we request both the string and its number of  characters. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">string <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">s</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* p, <span class="hljs-type">size_t</span> n);<br><br>string s12 = <span class="hljs-string">&quot;one two&quot;</span>s; <span class="hljs-comment">// call operator &quot;&quot;(&quot;one two&quot;,7)</span><br>string s22 = <span class="hljs-string">&quot;two\ntwo&quot;</span>s; <span class="hljs-comment">// call operator &quot;&quot;(&quot;two\ntwo&quot;,7)</span><br>string sxx = R<span class="hljs-string">&quot;two\ntwo&quot;</span>s; <span class="hljs-comment">// call operator &quot;&quot;(&quot;two\ntwo&quot;,8)</span><br></code></pre></td></tr></table></figure><ul><li>In the raw string (section 7.3.2.1), <code>&quot;\n&quot;</code> represents the two characters <code>&#39;\&#39;</code> and <code>n</code>.</li></ul><p>The rationale for requiring the number of character is that if we want to have “a different kind of string,” we almost always want to know the number of characters anyway.</p></li><li><p>A literal operator that takes just a <code>const char*</code> argument (and no size) can be applied to integer and floating-point literals.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">string <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">SS</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* p); <span class="hljs-comment">// warning: this will not work as expected</span><br><br>string s12 = <span class="hljs-string">&quot;one two&quot;</span>SS; <span class="hljs-comment">// error: no applicable literal operator</span><br>string s13 = <span class="hljs-number">13</span>SS; <span class="hljs-comment">// OK, but why would anyone do that?</span><br></code></pre></td></tr></table></figure><p>A literal operator converting numberical values to strings could be quite confusing.</p></li><li><p>A <em><strong>template literal operator</strong></em> is a literal operator that takes its argument as a template parameter pack, rather than as a function argument. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">char</span>...&gt;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> _b3(); <span class="hljs-comment">// base 3, i.e., ternary</span><br></code></pre></td></tr></table></figure><p>Given that, we get:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-number">201</span>_b3; <span class="hljs-comment">// means operator &quot;&quot; b3&lt;&#x27;2&#x27;,&#x27;0&#x27;,&#x27;1&#x27;&gt;(); so 9*2+3*0+1 == 19</span><br><span class="hljs-number">241</span>_b3; <span class="hljs-comment">// means operator &quot;&quot; b3&lt;&#x27;2&#x27;,&#x27;4&#x27;,&#x27;1&#x27;&gt;(); so error: 4 isn&#x27;t a ternary digit</span><br></code></pre></td></tr></table></figure><p>The variadic template techniques (section 3.4.4, section 28.6) can be disconcerting, but it is the only way of assigning nonstandard meanings to digits at compile time.</p></li><li><p>To define <code>operator&quot;&quot; _b3()</code>, we need some helper functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">ipow</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span> <span class="hljs-comment">// x to the nth power for n&gt;=0</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (n&gt;<span class="hljs-number">0</span>) ? x*<span class="hljs-built_in">ipow</span>(x,n<span class="hljs-number">-1</span>) : <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">char</span> c&gt; <span class="hljs-comment">// handle the single ternary digit case</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">b3_helper</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">static_assert</span>(c&lt;<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&quot;not a ternary digit&quot;</span>);<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">char</span> c,<span class="hljs-type">char</span>... tail&gt; <span class="hljs-comment">// peel off one ternary digit (variadic template; section 3.4.4)</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">b3_helper</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">static_assert</span>(c&lt;<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&quot;not a ternary digit&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ipow</span>(<span class="hljs-number">3</span>,<span class="hljs-keyword">sizeof</span>...(tail))*(c-<span class="hljs-string">&#x27;0&#x27;</span>)+<span class="hljs-built_in">b3_helper</span>(tail...);<br>&#125;<br></code></pre></td></tr></table></figure><p>Given that, we can define our base 3 literal operator</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">char</span>... chars&gt;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> _b3() <span class="hljs-comment">// base 3, i.e., ternary</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">b3_helper</span>(chars...)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Many suffixes will be short (e.g., <code>s</code> for <code>std::string</code>, <code>i</code> for imaginary, <code>m</code> for meter (section 28.7.3), and <code>x</code> for extended), so different uses could easily clash.</p><p>Use namespace to prevent clashes:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> Numerics&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bignum</span> &#123;<span class="hljs-comment">/*...*/</span>&#125;;<br><br>    <span class="hljs-keyword">namespace</span> literals&#123;<br>        Bignum <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">x</span>(<span class="hljs-type">char</span> <span class="hljs-type">const</span>*);<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> Numerics::literals<br></code></pre></td></tr></table></figure></li><li><p>The standard library reserves all suffixs not starting with an initial underscore, so define your suffixes starting with an underscore or risk your code breaking in the future:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-number">123</span>km; <span class="hljs-comment">// reserved by the standard library</span><br><span class="hljs-number">123</span>_km; <span class="hljs-comment">// available for your use</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="19-3-A-String-Class"><a href="#19-3-A-String-Class" class="headerlink" title="19.3 A String Class"></a>19.3 A String Class</h3><ol start="36"><li><p>The relatively simple string class presented in this section illustrates several techniques that are useful for the design and implementation of classes using conventionally defined operators.</p><ul><li>This <code>String</code> is a simplified version of the standard-library <code>string</code> (section 4.2, Chapter 36).</li><li><code>String</code> provides value semantics, checked and unchecked access to characters, stream I/O, support for range-<code>for</code> loops, equality operations, and concatenation operators.</li><li>I also added a <code>String</code> literal, which <code>std::string</code> does not (yet) have.</li></ul></li><li><p>To allow simple interoperability with C-style strings (including string literal (section 7.3.2)), I represent strings as zero-terminated arrays of characters.</p><ul><li>For realism, I implement the <em><strong>short string optimization</strong></em>. That is, a <code>String</code> with only a few characters stores those characters in the class object itself, rather than on the free store.<ul><li>This optimizas string usage for small strings.</li><li>Experience shows that for a huge number of applications most strings are short.</li><li>This optimization is particularly important in multi-threaded systems where sharing through pointers (or reference) is infeasible and free-store allocation and deallocation relatively expensive.</li></ul></li></ul><p>To allow <code>String</code>s to efficiently “grow” by adding character at the end, I implement a scheme for keeping extra space for such growth similar to the one used for <code>vector</code> (section 13.6.1).</p><ul><li>This makes <code>String</code> a suitable target for various forms of input.</li></ul></li><li><p>Writing a better string class and/or one that provides more facilities is a good exercise.</p><p>That done, we can throw away our exercises and use <code>std::string</code>.</p></li></ol><h4 id="19-3-1-Essential-Operations"><a href="#19-3-1-Essential-Operations" class="headerlink" title="19.3.1 Essential Operations"></a>19.3.1 Essential Operations</h4><ol start="39"><li><p>Class <code>String</code> provides the usual set of constructors, a destructor, and assignment operation (section 17.1):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">String</span>(); <span class="hljs-comment">// default constructor: x&#123;&quot;&quot;&#125;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">String</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* p)</span></span>; <span class="hljs-comment">// constructor from C-style string: x&#123;&quot;Euler&quot;&#125;</span><br><br>    <span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> String&amp;); <span class="hljs-comment">// copy constructor</span><br>    String&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> String&amp;); <span class="hljs-comment">// copy assignment</span><br><br>    <span class="hljs-built_in">String</span>(String&amp;&amp; x); <span class="hljs-comment">// move constructor</span><br>    String&amp; <span class="hljs-keyword">operator</span>=(String&amp;&amp; x); <span class="hljs-comment">// move assignment</span><br><br>    ~<span class="hljs-built_in">String</span>() &#123; <span class="hljs-keyword">if</span>(short_max&lt;sz) <span class="hljs-keyword">delete</span>[] ptr;&#125; <span class="hljs-comment">// destructor</span><br><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>This <code>String</code> has value semantics.</p><ul><li>That is, after an assignment <code>s1=s2</code>, the two strings <code>s1</code> and <code>s2</code> are fully distinct, and subsequent changes to one have no effect on the other.</li></ul><p>The alternative would be to give <code>String</code> pointer semantics.</p><ul><li>That would be to let changes to <code>s2</code> after <code>s1=s2</code> also affect the value of <code>s1</code>.</li></ul><p>Where it makes sense, I prefer value semantics;</p><ul><li>examples are <code>complex</code>, <code>vector</code>, <code>Matrix</code>, and <code>string</code>.</li></ul><p>However, for value semantics to be affordable, we need to pass <code>String</code>s by reference when we don’t need copies and to implement move semantics (section 3.3.2, section 17.5.2) to optimize <code>return</code>s.</p><p>The slightly nontrivial representation of <code>String</code> is presentedin section 19.3.3.</p><ul><li>Note that it requires user-defined versions of the copy and move operations.</li></ul></li></ol><h4 id="19-3-2-Access-to-Characters"><a href="#19-3-2-Access-to-Characters" class="headerlink" title="19.3.2 Access to Characters"></a>19.3.2 Access to Characters</h4><ol start="40"><li><p>The design of access operators for a string is a difficult topic because ideally access is by conventional notation (that is, using <code>[]</code>), maximally efficient, and range checked.</p><p>Unfortunately, you cannot have all of these properties simultaneously.</p><p>Here, I follow the standard library by providing efficient unchecked operations with the conventional <code>[]</code> subscript notation plus range-checked <code>at()</code> operations:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-type">char</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">int</span> n) &#123; <span class="hljs-keyword">return</span> ptr[n];&#125; <span class="hljs-comment">// unchecked element access</span><br>    <span class="hljs-type">char</span> <span class="hljs-keyword">operator</span>[](<span class="hljs-type">int</span> n) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> ptr[n];&#125; <span class="hljs-comment">// const version for const</span><br><br>    <span class="hljs-function"><span class="hljs-type">char</span>&amp; <span class="hljs-title">at</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123; <span class="hljs-built_in">check</span>(n); <span class="hljs-keyword">return</span> ptr[n];&#125; <span class="hljs-comment">// range-checked element access</span><br>    <span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">at</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-built_in">check</span>(n); <span class="hljs-keyword">return</span> ptr[n];&#125;<br><br>    String&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">char</span> c); <span class="hljs-comment">// add c at end</span><br><br>    <span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">c_str</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> ptr;&#125; <span class="hljs-comment">// C-style string access</span><br>    <span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">c_str</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> ptr;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> sz;&#125; <span class="hljs-comment">// number of elements</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-comment">// elements plus available space</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> (sz&lt;short_max) ? short_max : sz+space;&#125;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>I provide <code>const</code> and non-<code>const</code> versions of the access functions to allow them to be used for <code>const</code> as well as other objects.</li></ul></li><li><p>The idea is to use <code>[]</code> for ordinary use. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-type">const</span> String&amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> h&#123;s[<span class="hljs-number">0</span>]&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i&#123;<span class="hljs-number">1</span>&#125;; i!=s.<span class="hljs-built_in">size</span>(); i++) h ^= s[i]&gt;&gt;<span class="hljs-number">1</span>; <span class="hljs-comment">// unchecked access to s</span><br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Here, using the checked <code>at()</code> would be redundant because we correctly access <code>s</code> only from <code>0</code> to <code>s.size()-</code>.</li></ul></li><li><p>We can use <code>at()</code> where we see a possibility of mistakes. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_in_order</span><span class="hljs-params">(<span class="hljs-type">const</span> String&amp; s, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (x : index) cout &lt;&lt; s.<span class="hljs-built_in">at</span>(x) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Unfortunately, assuming that people will use <code>at()</code> consistently where mistakes can be made is overly optimistic, so some implementations of <code>std::string</code> (from which the <code>[]</code>/<code>at()</code> convention is borrowed) also check <code>[]</code>.</li><li>I personally prefer ta checked <code>[]</code> at least during development.</li><li>However, for serious string manipulation tasks, a range check on each character access could impose quite noticeable overhead.</li></ul></li></ol><h4 id="19-3-3-Representation"><a href="#19-3-3-Representation" class="headerlink" title="19.3.3 Representation"></a>19.3.3 Representation</h4><ol start="43"><li><p>The representation for <code>String</code> was chosen to meet three goals:</p><ul><li>To make it easy to convert a C-style string (e.g., a string literal) to a <code>String</code> and to allow easy access to the characters of a <code>String</code> as a C-style string</li><li>To minimize the use of the free store</li><li>To make adding characters to the end of a <code>String</code> efficient</li></ul><p>The result is clearly messier than a simple {pointer,size} representation, but much more realistic:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">A simple string that implements the short string optimization</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">size()==sz is the number of elements</span><br><span class="hljs-comment">if size()&lt;=short_max, the characters are held in the String object itself;</span><br><span class="hljs-comment">otherwise the free store is used.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">ptr points to the start of the character sequence</span><br><span class="hljs-comment">the character sequence is kept zero-terminated: ptr[size()]==0;</span><br><span class="hljs-comment">this allows us to use C library string functions and to easily return a C-style string: c_str()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">To allow efficient addition of characters at end, String grows by doubling its allocation;</span><br><span class="hljs-comment">capacity() is the  amount of space available for characters</span><br><span class="hljs-comment">(excluding the terminating 0): sz+space</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> short_max = <span class="hljs-number">15</span>;<br>    <span class="hljs-type">int</span> sz; <span class="hljs-comment">// number of characters</span><br>    <span class="hljs-type">char</span>* ptr;<br>    <span class="hljs-keyword">union</span> &#123;<br>        <span class="hljs-type">int</span> space; <span class="hljs-comment">// unused allocated space</span><br>        <span class="hljs-type">char</span> ch[short_max+<span class="hljs-number">1</span>]; <span class="hljs-comment">// leave space to terminating 0</span><br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> <span class="hljs-type">const</span> <span class="hljs-comment">// range check</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (n&lt;<span class="hljs-number">0</span> || sz&lt;=n)<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;String::at()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// ancillary member functions</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">copy_from</span><span class="hljs-params">(<span class="hljs-type">const</span> String&amp; x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move_from</span><span class="hljs-params">(String&amp; x)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>This supports what is known as <em><strong>short string optimization</strong></em> by using two string representations:<ul><li>If <code>sz&lt;=short_max</code>, the characters are stored in the <code>String</code> object itself, in the array named <code>ch</code>.</li><li>If <code>!(sz&lt;=short_max)</code>, the characters are stored on the free store and we may allocate extra space for expansion. The member named <code>space</code> is the number of such characters.</li></ul></li><li>In both cases, the number of elements is kept in <code>sz</code> and we look at <code>sz</code>, to determine which implementation scheme is used for a given string.</li><li>In both cases, <code>ptr</code> points to the elements.<ul><li>This is essential for performance:<ul><li>the access functions do not need to test which representation is used; they simply use <code>ptr</code>.</li><li>Only the constructor, assignments, moves, and the destructor (section 19.3.4) must care about the two alternatives.</li></ul></li></ul></li><li>We use the array <code>ch</code> only if <code>sz&lt;=short_max</code> and the integer <code>space</code> only if <code>!(sz&lt;=short_max)</code>.<ul><li>Consequently, it would be a waste to allocate space for both <code>ch</code> and <code>space</code> in a <code>String</code> object.<ul><li>To avoid such waste, I use a <code>union</code> (section 8.3).</li><li>In particular, I used a form of <code>union</code> called an <em><strong>anonymous union</strong></em> (section 8.3.2), which is specially designed to allow a class to manage alternative representations of objects.<ul><li>All members of an anonymous union are allocated in the same memory, starting at the same address.</li><li>Only one member may be used at any one time, but otherwise they are accessed and used exactly as if they were separate members of the scope surrounding the anonymous union.</li><li>It is the programmer’s job to make sure that they are never misused.<ul><li>For example, all member functions of <code>String</code> that use <code>space</code> must make sure that it really was <code>space</code> that was set and not <code>ch</code>.</li><li>That is done by looking at <code>sz&lt;=short_max</code>.</li></ul></li></ul></li></ul></li></ul></li></ul></li></ol><h5 id="19-3-3-1-Ancillary-Functions"><a href="#19-3-3-1-Ancillary-Functions" class="headerlink" title="19.3.3.1 Ancillary Functions"></a>19.3.3.1 Ancillary Functions</h5><ol start="44"><li><p>In addition to functions intended for general use, I found that my code become cleaner when I provided three ancillary functions as “building blocks” to help me with somewhat triky representation and to minimize code replication.</p><ul><li>Two of those need to access the representation of <code>String</code>, so I made them members.</li></ul><p>However, I made them <code>private</code> members because they don’t represent operations that are generally useful and safe to use.</p><p>For many interesting classes, the implementation is not just the representation plus the <code>public</code> functions.</p><p>Ancillary functions can lead to less duplication of code, better design, and improved maintainability.</p></li><li><p>The first such function moves characters into newly allocated memory:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">expand</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ptr, <span class="hljs-type">int</span> n)</span> <span class="hljs-comment">// expand into free store</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[n];<br>    <span class="hljs-built_in">strcpy</span>(p,ptr); <span class="hljs-comment">// section 43.4</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>This function does not access the <code>String</code> representation, so I did not make it a member.</li></ul><p>The second implementation function is used by copy operations to give a <code>String</code> a copy of the members of another:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">String::copy_from</span><span class="hljs-params">(<span class="hljs-type">const</span> String&amp; x)</span></span><br><span class="hljs-function">    <span class="hljs-comment">// make *this a copy of x</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x.sz&lt;=short_max) &#123; <span class="hljs-comment">// copy *this</span><br>        <span class="hljs-built_in">memcpy</span>(<span class="hljs-keyword">this</span>,&amp;x,<span class="hljs-built_in">sizeof</span>(x)); <span class="hljs-comment">// section 43.5</span><br>        ptr = ch;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// copy the elements</span><br>        ptr = <span class="hljs-built_in">expand</span>(x.ptr,x.sz+<span class="hljs-number">1</span>); <span class="hljs-comment">// zero-terminated</span><br>        sz = x.sz;<br>        space = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Any necessary cleanup of the target <code>String</code> is the task of callers of <code>copy_from()</code>;<ul><li><code>copy_from()</code> unconditionally overwrites its target.</li></ul></li><li>I use the standard-library <code>memcpy()</code> (section 43.5) to copy the bytes of the source into the target.<ul><li>That’s a low level and sometimes pretty nasty function.</li><li>It should be used only where there are no objects with constructors or destructors in the copied memory because <code>memcpy()</code> knows nothing about types.</li></ul></li><li>Both <code>String</code> copy operations use <code>copy_from()</code> (i.e., copy constructor and copy assignment).</li></ul><p>The corresponding function for move operation is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">String::move_from</span><span class="hljs-params">(String&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x.sz&lt;=short_max) &#123; <span class="hljs-comment">// copy *this</span><br>        <span class="hljs-built_in">memcpy</span>(<span class="hljs-keyword">this</span>,&amp;x,<span class="hljs-built_in">sizeof</span>(x)); <span class="hljs-comment">// section 43.5</span><br>        ptr = ch;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// grab the elements</span><br>        ptr = x.ptr;<br>        sz = x.sz;<br>        space = x.space;<br>        x.ptr = x.ch; <span class="hljs-comment">// x = &quot;&quot;</span><br>        x.sz = <span class="hljs-number">0</span>;<br>        x.ch[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>It too unconditionally makes its target a copy of its argument.<ul><li>However, it does not leave its argument owning any free store.</li></ul></li><li>I could also have used <code>memcpy()</code> in the long string case (<code>!(x.sz&lt;=short_max)</code>), but since a long string representation uses only part of <code>String</code>‘s representation, I decidied to copy the used members individually/</li></ul></li></ol><h4 id="19-3-4-Member-Functions"><a href="#19-3-4-Member-Functions" class="headerlink" title="19.3.4 Member Functions"></a>19.3.4 Member Functions</h4><ol start="46"><li><p>The default constructor defines a <code>String</code> to be empty:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">String::<span class="hljs-built_in">String</span>() <span class="hljs-comment">// default constructor: x&#123;&quot;&quot;&#125;</span><br>    : sz&#123;<span class="hljs-number">0</span>&#125;, ptr&#123;ch&#125; <span class="hljs-comment">// ptr points to elements, ch is an initial location (section 19.3.3)</span><br>&#123;<br>    ch[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// terminating 0</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Given <code>copy_from()</code> and <code>move_from()</code>, the constructors, movesm and assignments are fairly simple to implement.</p><p>The constructor that takes a C-style string argument must determine the number of characters and store them appropriately:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">String::<span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* p)<br>    : sz&#123;<span class="hljs-built_in">strlen</span>(p)&#125;,<br>  ptr&#123;(sz&lt;=short_max) ? ch : <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[sz+<span class="hljs-number">1</span>]&#125;,<br>  space&#123;<span class="hljs-number">0</span>&#125;<br>&#123;<br>    <span class="hljs-built_in">strcpy</span>(ptr,p); <span class="hljs-comment">// copy characters into ptr from p</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>If the argument is a short string, <code>ptr</code> is set to point to <code>ch</code>; otherwise, space is allocated on the free store.</li><li>In either case, the characters are copied from the argument string into the memory managed by <code>String</code>.</li></ul><p>The copy constructor simply copies the representation of its argument:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">String::<span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> String&amp; x) <span class="hljs-comment">// copy constructor</span><br>&#123;<br>    <span class="hljs-built_in">copy_from</span>(x); <span class="hljs-comment">// copy representaion from x</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>I didn’t bother trying to optimize the case where the size of the source equals the size of the target (as was done for <code>vector</code>; section 13.6.3). I didn’t know if that would be worthwhile.</li></ul><p>Similarly, the move constructor moves the representation from its source (and possibly sets it argument to be the empty string):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">String::<span class="hljs-built_in">String</span>(String&amp;&amp; x) <span class="hljs-comment">// move constructor</span><br>&#123;<br>    <span class="hljs-built_in">move_from</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure><p>Like the copy constructor, the <strong>copy assignment</strong> uses <code>copy_from()</code> to clone its argument’s representation.</p><p>In addition, it has to <code>delete</code> any free store owned by the target and make sure it does not get into trouble with self-assignment (e.g., <code>s=s</code>):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">String&amp; String::<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> String&amp; x)<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>==&amp;x) <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>; <span class="hljs-comment">// deal with self-assignment</span><br>    <span class="hljs-type">char</span>* p = (short_max&lt;sz) ? ptr : <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">copy_from</span>(x);<br>    <span class="hljs-keyword">delete</span>[] p;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The <code>String</code> move assignment deletes its target’s free store (if there is any) and then moves:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">String&amp; String::<span class="hljs-keyword">operator</span>=(String&amp;&amp; x)<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>==&amp;x) <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>; <span class="hljs-comment">// deal with self-assignment (x = move(x) is insanity)</span><br>    <span class="hljs-keyword">if</span>(short_max&lt;sz) <span class="hljs-keyword">delete</span>[] ptr; <span class="hljs-comment">// delete target</span><br>    <span class="hljs-built_in">move_from</span>(x); <span class="hljs-comment">// does not throw</span><br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>It is logically possible to move a source into itself (e.g., <code>s=std::move(s)</code>), so again we have to protect against self-assignment (however unlikely).</li></ul></li><li><p>The logically most complicated <code>String</code> operation is <code>+=</code>, which adds a character to the end of the string, increasing its size of by one:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++">String&amp; String::<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">char</span> c)<br>&#123;<br>    <span class="hljs-keyword">if</span>(sz==short_max) &#123; <span class="hljs-comment">// expand to long string</span><br>        <span class="hljs-type">int</span> n = sz+sz+<span class="hljs-number">2</span>; <span class="hljs-comment">// double the allocation (+2 because of the terminating 0)</span><br>        ptr = <span class="hljs-built_in">expand</span>(ptr,n);<br>        space = n-sz<span class="hljs-number">-2</span>; <span class="hljs-comment">// n - 1 - (sz + 1)</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(short_max&lt;sz) &#123;<br>        <span class="hljs-keyword">if</span>(space==<span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// expand in free store</span><br>            <span class="hljs-type">int</span> n = sz+sz+<span class="hljs-number">2</span>; <span class="hljs-comment">// double the allocation (+2 because of the terminating 0)</span><br>            <span class="hljs-type">char</span>* p = <span class="hljs-built_in">expand</span>(ptr,n);<br>            <span class="hljs-keyword">delete</span>[] ptr;<br>            ptr = p;<br>            space = n-sz<span class="hljs-number">-2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            --space;<br>    &#125;<br>    ptr[sz] = c; <span class="hljs-comment">// add c at end</span><br>    ptr[++sz] = <span class="hljs-number">0</span>; <span class="hljs-comment">// increase size and set terminator</span><br><br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>There is a lot going on here:<ul><li><code>operator+=()</code> has to keep track of which representation (short or long) is used and whether there is extra space available to expand into.<ul><li>If more space is needed, <code>expand()</code> is called to allocate that space and move the old characters into the new space.</li><li>If there was an old allocation that needs deleting, it is returned, so that <code>+=</code> can delete it.</li></ul></li><li>Once enough space is available, it is trivial to put the new character <code>c</code> into it and to add the terminating <code>0</code>.</li></ul></li><li>Note the calculation of available memory for space.<ul><li>Of all the String implementation that took the longest to get right:<ul><li>its a messy little calculation prone to off-by-one errors.</li></ul></li><li>That repeated constant <code>2</code> feels awfully like a ‘‘magic constant.’’</li></ul></li></ul><p>All <code>String</code> members take care not to modify a new representation before they are certain that a new one can be put in place.</p><ul><li>In particular, they don’t <code>delete</code> until after any possible <code>new</code> operations have been done.</li><li>In fact, the <code>String</code> members provides the strong exception guarantee (section 13.2).</li></ul></li><li><p>If you don’t like the kind of fiddly code presented as part of the implementation of <code>String</code>, simply use <code>std::string</code>.</p><p>To a large extent, the standard-library facilities exist to save us from programming at this low level most of the time.</p><p>Stronger: writing a string class, a vector class, or a map is an excellent exercise.</p><ul><li>However, once the exercise is done, one outcome should be an appreciation of what the standard offers and a desire not to maintain your own version.</li></ul></li></ol><h4 id="19-3-5-Helper-Functions"><a href="#19-3-5-Helper-Functions" class="headerlink" title="19.3.5 Helper Functions"></a>19.3.5 Helper Functions</h4><ol start="50"><li><p>To complete class <code>String</code>, I provide a set of useful functions, stream I/O, support for range-<code>for</code> loops, comparison, and concatenation.</p><ul><li>These all mirror the design choices used for <code>std::string</code>.</li></ul></li><li><p>In particular, <code>&lt;&lt;</code> just prints the characters without added formatting, and <code>&gt;&gt;</code> skips initial whitespace before reading until it finds terminating whitespace (or the end of the stream):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="hljs-type">const</span> String&amp; s)<br>&#123;<br>    <span class="hljs-keyword">return</span> os &lt;&lt; s.<span class="hljs-built_in">c_str</span>(); <span class="hljs-comment">// section 36.3.3</span><br>&#125;<br><br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; is, String&amp; s)<br>&#123;<br>    s = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// clear the target string</span><br>    is&gt;&gt;ws; <span class="hljs-comment">// skip whitespace (section 38.4.5.1)</span><br>    <span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;&#x27;;</span><br><span class="hljs-string">    while(is.get(ch) &amp;&amp; !isspace(ch))</span><br><span class="hljs-string">        s += ch;</span><br><span class="hljs-string">    return is;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>I provide <code>==</code> and <code>!=</code> for comparison:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> String&amp; a, <span class="hljs-type">const</span> String&amp; b)<br>&#123;<br>    <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">size</span>()!=b.<span class="hljs-built_in">size</span>())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i!=a.<span class="hljs-built_in">size</span>(); ++i)<br>        <span class="hljs-keyword">if</span>(a[i]!=b[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> String&amp; a, <span class="hljs-type">const</span> String&amp; b)<br>&#123;<br>    <span class="hljs-keyword">return</span> !(a==b);<br>&#125;<br></code></pre></td></tr></table></figure><p>Adding <code>&lt;</code>, etc., would be trivial.</p></li><li><p>To support the range-<code>for</code> loop, we need <code>begin()</code> and <code>end()</code> (section 9.5.1).</p><p>Again, we can provide those as freestanding (nonmember) functions without direct access to the <code>String</code> implementation:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">begin</span><span class="hljs-params">(String&amp; x)</span> <span class="hljs-comment">// C-string-style access</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-built_in">c_str</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">end</span><span class="hljs-params">(String&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-built_in">c_str</span>()+x.<span class="hljs-built_in">size</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">begin</span><span class="hljs-params">(<span class="hljs-type">const</span> String&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-built_in">c_str</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">end</span><span class="hljs-params">(<span class="hljs-type">const</span> String&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-built_in">c_str</span>()+x.<span class="hljs-built_in">size</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Given the member function <code>-=</code> that adds a character at the end, concatenation operator are easily provided as nonmember functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++">String&amp; <span class="hljs-keyword">operator</span>+=(Strng&amp; a, <span class="hljs-type">const</span> String&amp; b) <span class="hljs-comment">// concatenation</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : b)<br>        a+=x;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br>String&amp; <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> String&amp; a, <span class="hljs-type">const</span> String&amp; b) <span class="hljs-comment">// concatenation</span><br>&#123;<br>    String res&#123;a&#125;;<br>    res += b;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>I feel that I may have slight “cheated” here.</p><ul><li><p>Should I have provided a member <code>+=</code> that added a C-style string to the end?</p><ul><li><p>The standard-library <code>string</code> does, but without it, concatenation with a C-style string still works.</p></li><li><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">String s = <span class="hljs-string">&quot;Njal&quot;</span>;<br>s += <span class="hljs-string">&quot;Gunnar&quot;</span>; <span class="hljs-comment">// concatenate: add to the end of s</span><br></code></pre></td></tr></table></figure><ul><li>This use of <code>+=</code> is interpreted as <code>operator+=(s,String(&quot;Gunnar&quot;))</code>.</li></ul></li><li><p>My guess is that I could provide a more efficient <code>String::operator+=(const char*)</code>, but I have no idea if the added performance would be worthwhile in real-world code.</p></li><li><p>In such cases, I try to be conservative and deliver the minimal design.</p></li><li><p>Being able to do something is not by itself a good reason for doing it.</p></li></ul></li><li><p>Similarly, I do not try to optimize <code>+=</code> by taking the size of a source string into account.</p></li></ul></li></ul></li><li><p>Adding <code>_s</code> as a string literal suffix meaning <code>String</code> is trivial:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">String <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span> _s(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* p, <span class="hljs-type">size_t</span>)<br>&#123;<br>    <span class="hljs-keyword">return</span> String&#123;p&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>We can now write:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)</span></span>; <span class="hljs-comment">// C-style string</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> String&amp;)</span></span>; <span class="hljs-comment">// our string</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">f</span>(<span class="hljs-string">&quot;Madden&#x27;s&quot;</span>); <span class="hljs-comment">// f(const char*)</span><br>    <span class="hljs-built_in">f</span>(<span class="hljs-string">&quot;Christopher&#x27;s&quot;</span>_s); <span class="hljs-comment">// f(const String&amp;)</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="19-3-6-Using-Our-String"><a href="#19-3-6-Using-Our-String" class="headerlink" title="19.3.6 Using Our String"></a>19.3.6 Using Our String</h4><ol start="56"><li><p>The main program simply exercises the <code>String</code> operators a bit:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;abcdefghij&quot;</span>)</span></span>;<br>    cout &lt;&lt; s &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    s += <span class="hljs-string">&#x27;k&#x27;</span>;<br>    s += <span class="hljs-string">&#x27;l&#x27;</span>;<br>    s += <span class="hljs-string">&#x27;m&#x27;</span>;<br>    s += <span class="hljs-string">&#x27;n&#x27;</span>;<br>    cout &lt;&lt; s &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    String s2 = <span class="hljs-string">&quot;Hell&quot;</span>;<br>    s2 += <span class="hljs-string">&quot; and high water&quot;</span>;<br>    cout &lt;&lt; s2 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>    String s3 = <span class="hljs-string">&quot;qwerty&quot;</span>;<br>    s3 = s3;<br>    String s4 = <span class="hljs-string">&quot;the quick brown fox jumped over the lazy dog&quot;</span>;<br>    s4 = s4;<br>    cout &lt;&lt; s3 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; s4 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; s + <span class="hljs-string">&quot;. &quot;</span> + s3 + <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;. &quot;</span>) + <span class="hljs-string">&quot;Horsefeathers\n&quot;</span>;<br><br>    String buf;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;buf &amp;&amp; buf!=<span class="hljs-string">&quot;quit&quot;</span>)<br>        cout &lt;&lt; buf &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; buf.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; buf.<span class="hljs-built_in">capacity</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>The <code>String</code> lacks many features that you might consider important or even essential.</p><p>However, for what it does it closely resembles <code>std::string</code> (Chapter 36) and illustrates techniques used for the implementation of the standard-library <code>string</code>.</p></li></ol><h3 id="19-4-Friends"><a href="#19-4-Friends" class="headerlink" title="19.4 Friends"></a>19.4 Friends</h3><ol start="58"><li><p>An ordinary member function declaration specifies three logically distinct things:</p><ul><li>The function can access the private part of the class declaration.</li><li>The function is in the scope of the class.</li><li>The function must be invoked on an object (has a <code>this</code> pointer).</li></ul><p>By declaring a member function <code>static</code> (section 16.2.12), we can give it the first two properties only.</p><p>By declaring a nonmember function a <code>friend</code>, we can give it the first property only.</p><ul><li><p>That is, a function declared <code>friend</code> is granted access to the implementation of a class just like a member function but is otherwise independent of that class.</p></li><li><p>For example, we could define an operator that multiplies a <code>Matric</code> by a <code>Vector</code>.</p><ul><li><p>Naturally, <code>Vector</code> and <code>Matrix</code> hide their repective representations and provide a complete set of operations for manipulating objects of their type.</p></li><li><p>However, our multiplication routine cannot be a member of both.</p></li><li><p>Also, we don’t really want to provide low-level access functions to allow every user to both read and write the complete representation of both <code>Matrix</code> and <code>Vector</code>.</p></li><li><p>To avoid this, we declare the <code>operator*</code> a <code>friend</code> of both:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> rc_max&#123;<span class="hljs-number">4</span>&#125;; <span class="hljs-comment">// row and column size</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span> &#123;<br>    <span class="hljs-type">float</span> v[rc_max];<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">friend</span> Vector <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Matrix&amp;, <span class="hljs-type">const</span> Vector&amp;);<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span> &#123;<br>Vector v[rc_max];<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">friend</span> Vector <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Matrix&amp;, <span class="hljs-type">const</span> Vector&amp;);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>Now <code>operator*()</code> can reach into the implementation of both <code>Vector</code> and <code>Matrix</code>. That would allow sophisticated implementation techniques, but a simple implementation would be:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">Vector <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Matrix&amp; m, <span class="hljs-type">const</span> Vector&amp; v)<br>&#123;<br>    Vector r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i!=rc_max; i++) &#123; <span class="hljs-comment">// r[i] = m[i] * v</span><br>        r.v[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j!=rc_max; j++)<br>            r.v[i] += m.v[i].v[j] * v.v[j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ol><ol start="59"><li><p>A <code>friend</code> declaration can be placed in either the private or the public part of a class declaration; it does not matter where.</p><p>Like a member function, a friend function is explicitly declared in the declaration of the class of which it is a friend.</p><ul><li>It is therefore as much a part of that interface as is a member function. (既是接口也是成员函数)</li></ul></li></ol><ol start="60"><li><p>A member function of one class can be the friend of another. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">List_iterator</span> &#123;<br><span class="hljs-comment">// ...</span><br>    <span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">int</span>* <span class="hljs-title">List_iterator::next</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>There is a shorthand for making all functions of one class friends of another. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> &#123;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">List_iterator</span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>This <code>friend</code> declaration makes all of <code>List_iterator</code>‘s member function friends of <code>List</code>.</li></ul><p>Declaring a class a <code>friend</code> grants access to every function of that class.</p><ul><li>That implies that we can not know the set of functions that can access the granting class’s representation just by looking at the class itself.</li><li>In this, a friend class declaration differs from the declaration of member function and a friend function.</li><li>Clearly, friend classes should be used with caution and only to express closely connected concepts.</li></ul></li></ol><ol start="61"><li><p>It is possible to make a template argument a <code>friend</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> &#123;<br>    <span class="hljs-keyword">friend</span> T;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>; <span class="hljs-comment">// redundant &quot;class&quot;</span><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>Often, there is a choice between making a class a member (a nested class) or a nonmember friend (section 18.3.1)</p></li></ol><h4 id="19-4-1-Finding-Friends"><a href="#19-4-1-Finding-Friends" class="headerlink" title="19.4.1 Finding Friends"></a>19.4.1 Finding Friends</h4><ol start="62"><li><p>A friend must be previously declared in an enclosing scope or defined in the non-class scope immediately enclosing the class that is declaring it to be a <code>friend</code>.</p><p>Scopes outside the innermost enclosing namespace scope are not considered for a name first declared as a <code>friend</code>.</p><p>Consider a technical example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> &#123;&#125;; <span class="hljs-comment">// will become friend of N::C</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// will become friend of N::C</span><br><br><span class="hljs-keyword">namespace</span> N &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">C2</span> &#123;&#125;; <span class="hljs-comment">// will become friend of C</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">// will become friend of C</span><br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>        <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span>; <span class="hljs-comment">// OK (previously defined)</span><br>        <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span>;<br>        <br>        <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3</span>; <span class="hljs-comment">// OK (defined in enclosing namespace)</span><br>        <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span></span>;<br>        <br>        <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C4</span>; <span class="hljs-comment">// First declared in N and assumed to be in N (but actually not)</span><br>        <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">f4</span><span class="hljs-params">()</span></span>;<br>    &#125;;<br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3</span> &#123;&#125;; <span class="hljs-comment">// friend of C</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span> </span>&#123; C x; x.x = <span class="hljs-number">1</span>;&#125; <span class="hljs-comment">// OK: friend of C</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C4</span> &#123;&#125;; <span class="hljs-comment">// not friend of N::C</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f4</span><span class="hljs-params">()</span> </span>&#123; N::C x; x.x = <span class="hljs-number">1</span>;&#125; <span class="hljs-comment">// Error: x is private and f4() is not a friend of N::C</span><br></code></pre></td></tr></table></figure></li></ol><ol start="63"><li><p>A friend function can be found through its argument (section 14.2.4) even if it was not declared in the immediately enclosing scope. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Matrix&amp; m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">invert</span>(m); <span class="hljs-comment">// Matrix&#x27;s friend invert()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Thus, a friend function should be explicitly declared in an enclosing scope or take an argument of its class or a class derived from that.</p><p>If not, the friend cannot be called.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// no f() in this scope</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// useless</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">h</span><span class="hljs-params">(<span class="hljs-type">const</span> X&amp;)</span></span>; <span class="hljs-comment">// can be found through its argument</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-type">const</span> X&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// no f() in scope</span><br>    <span class="hljs-built_in">h</span>(x); <span class="hljs-comment">// X&#x27;s friend h() (X&#x27;s friend h(const X&amp;) can be found through its argument)</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="19-4-2-Friends-and-Members"><a href="#19-4-2-Friends-and-Members" class="headerlink" title="19.4.2 Friends and Members"></a>19.4.2 Friends and Members</h4><ol start="64"><li><p>When should we use a friend function, and when is a member function the better choice for specifying an operation?</p><ul><li>First, we try to minimize the number of functions that access the representation of a class and try to make the set of access function as appropriate as possible.<ul><li>Therefore, the first question is not “Should it be a member, a <code>static</code> member, or a friend?” but rather “Does it really nedd access?”</li></ul></li><li>Typically, the set of functions that need access is smaller that we are willing to believe at first.</li><li>Some operations must be members.<ul><li>For example, constructors, destructors, and virtual functions (section 3.2.3, section 17.2.5)</li><li>But typically there is a choice.</li><li>Because member names are local to the class, a function that requires direct access to the representation should be a member unless there is a specific reason for it to be a nonmember.</li></ul></li></ul><p>Consider a class <code>X</code> supplying alternative ways of presenting an operation:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">X</span>(<span class="hljs-type">int</span>);<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// member\</span><br><span class="hljs-comment">    int m2() const;</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">int</span> <span class="hljs-title">f1</span><span class="hljs-params">(X&amp;)</span></span>; <span class="hljs-comment">// friend, not member (no implicit conversion)</span><br>    <span class="hljs-function">firned <span class="hljs-type">int</span> <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-type">const</span> X&amp;)</span></span>; <br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">int</span> <span class="hljs-title">f3</span><span class="hljs-params">(X)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Member functions can be invoked for objects of their class only; no user-defined conversions are applied to the leftmost operand of a <code>.</code> and <code>-&gt;</code> (but see section 19.2.3). For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-number">99.</span><span class="hljs-built_in">m1</span>(); <span class="hljs-comment">// error: X(99).m1() not tried</span><br>    <span class="hljs-number">99.</span><span class="hljs-built_in">m2</span>(); <span class="hljs-comment">// error: X(99).m2() not tried</span><br>&#125;<br></code></pre></td></tr></table></figure><p>The global function <code>f1()</code> has a similar property because <strong>implicit conversions are not used for non-<code>const</code> reference arguments</strong> (section 7.7).</p><p>However, conversions may be applied to the argument of <code>f2()</code> and <code>f3()</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">h</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">f1</span>(<span class="hljs-number">99</span>); <span class="hljs-comment">// error: f1(X(99)) not tried: non-const X&amp; argument</span><br>    <span class="hljs-built_in">f2</span>(<span class="hljs-number">99</span>); <span class="hljs-comment">// OK: f2(X(99)); const X&amp; argument</span><br>    <span class="hljs-built_in">f3</span>(<span class="hljs-number">99</span>); <span class="hljs-comment">// OK: f3(X(99)); X argument</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="65"><li><p>An operation modifying the state of a class object should therefore be a member or a function taking a non-<code>const</code> reference argument (or a non-<code>const</code> pointer argument).</p><p>Operators that modify an operand (e.g., <code>=</code>, <code>*=</code>, and <code>++</code>) are most naturally defined as members for user-defined types.</p><p>Conversely, if implicit type conversion is desired for all operands of an operation, the function implementing it must be a nonmember function taking a <code>const</code> reference argument or a non-reference argument.</p><ul><li>This is often the case for the functions implementing operators that do not require lvalue operands when applied to fundamental types (e.g., <code>+</code>, <code>-</code>, and <code>||</code>)</li><li>However, such operators often need access to the representations of their operand class.</li><li>Consequently, binary operators are the most common source of friend function.</li></ul></li></ol><ol start="66"><li><p>Unless type conversions are defined, there appears to be no compelling reason to choose a member over a friend taking reference argument, or vice versa.</p><p>In some cases, the programmer may have a preference for one call syntax over another.</p><ul><li>For example, most people seem to prefer the notion <code>m2=inv(m)</code> for producing a inverted <code>Matrix</code> from <code>m</code> to the alternative <code>m2=m.inv()</code>.</li><li>On the other hand, if <code>inv()</code> inverts <code>m</code> itself, rather than producing a new <code>Matrix</code> that is the inverse of <code>m</code>, it should be a member.</li></ul><p>All other things considered equal, implement operations that need direct access to a representation as member function:</p><ul><li><p>It is not possible to know if someone someday will define a conversion operator.</p></li><li><p>The member function call syntax makes it clear to the user that the object may be modified; a reference argument is far less obvious.</p></li><li><p>Expressions in the body of a member can be noticeably shorter than the equivalent expressions in a global function.</p><p>A nonmember function must use an explicit argument, whereas the member can use <code>this</code> implicitly.</p></li><li><p>Member names are local to a class, so they tend to be shorter than the names of nonmember functions.</p></li><li><p>If we have defined a member <code>f()</code> and we later feel the need for a nonmember <code>f()</code>, we can simply define it to mean <code>x.f()</code>.</p></li></ul><p>Conversely, operations that do not need direct access to a representation are often best represented as nonmember functions, possibly in a namespace that makes their relationship with the class explicit (section 18.3.6).</p></li></ol><h3 id="19-5-Advice"><a href="#19-5-Advice" class="headerlink" title="19.5 Advice"></a>19.5 Advice</h3><ul><li>Use <code>operator[]()</code> for subscripting and for selection based on a single value; section 19.2.1.</li><li>User <code>operator()()</code> for call semantices, for subscripting, and for selection based on multiple values; section 19.2.2.</li><li>User <code>operator-&gt;()</code> to dereference “smart pointer”; section 19.2.3.</li><li>Prefer prefix <code>++</code> over suffix <code>++</code>; section 19.2.4</li><li>Define the global <code>operator new()</code> and <code>operator delete()</code> only if you really have to; section 19.2.5.</li><li>Define member <code>operator new()</code> and member <code>operator delete()</code> to control allocation and deallocation of objects of a specific class or hierarchy of classes; section 19.2.5. </li><li>Use user-defined literals to mimic conventional notation; section 19.2.6.</li><li>Place literal operators in separate namespaces to allow selective use; section 19.2.6.</li><li>For nonspecialize uses, prefer the standard <code>string</code> (Chapter 36) to the result of your own exercises; 19.3.</li><li>Use a friend function if you need a nonmember function to have access to the representation of a class. (e.g., to improve notation or to access the representation of two classes); section 19.4</li><li>Prefer member functions to friend functions for granting access to the implementation of a class; section 19.4.2.</li></ul><h2 id="Chapter-20-Derived-Classes"><a href="#Chapter-20-Derived-Classes" class="headerlink" title="Chapter 20. Derived Classes"></a>Chapter 20. Derived Classes</h2><ul><li>Introduction</li><li>Derived Classes<ul><li> Member Functions</li><li>Constructors and Destructors</li></ul></li><li>Class Hierarchies<ul><li>Type Field</li><li>Virtual Functions</li><li>Explicit Qualification</li><li>Override Control</li><li><code>using</code> Base Members</li><li>Return Type Relaxation</li></ul></li><li>Abstract Classes</li><li>Access Control<ul><li><code>protected</code> Members</li><li>Access to Base Classes</li><li><code>using</code>-Declarations and Access Control</li></ul></li><li>Pointers to Members<ul><li>Pointers to Function Members</li><li>Pointers to Data Members</li><li>Base and Derived Members</li></ul></li><li>Advice</li></ul><h3 id="20-1-Introduction"><a href="#20-1-Introduction" class="headerlink" title="20.1 Introduction"></a>20.1 Introduction</h3><ol><li><p>From [Simula](<a href="https://en.wikipedia.org/wiki/Simula">Simula - Wikipedia</a>), C++ borrowed the ideas of classes and class hierarchies.</p><p>In addition, it borrowed the design idea that classes should be used to model concepts in the progrmmer’s and the application’s world.</p><ul><li>C++ provides language constructs that directly support these design notions.</li><li>Conversely, using the language features in support of design ideas distinguishes effective use of C++. Using language constructs as just notional props for traditional types of programming is to miss key strength of C++.</li></ul></li></ol><ol start="2"><li><p>A concept (idea, notion, etc.) does not exist in isolation. </p><p>It coexists with realed concepts and derives much of its power from relationships with other concepts.</p><ul><li>For example, try to explain what a car is. Soon you’ll have introduced the notions of wheels, engines, drivers, pedestrains, trucks, ambulances, roads, oil, sppeding tickets, motels, etc.</li></ul><p>Since we uses classes to represent concepts, the issue becomes how to represent relationships among concepts.</p><p>However, we can’t express arbitrary relationships directly in a programming language.</p><ul><li>Even if we could, we wouldn’t want to.</li><li>To be useful, our classes should be more narrowly defined that our everyday concepts – and more precise.</li></ul></li></ol><ol start="3"><li><p>The notion of a derived class and its associated language mechanisms are provided to express hierachical relationships, that is, to express commonality between classes.</p><ul><li>For example, the concepts of a circle and a triangle are related in that they are both shapes; that is, they have the concept of a shape in common.<ul><li>Thus, we explicitly define class <code>Circle</code> and class <code>Triangle</code> to have class <code>Shape</code> in common.</li><li>In that case, the common class, here <code>Shape</code>, is refered to as the <em><strong>base</strong></em> class or <em><strong>superclasses</strong></em> and classes derived from that, here <code>Circle</code> and <code>Triangle</code>, are refered to as <em><strong>derived</strong></em> classes or <em><strong>subclasses</strong></em>.</li><li>Representing a circle and a triangle in a program without involving the notion of a shape would be to miss something essential.</li></ul></li></ul><p>This chapter is an exploration of the implications of this simple idea, which is the basis for what is commonly called <em><strong>object-oriented programming</strong></em>.</p><p>The language features support building new classes from existing ones:</p><ul><li><em><strong>implementation inheritance</strong></em>: to save implementation effort by sharing facilities provided by a base class.</li><li><em><strong>Interface inheritance</strong></em>: to allow different derived classes to be used interchangeably through the interface provided by a common base class.</li></ul><p>Interface inheritance is often refered to as <em><strong>run-time polymorphism</strong></em> (or <em><strong>dynamic polymorphism</strong></em>).</p><p>In contrast, the uniform use of classes not related by inheritance provided by templates (section 3.4, Chapter 23) is often reffered to as <em><strong>compile-time polymorphism</strong></em> (or <em><strong>static polymorphism</strong></em>).</p></li></ol><ol start="4"><li>The discussion of class hierarchies is organized into three chapters:<ul><li><em><strong>Derived Classes</strong></em> (Chapter 20): <ul><li>This chapter introduces the basic languge features supporting object-oriented programming.</li><li>Base and derived classes, virtual functionsm and access control are covered.</li></ul></li><li><em><strong>Class Hierarchies</strong></em> (Chapter 21):<ul><li>This chapter focuses on the use of base and derived classes to effectively organize code around the notion of class hierarchies.</li><li>Most of this chapter is devoted to discussion of programming techniques, but technical aspects of multiple inheritance (classes with more than one base class) are also covered.</li></ul></li><li><em><strong>Run-time Type Identification</strong></em> (Chapter 22):<ul><li>This chapter describes the techniques for explicitly navigating class hierarchies.</li><li>In particular, the type conversion operations <code>dynamic_cast</code> and <code>static_cast</code> are presented, as is the operation for determining the type of an object given one of its base classes (<code>typeid</code>).</li></ul></li></ul></li></ol><ol start="5"><li><p>A brief introduction to the basic idea of hierarchical organization of types can be found in Chapter 3: base and derived classes (section 3.2.2) and virtual functions (section 3.2.3).</p><p>These chapters (Chapter 20,21,22) examine these fundamental features and their associated programming and design techniques in greater detail.</p></li></ol><h3 id="20-2-Derived-Classes"><a href="#20-2-Derived-Classes" class="headerlink" title="20.2 Derived Classes"></a>20.2 Derived Classes</h3><ol start="6"><li><p>Cosider building a program dealing with people employed by a firm.</p><ul><li><p>Such a program might have a data structure like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Employee</span> &#123;<br>    string first_name, family_name;<br>    <span class="hljs-type">char</span> middle_initial;<br>    Data hiring_date;<br>    <span class="hljs-type">short</span> department;<br>    /<br>&#125;;<br></code></pre></td></tr></table></figure><p>Next, we might try to define a manager:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Manager</span> &#123;<br>    Employee emp; <span class="hljs-comment">// manager&#x27;s empoyee record</span><br>    list&lt;Emplotee*&gt; group; <span class="hljs-comment">// people managed</span><br>    <span class="hljs-type">short</span> level;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>A manager is also an employee; the <code>Employee</code> data is stored in the <code>emp</code> member of a <code>Manager</code> object.</p><ul><li>This may be obvious to a human reader – especially a careful reader – but there is nothing that tells the compiler and other tools that <code>Manager</code> is also an <code>Employee</code>.</li></ul></li><li><p>A <code>Manager*</code> is not an <code>Employee*</code>, so one cannot simply use one where the other is required.</p><ul><li>In particular, one cannot put a <code>Manger</code> onto a list of <code>Employee</code>s without writing special code.</li><li>We could either use explicit type conversion on a <code>Manager*</code> or put the address of the <code>emp</code> member onto a list of <code>employee</code>s.</li><li>However, both solutions are inelegant and can be quite obscure.</li></ul></li><li><p>The correct approach is to explicitly state that a <code>Manager</code> is an <code>Employee</code>, with a few pieces of information added.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Manager</span> : <span class="hljs-keyword">public</span> Employee &#123;<br>    list&lt;Employee*&gt; group;<br>    <span class="hljs-type">short</span> level;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>The <code>Manager</code> is <em><strong>derived</strong></em> from <code>Employee</code>, and conversely, <code>Employee</code> is a <em><strong>base class</strong></em> for <code>Manager</code>.</li><li>The class <code>Manager</code> has the members of class <code>Employee</code> (<code>first_name</code>, <code>department</code>, etc.) in addition to its own members (<code>group</code>, <code>level</code>, etc.).</li></ul></li></ul></li></ul></li></ol><ol start="7"><li><p>Derivation is often represented graphically by a pointer from the derived class to its base class indicating that the derived class refers to its base (rather than other way around):</p><ul><li><img src="D:\obsidian\Louis\计算机专业知识\C++.assets\image-20230129145841357.png" alt="image-20230129145841357"></li></ul><p>A derived class is often said to inherit properties from its base, so the relationship is also called <em><strong>inheritance</strong></em>.</p><p>A base class is sometimes called a <em><strong>superclass</strong></em> and a derived class a <em><strong>subclass</strong></em>. </p><ul><li>This terminology, however, is confusing to people who observe that the data in a derived class object is a superset of the data of an object of its base class.</li></ul><p>A derived class is typically larger (and never smaller) than its base class in the sense that it holds more data and provides more functions.</p></li></ol><h2 id="Chapter-21-Class-Hierarchies"><a href="#Chapter-21-Class-Hierarchies" class="headerlink" title="Chapter 21. Class Hierarchies"></a>Chapter 21. Class Hierarchies</h2><h2 id="Chapter-22-Run-Time-Type-Information"><a href="#Chapter-22-Run-Time-Type-Information" class="headerlink" title="Chapter 22. Run-Time Type Information"></a>Chapter 22. Run-Time Type Information</h2><h2 id="Chapter-23-Templates"><a href="#Chapter-23-Templates" class="headerlink" title="Chapter 23. Templates"></a>Chapter 23. Templates</h2><h2 id="Chapter-24-Generic-Programming"><a href="#Chapter-24-Generic-Programming" class="headerlink" title="Chapter 24. Generic Programming"></a>Chapter 24. Generic Programming</h2><h2 id="Chapter-25-Specialization"><a href="#Chapter-25-Specialization" class="headerlink" title="Chapter 25. Specialization"></a>Chapter 25. Specialization</h2><h2 id="Chapter-26-Instantiation"><a href="#Chapter-26-Instantiation" class="headerlink" title="Chapter 26. Instantiation"></a>Chapter 26. Instantiation</h2><h2 id="Chapter-27-Templates-and-Hierachies"><a href="#Chapter-27-Templates-and-Hierachies" class="headerlink" title="Chapter 27. Templates and Hierachies"></a>Chapter 27. Templates and Hierachies</h2><h2 id="Chapter-28-Metaprogramming"><a href="#Chapter-28-Metaprogramming" class="headerlink" title="Chapter 28. Metaprogramming"></a>Chapter 28. Metaprogramming</h2><h2 id="Chapter-29-A-Matrix-Design"><a href="#Chapter-29-A-Matrix-Design" class="headerlink" title="Chapter 29. A Matrix Design"></a>Chapter 29. A Matrix Design</h2><h1 id="The-C-Programming-Language-Part-Ⅳ-The-Standard-Liberary"><a href="#The-C-Programming-Language-Part-Ⅳ-The-Standard-Liberary" class="headerlink" title="The C++ Programming Language  Part Ⅳ : The Standard Liberary"></a>The C++ Programming Language  Part Ⅳ : The Standard Liberary</h1><h2 id="Chapter-30-Standard-Library-Summary"><a href="#Chapter-30-Standard-Library-Summary" class="headerlink" title="Chapter 30. Standard Library Summary"></a>Chapter 30. Standard Library Summary</h2><h2 id="Chapter-31-STL-container"><a href="#Chapter-31-STL-container" class="headerlink" title="Chapter 31. STL container"></a>Chapter 31. STL container</h2><h2 id="Chapter-32-STL-Algorithms"><a href="#Chapter-32-STL-Algorithms" class="headerlink" title="Chapter 32. STL Algorithms"></a>Chapter 32. STL Algorithms</h2><h2 id="Chapter-33-STL-Iterators"><a href="#Chapter-33-STL-Iterators" class="headerlink" title="Chapter 33. STL Iterators"></a>Chapter 33. STL Iterators</h2><h2 id="Chapter-34-Memory-and-Resources"><a href="#Chapter-34-Memory-and-Resources" class="headerlink" title="Chapter 34. Memory and Resources"></a>Chapter 34. Memory and Resources</h2><h2 id="Chapter-35-Utilities"><a href="#Chapter-35-Utilities" class="headerlink" title="Chapter 35. Utilities"></a>Chapter 35. Utilities</h2><h2 id="Chapter-36-Strings"><a href="#Chapter-36-Strings" class="headerlink" title="Chapter 36. Strings"></a>Chapter 36. Strings</h2><h2 id="Chapter-37-Regular-Expressions"><a href="#Chapter-37-Regular-Expressions" class="headerlink" title="Chapter 37. Regular Expressions"></a>Chapter 37. Regular Expressions</h2><h2 id="Chapter-38-I-O-Streams"><a href="#Chapter-38-I-O-Streams" class="headerlink" title="Chapter 38. I/O Streams"></a>Chapter 38. I/O Streams</h2><h2 id="Chapter-39-Locales"><a href="#Chapter-39-Locales" class="headerlink" title="Chapter 39. Locales"></a>Chapter 39. Locales</h2><h2 id="Chapter-40-Numberics"><a href="#Chapter-40-Numberics" class="headerlink" title="Chapter 40. Numberics"></a>Chapter 40. Numberics</h2><h2 id="Chapter-41-Concurrency"><a href="#Chapter-41-Concurrency" class="headerlink" title="Chapter 41. Concurrency"></a>Chapter 41. Concurrency</h2><h2 id="Chapter-42-Threads-and-Tasks"><a href="#Chapter-42-Threads-and-Tasks" class="headerlink" title="Chapter 42. Threads and Tasks"></a>Chapter 42. Threads and Tasks</h2><h2 id="Chapter-43-The-C-Standard-Library"><a href="#Chapter-43-The-C-Standard-Library" class="headerlink" title="Chapter 43. The C Standard Library"></a>Chapter 43. The C Standard Library</h2><h2 id="Chapter-44-Compatibility"><a href="#Chapter-44-Compatibility" class="headerlink" title="Chapter 44. Compatibility"></a>Chapter 44. Compatibility</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer</title>
    <link href="/2023/01/08/%E5%89%91%E6%8C%87offer/"/>
    <url>/2023/01/08/%E5%89%91%E6%8C%87offer/</url>
    
    <content type="html"><![CDATA[<h1 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a>参考书</h1><p><a href="D:\OneDrive\Books\剑指Offer.pdf">剑指offer</a></p><h1 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h1><ul><li><strong>解题思路</strong>：从右下角往左上角查找，即一定程度的中间位置开始查找。<ul><li>行减一表示当前值减小；</li><li>列加一表示当前值增加；</li><li>不断调整直到找到目标值。</li></ul></li><li><strong>注意点</strong> ：<ul><li>边界条件判断；<ul><li>matrix一维大小需要大于0；二维大小也要大于0。利用一个短路判定。</li><li>从左下往右上，i只会减少，j只会增加。所以只需要判断一侧的边界条件即可。</li></ul></li></ul></li><li>参考代码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix, <span class="hljs-type">int</span> target)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 从右下角往左上角查找，即一定程度的中间位置开始查找。</span><br><br>        <span class="hljs-comment">// 行减一表示当前值减小</span><br><br>        <span class="hljs-comment">// 列加一表示当前值增加</span><br><br>        <span class="hljs-comment">// 不断调整直到找到目标值</span><br><br>        <span class="hljs-type">int</span> n = matrix.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 短路判定</span><br><br>        <span class="hljs-type">int</span> m = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; <span class="hljs-comment">// 左下角坐标</span><br><br>        <span class="hljs-keyword">while</span> (i &gt;=<span class="hljs-number">0</span> &amp;&amp; j &lt; m)&#123;<br><br>            <span class="hljs-keyword">if</span> (matrix[i][j] == target) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[i][j] &gt; target) --i;<br><br>            <span class="hljs-keyword">else</span> ++j;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h1><ul><li>两种思路：</li></ul><ol><li><p>创建新字符串：遍历，发现空格增加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"> <span class="hljs-function">string <span class="hljs-title">replaceSpace</span><span class="hljs-params">(string s)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 思路：遍历原字符串，新建结果字符串</span><br><br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        string result;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s)&#123;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(c)) result += <span class="hljs-string">&quot;%20&quot;</span>;<br><br>            <span class="hljs-keyword">else</span> result += c;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>在原有的内存位置上替换：保证有足够的内存空间，遍历空格确定最终长度，利用双指针替换。</p><ul><li>这里用C++语言实现的时候需要用到string类的 resize(<em>new length</em>)函数，获取扩充长度之后的字符串。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">string <span class="hljs-title">replaceSpace</span><span class="hljs-params">(string s)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 遍历获取空格数量，使用双指针进行替换</span><br><br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-type">int</span> numberOfSpace = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s) <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(c)) ++numberOfSpace;<br><br>        <span class="hljs-type">int</span> p = s.<span class="hljs-built_in">size</span>(), q = p + <span class="hljs-number">2</span> * numberOfSpace; <span class="hljs-comment">// p指向原字符串末尾/0, 从结尾字符串开始</span><br><br>        <span class="hljs-comment">/* 根据空格数量扩充数组大小 */</span><br><br>        s.<span class="hljs-built_in">resize</span>(q);<br><br>        <span class="hljs-keyword">while</span> (p &gt;= <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(s[p])) &#123;<br><br>                s[q--] = <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>                s[q--] = <span class="hljs-string">&#x27;2&#x27;</span>;<br><br>                s[q--] = <span class="hljs-string">&#x27;%&#x27;</span>;<br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span> s[q--] = s[p];<br><br>            --p;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> s;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h1 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a></h1><ul><li>两种思路：需要考虑是否允许修改原链表。</li></ul><ol><li>不允许修改原链表。利用 <strong>栈</strong> 实现，可以显式用自己申请的vector作为栈，或是系统栈（递归）。 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">reversePrint</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; myVector;<br><br>        ListNode* p = head;<br><br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>) &#123;<br><br>            myVector.<span class="hljs-built_in">push_back</span>(p-&gt;val);<br><br>            p = p-&gt;next;<br><br>        &#125;<br><br>        <span class="hljs-built_in">reverse</span>(myVector.<span class="hljs-built_in">begin</span>(), myVector.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 使用reverse() 函数</span><br><br>        <span class="hljs-keyword">return</span> myVector;<br><br>    &#125;<br><br><span class="hljs-comment">// 实现2</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">reversePrint</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;();<br><br> <br><br>        vector&lt;<span class="hljs-type">int</span>&gt; myVector;<br><br>        ListNode* p = head;<br><br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>) &#123;<br><br>            myVector.<span class="hljs-built_in">push_back</span>(p-&gt;val);<br><br>            p = p-&gt;next;<br><br>        &#125;<br><br>        <span class="hljs-comment">// reverse(myVector.begin(), myVector.end());</span><br><span class="hljs-comment">// 不适用reverse，直接返回一个逆序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(myVector.<span class="hljs-built_in">rbegin</span>(), myVector.<span class="hljs-built_in">rend</span>());<br><br>    &#125;<br></code></pre></td></tr></table></figure></li><li>如果允许修改原链表，可以通过双指针就地逆置链表，最后实现遍历达到逆转链表的目的。</li></ol><h1 id="剑指-Offer-07-重建二叉树"><a href="#剑指-Offer-07-重建二叉树" class="headerlink" title="剑指 Offer 07. 重建二叉树"></a><a href="https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/">剑指 Offer 07. 重建二叉树</a></h1><ul><li>解题思路：利用先序序列确定根节点，用根节点和中序序列对序列切割，递归完成构建二叉树的过程。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 利用递归实现</span><br><br>        <span class="hljs-keyword">if</span> (preorder.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> || inorder.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>  <br><br>        TreeNode* currentRoot = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(preorder[<span class="hljs-number">0</span>]);<br><br>        <span class="hljs-type">int</span> rootIndex = <span class="hljs-built_in">distance</span>(inorder.<span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">find</span>(inorder.<span class="hljs-built_in">begin</span>(), inorder.<span class="hljs-built_in">end</span>(), preorder[<span class="hljs-number">0</span>]));<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left_pre</span><span class="hljs-params">(preorder.begin() + <span class="hljs-number">1</span>, preorder.begin() + rootIndex + <span class="hljs-number">1</span>)</span></span>;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">right_pre</span><span class="hljs-params">(preorder.begin() + rootIndex + <span class="hljs-number">1</span>, preorder.end())</span></span>;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left_ino</span><span class="hljs-params">(inorder.begin(), inorder.begin() + rootIndex)</span></span>;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">right_ino</span><span class="hljs-params">(inorder.begin() + rootIndex + <span class="hljs-number">1</span>, inorder.end())</span></span>;<br><br>  <br><br>        currentRoot-&gt;left = <span class="hljs-built_in">buildTree</span>(left_pre, left_ino);<br><br>        currentRoot-&gt;right = <span class="hljs-built_in">buildTree</span>(right_pre, right_ino);<br><br>        <span class="hljs-keyword">return</span> currentRoot;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a></h1></li></ul><p><strong>解题思路</strong> ：利用两个栈来模拟，其中一个栈负责压栈，另外一个负责出栈。</p><ul><li>负责压栈的辅助栈stack1只需要支持压栈操作，不会出现其他的特殊情况。</li><li>负责出栈的辅助栈stack2需要哦考虑到<strong>出栈栈为空的特殊情况</strong> ，需要注意处理。<ul><li>当栈不为空，直接出栈即可；</li><li>当栈为空的时候，需要将辅助栈stack1中的元素倒入，因为栈是先进后出，而队列是先进先出，所以需要将栈stack1的末尾元素压栈到stack2的栈底。保证最后压入的元素，符合队列的后出的特性。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CQueue</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-built_in">CQueue</span>() &#123;<br><br>  <br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br><br>        myStack1.<span class="hljs-built_in">push</span>(value);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (!myStack2.<span class="hljs-built_in">empty</span>()) &#123;<br><br>            <span class="hljs-type">int</span> res = myStack2.<span class="hljs-built_in">top</span>();<br><br>            myStack2.<span class="hljs-built_in">pop</span>();<br><br>            <span class="hljs-keyword">return</span> res;<br><br>        &#125;<br><br>        <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-keyword">while</span> (!myStack1.<span class="hljs-built_in">empty</span>()) &#123;<br><br>                <span class="hljs-type">int</span> temp = myStack1.<span class="hljs-built_in">top</span>();<br><br>                myStack1.<span class="hljs-built_in">pop</span>();<br><br>                myStack2.<span class="hljs-built_in">push</span>(temp);<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!myStack2.<span class="hljs-built_in">empty</span>()) &#123;<br><br>                <span class="hljs-type">int</span> res = myStack2.<span class="hljs-built_in">top</span>();<br><br>                myStack2.<span class="hljs-built_in">pop</span>();<br><br>                <span class="hljs-keyword">return</span> res;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    stack&lt;<span class="hljs-type">int</span>&gt; myStack1, myStack2;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="剑指-Offer-11-旋转数组的最小数字"><a href="#剑指-Offer-11-旋转数组的最小数字" class="headerlink" title="剑指 Offer 11. 旋转数组的最小数字"></a><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">剑指 Offer 11. 旋转数组的最小数字</a></h1><p><strong>解题思路</strong> ：根据题意，旋转之后的数组具有很好的特性，即分为两个子数组，数组下标小的数组为较大值的非降序列，数组下标大的数组为较小值的非降序列。可以通过二分法进行查找，中间位置的元素与最右端元素之间存在三种确定的关系。</p><ul><li>中间位置元素 &lt; 最右端元素。此时说明这两个位置的都属于右端序列，而最小元素应该在中间位置元素的左侧或者就是中间元素。![[Pasted image 20220621103322.png]]</li><li>中间位置元素 &gt; 最右端元素。此时说明这两个位置属于不同的子数组，最小元素在此之间，并且一定在中间位置元素的右侧而不可能是中间位置元素。</li><li>![[Pasted image 20220621103333.png]]</li><li>中间位置元素 == 最右端元素。特殊情况，此时出现了很多重复元素，我们不能确定中间位置元素是位于哪一个子数组，但是可以确定的是最右端元素一定不是我们最终想要的结果，因为一定有一个小于或等于它的元素，位于其左侧。![[Pasted image 20220621103345.png]]<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 找出原本的升序首元素，即为答案</span><br><br>        <span class="hljs-comment">// 使用二分查找的思想</span><br><br>        <span class="hljs-type">int</span> lo = <span class="hljs-number">0</span>, hi = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (lo &lt; hi)&#123;<br><br>            <span class="hljs-type">int</span> mi = (lo + hi) &gt;&gt; <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">if</span> (numbers[mi] &gt; numbers[hi])&#123;<br><br>                <span class="hljs-comment">//中间位置的元素比右端元素大，说明首元素一定在此之间</span><br><br>                lo = mi + <span class="hljs-number">1</span>;<br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[mi] &lt; numbers[hi])&#123;<br><br>                <span class="hljs-comment">//中间位置元素与最右端元素之间一定都是升序的，所以首元素一定在左端</span><br><br>                hi = mi;<br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span>&#123;<br><br>                <span class="hljs-comment">//特殊情况，此时numbers[mi] == numbers[hi],无法判断移动区间方向，缩短右侧</span><br><br>                --hi;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> numbers[lo];<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-10-I-斐波那契数列"><a href="#剑指-Offer-10-I-斐波那契数列" class="headerlink" title="剑指 Offer 10- I. 斐波那契数列"></a><a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/">剑指 Offer 10- I. 斐波那契数列</a></h1></li></ul><p><strong>解题思路</strong> ：非常简单，根据定义，使用迭代法求解。只需要三个临时变量作为滚动数组即可。</p><ul><li>根据定义已知 $f(0) = 0 , f(1) = 1$；</li><li>注意结果需求取模。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> f_pre = <span class="hljs-number">0</span>, f_p = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> f_pre;<br><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> f_p;<br><br>  <br><br>        <span class="hljs-type">int</span> f_n = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><br>            f_n = (f_pre + f_p) % MOD;<br><br>            f_pre = f_p;<br><br>            f_p = f_n;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> f_n;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-10-II-青蛙跳台阶问题"><a href="#剑指-Offer-10-II-青蛙跳台阶问题" class="headerlink" title="剑指 Offer 10- II. 青蛙跳台阶问题"></a><a href="https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">剑指 Offer 10- II. 青蛙跳台阶问题</a></h1></li></ul><p><strong>解题思路</strong> ：与上题基本一样，区别在于初始条件有所区别。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numWays</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 斐波那契</span><br><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> f_pre = <span class="hljs-number">1</span>, f_p = <span class="hljs-number">1</span>, f_n = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><br>            f_n = (f_pre + f_p) % MOD;<br><br>            f_pre = f_p;<br><br>            f_p = f_n;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> f_n;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>拓展</strong> <a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&&tqId=11162&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">JZ71 跳台阶扩展问题</a></p><ul><li>解题思路：第n阶台阶可以从前面的所有n-1阶梯到达，所以有<ul><li>$f(n) = \Sigma_{i=0}^{i = n-1}f(i)$ ;</li><li>$f(0) = 1， f(1) = 1$;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jumpFloorII</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> </span>&#123;<br>        <span class="hljs-comment">// 累加就行，因为第n阶台阶可以从前面的(n-1)台阶都可以到达</span><br>        <span class="hljs-comment">// f(n) = 2 * f(n-1)</span><br>        <span class="hljs-keyword">if</span> (number == <span class="hljs-number">0</span> || number == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> f_pre = <span class="hljs-number">1</span>, f_p = <span class="hljs-number">1</span>, f_n = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= number; ++i) &#123;<br>            f_n *= <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f_n;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>拓展<a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&&tqId=11163&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">JZ70 矩形覆盖</a></li></ul></li><li>解题思路：$2 \times n$ 的矩阵，由 $2 \times 1$ 的小矩阵覆盖。可以简化为两种情况。![[Pasted image 20220621170241.png]]</li><li>$f(n) = f(n -1) + f(n - 2)$</li><li>采用类似的迭代思路求解。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rectCover</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> </span>&#123;<br>        <span class="hljs-comment">// f(n) = f(n-1) + f(n-2)</span><br>        <span class="hljs-comment">// f(0) = 0, f(1) = 1;</span><br>        <span class="hljs-keyword">if</span> (number == <span class="hljs-number">0</span> || number == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> number;<br>        <span class="hljs-type">int</span> f_pre = <span class="hljs-number">1</span>, f_p = <span class="hljs-number">1</span>, f_n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= number; ++i) &#123;<br>            f_n = f_pre + f_p;<br>            f_pre = f_p;<br>            f_p = f_n;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f_n;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-15-二进制中1的个数"><a href="#剑指-Offer-15-二进制中1的个数" class="headerlink" title="剑指 Offer 15. 二进制中1的个数"></a><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">剑指 Offer 15. 二进制中1的个数</a></h1><p><strong>解题思路</strong> ：</p><ol><li>可以通过不断移位，末尾使用掩码0x1来不断累加。对数时间复杂度。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> n)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mask = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (mask != <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (n &amp; mask) ++ans;<br><br>            mask = mask &lt;&lt; <span class="hljs-number">1</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>可以进一步改进。n &amp; (n - 1) 的结果，等价于将原数 n 的二进制形式中的最右端的 1 变为 0 。时间复杂度为二进制 1 个数的线性时间复杂度。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> n)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br><br>            n = n &amp; (n - <span class="hljs-number">1</span>);<br><br>            ++cnt;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> cnt;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h1 id="剑指-Offer-16-数值的整数次方"><a href="#剑指-Offer-16-数值的整数次方" class="headerlink" title="剑指 Offer 16. 数值的整数次方"></a><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">剑指 Offer 16. 数值的整数次方</a></h1><p><strong>解题思路</strong> ：注意 n 的取值范围，n 可以为负数。</p><ul><li>利用快速指数幂方法快速求解幂。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 注意 n 的取值范围</span><br><br>        <span class="hljs-type">long</span> N = n;<br><br>        <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">fastExponential</span>(x, N) : <span class="hljs-number">1.0</span> / <span class="hljs-built_in">fastExponential</span>(x, -N);<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">fastExponential</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">long</span> n)</span></span>&#123;<br><br>        <span class="hljs-comment">// 计算 x的n次幂，n为正整数</span><br><br>        <span class="hljs-comment">// 快速指数幂方法</span><br><br>        <span class="hljs-type">double</span> result = <span class="hljs-number">1.0</span>;<br><br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) result *= x;<br><br>            x *= x;<br><br>            n &gt;&gt;= <span class="hljs-number">1</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面"><a href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑指 Offer 21. 调整数组顺序使奇数位于偶数前面"></a><a href="https://leetcode.cn/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</a></h1><p><strong>解题思路</strong> ：利用双指针，一个从前往后，一个从后往前。前指针找到第一个偶数准备后放，后指针找到一个奇数准备前放。</p><ul><li>注意边界条件</li><li>数组大小小于等于1的时候不用操作，直接返回<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">exchange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 双指针</span><br><br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums;<br><br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, q = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (p &lt; q) &#123;<br><br>            <span class="hljs-keyword">while</span> (nums[p] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &amp;&amp; p &lt; q) ++p;<br><br>            <span class="hljs-keyword">while</span> (nums[q] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; p &lt; q) --q;<br><br>            <span class="hljs-built_in">swap</span>(nums[p], nums[q]);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> nums;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-22-链表中倒数第k个节点"><a href="#剑指-Offer-22-链表中倒数第k个节点" class="headerlink" title="剑指 Offer 22. 链表中倒数第k个节点"></a><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指 Offer 22. 链表中倒数第k个节点</a></h1><p><strong>解题思路</strong> ：经典的双指针问题，需要特别注意边界条件的考虑：</p><ul><li>如果头指针为空，k $\leq$ 0的情况，都直接返回空指针；</li><li>k的值大于链表的长度，需要特别注意前指针移动；间隔 k - 1步；</li><li>同步移动两个指针直达前指针到达结尾。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">ListNode* <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 典型的双指针</span><br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span> || k &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>        ListNode* p = head, *q = p;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; ++i) &#123;<br><br>            <span class="hljs-keyword">if</span> (q-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br><br>                q = q-&gt;next;<br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (q-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;  <span class="hljs-comment">// q 指向末尾非空结点为终止条件</span><br><br>            p = p-&gt;next;<br><br>            q = q-&gt;next;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> p;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a><a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表</a></h1></li></ul><p><strong>解题思路</strong> ：双指针问题，额外利用一个辅助指针。将链表视为两部分，前面的已经是完成逆转的，后面的是待逆转的。</p><ul><li>特殊情况判定，如果链表为空，或者链表中只有一个元素，都可以直接返回头指针；</li><li><strong>特别注意原头节点为结果链表的末尾结点，需要将其next指针置为空</strong></li><li>借用辅助指针记录后面的位置，完成不断反转链表。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 双指针</span><br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span> || head-&gt;next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> head;<br><br>  <br><br>        ListNode* p = head, *q = head-&gt;next;<br><br>        p-&gt;next = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">//结果结点的末尾结点的next置为空</span><br><br>        <span class="hljs-keyword">while</span> (q != <span class="hljs-literal">nullptr</span>) &#123;<br><br>            ListNode *temp = q-&gt;next;<br><br>            q-&gt;next = p;<br><br>            p = q;<br><br>            q = temp;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> p;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-25-合并两个排序的链表"><a href="#剑指-Offer-25-合并两个排序的链表" class="headerlink" title="剑指 Offer 25. 合并两个排序的链表"></a><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">剑指 Offer 25. 合并两个排序的链表</a></h1></li></ul><p><strong>解题思路</strong> ：减而治之，采用递归或迭代的方法，不断将链表合并的问题规模变小。</p><ul><li><p>递归法</p><ul><li>两个链表的头节点相比，较小的作为最终结果加入；</li><li>进一步将问题规模减小1<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 递归版</span><br><br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> l2;<br><br>        <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> l1;<br><br>  <br><br>        ListNode* currentNode = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;<br><br>            currentNode = l1;<br><br>            l1 = l1-&gt;next;<br><br>        &#125;<br><br>        <span class="hljs-keyword">else</span> &#123;<br><br>            currentNode = l2;<br><br>            l2 = l2-&gt;next;<br><br>        &#125;<br><br>        currentNode-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2);<br><br>        <span class="hljs-keyword">return</span> currentNode;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>迭代法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 迭代版本</span><br><br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> l2;<br><br>        <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> l1;<br><br>  <br><br>        <span class="hljs-comment">// 两个指针都不为空的时候</span><br><br>        ListNode* head = <span class="hljs-literal">nullptr</span>, *tail = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;<br><br>            head = l1;<br><br>            l1 = l1-&gt;next;<br><br>        &#125;<br><br>        <span class="hljs-keyword">else</span> &#123;<br><br>            head = l2;<br><br>            l2 = l2-&gt;next;<br><br>        &#125; <span class="hljs-comment">// 确定头节点</span><br><br>        tail = head; <span class="hljs-comment">// 尾插法</span><br><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">nullptr</span> &amp;&amp; l2 != <span class="hljs-literal">nullptr</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;<br><br>                tail-&gt;next = l1;<br><br>                l1 = l1-&gt;next;<br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span> &#123;<br><br>                tail-&gt;next = l2;<br><br>                l2 = l2-&gt;next;<br><br>            &#125;<br><br>            tail = tail-&gt;next;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">nullptr</span>) tail-&gt;next = l1;<br><br>        <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">nullptr</span>) tail-&gt;next = l2;<br><br>        <span class="hljs-keyword">return</span> head;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-26-树的子结构"><a href="#剑指-Offer-26-树的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构"></a><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></h1><p><strong>解题思路</strong> ：需要判断树A是否包含树B的这个子结构。所以需要对于A进行遍历，但是A遍历的过程中，如果遇到了与B树根节点相同的结点，则可能是树B子结构，所以需要进一步判断。</p><ul><li>树A结点与树B根节点相同，可能是，需要进一步判断。</li><li>判断过程中，需要注意，A的子结构可能比B树更大，所以有子结构的情况，一定是B树遍历完成了；而失败的情况一定是树A子结构中结点与B中不同，或者是A中直接没有对应的结点。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSubStructure</span><span class="hljs-params">(TreeNode* A, TreeNode* B)</span> </span>&#123;<br><br>        <span class="hljs-type">bool</span> result = <span class="hljs-literal">false</span>;<br><br>  <br><br>        <span class="hljs-keyword">if</span> (A != <span class="hljs-literal">nullptr</span> &amp;&amp; B != <span class="hljs-literal">nullptr</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (A-&gt;val == B-&gt;val) &#123;<br><br>                result = <span class="hljs-built_in">DoesTree1HaveTree2</span>(A, B); <span class="hljs-comment">// 进一步判断</span><br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">false</span>) &#123;<br><br>                result = <span class="hljs-built_in">isSubStructure</span>(A-&gt;left, B);<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">false</span>) &#123;<br><br>                result = <span class="hljs-built_in">isSubStructure</span>(A-&gt;right, B);<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DoesTree1HaveTree2</span><span class="hljs-params">(TreeNode* T1, TreeNode* T2)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (T2 == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> (T1 == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>  <br><br>        <span class="hljs-keyword">if</span> (T1-&gt;val != T2-&gt;val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DoesTree1HaveTree2</span>(T1-&gt;left, T2-&gt;left) &amp;&amp; <span class="hljs-built_in">DoesTree1HaveTree2</span>(T1-&gt;right, T2-&gt;right);<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-27-二叉树的镜像"><a href="#剑指-Offer-27-二叉树的镜像" class="headerlink" title="剑指 Offer 27. 二叉树的镜像"></a><a href="https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/">剑指 Offer 27. 二叉树的镜像</a></h1></li></ul><p><strong>解题思路</strong> ：二叉树的镜像，等价于自上向下，将根的两个左右孩子结点交换位置，不断向下，直达空结点（叶子结点的孩子）。</p><ul><li><p>递归版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">mirrorTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        <br><span class="hljs-comment">// 交换左右孩子</span><br>        TreeNode* temp = root-&gt;left;<br><br>        root-&gt;left = root-&gt;right;<br><br>        root-&gt;right = temp;<br><br><br><span class="hljs-comment">// 对子树递归镜像处理</span><br>        <span class="hljs-built_in">mirrorTree</span>(root-&gt;left);<br><br>        <span class="hljs-built_in">mirrorTree</span>(root-&gt;right);<br><br>        <span class="hljs-keyword">return</span> root;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>迭代版本，利用队列层次遍历，逐个结点处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">mirrorTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 迭代版本，利用队列进行层次遍历，对每个结点的左右孩子交换</span><br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>  <br><br>        queue&lt;TreeNode*&gt; myQueue;<br><br>        myQueue.<span class="hljs-built_in">push</span>(root);<br><br>        <span class="hljs-keyword">while</span> (!myQueue.<span class="hljs-built_in">empty</span>()) &#123;<br><br>            TreeNode* currentNode = myQueue.<span class="hljs-built_in">front</span>();<br><br>            myQueue.<span class="hljs-built_in">pop</span>();<br><br>            <span class="hljs-keyword">if</span> (currentNode != <span class="hljs-literal">nullptr</span>) &#123;<br><br>                myQueue.<span class="hljs-built_in">push</span>(currentNode-&gt;left);<br><br>                myQueue.<span class="hljs-built_in">push</span>(currentNode-&gt;right);<br><br>                <span class="hljs-built_in">swap</span>(currentNode-&gt;left, currentNode-&gt;right);<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> root;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-29-顺时针打印矩阵"><a href="#剑指-Offer-29-顺时针打印矩阵" class="headerlink" title="剑指 Offer 29. 顺时针打印矩阵"></a><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指 Offer 29. 顺时针打印矩阵</a></h1></li></ul><p><strong>解题思路</strong> ：模拟打印过程，用四个位置的边界条件确定矩阵。</p><ul><li>![[Pasted image 20220623203112.png]]<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 模拟</span><br><br>        <span class="hljs-keyword">if</span> (matrix.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> &#123;&#125;;<br><br>  <br><br>        <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>, bottom = matrix.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, left = <span class="hljs-number">0</span>, right = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>        <span class="hljs-keyword">while</span> (top &lt;= bottom &amp;&amp; left &lt;= right) &#123;<br><br>            <span class="hljs-comment">// 输出 [(top,left), (top, right)]</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> col = left; col &lt;= right; ++col) result.<span class="hljs-built_in">push_back</span>(matrix[top][col]);<br><br>            <span class="hljs-comment">// 输出 [(top+1, right), (bottom, right)]</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> row = top + <span class="hljs-number">1</span>; row &lt;= bottom; ++row) result.<span class="hljs-built_in">push_back</span>(matrix[row][right]);<br><br>            <span class="hljs-comment">// 根据情况判断是否存在, </span><br><br>            <span class="hljs-comment">// [(bottom, left + 1), (bottom, right - 1)]和[(bottom, left), (top - 1, left)]</span><br><br>            <span class="hljs-keyword">if</span> (left &lt; right &amp;&amp; top &lt; bottom) &#123;<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> col = right - <span class="hljs-number">1</span>; col &gt; left; --col) result.<span class="hljs-built_in">push_back</span>(matrix[bottom][col]);<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> row = bottom; row &gt; top; --row) result.<span class="hljs-built_in">push_back</span>(matrix[row][left]);<br><br>            &#125;<br><br>            <span class="hljs-comment">// 打印完一圈，更新边界条件</span><br><br>            ++top;<br><br>            --bottom;<br><br>            ++left;<br><br>            --right;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>  <br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-30-包含min函数的栈"><a href="#剑指-Offer-30-包含min函数的栈" class="headerlink" title="剑指 Offer 30. 包含min函数的栈"></a><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a></h1></li></ul><p><strong>解题思路</strong> ：需要实时地不断更新当前栈中地最小值并且保存起来，才能实现 $O(1)$ 的min()。所以有两种思路，采用额外的辅助栈，或者是每次压栈或出栈都是当前值加上一个当前最小值一起操作。下面给出后者想法的实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br><br>    <span class="hljs-built_in">MinStack</span>() &#123;<br><br>  <br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><br>        myStack.<span class="hljs-built_in">push</span>(minValue);<br><br>        minValue = x &lt; minValue ? x : minValue;<br><br>        myStack.<span class="hljs-built_in">push</span>(x);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (!myStack.<span class="hljs-built_in">empty</span>()) &#123;<br><br>            myStack.<span class="hljs-built_in">pop</span>();<br><br>            minValue = myStack.<span class="hljs-built_in">top</span>();<br><br>            myStack.<span class="hljs-built_in">pop</span>();<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> myStack.<span class="hljs-built_in">top</span>();<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> minValue;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    stack&lt;<span class="hljs-type">int</span>&gt; myStack;<br><br>    <span class="hljs-type">int</span> minValue = INT_MAX; <span class="hljs-comment">// 保存的是当前位置到栈底的最小值</span><br><br>&#125;;<br><br>  <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Your MinStack object will be instantiated and called as such:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * MinStack* obj = new MinStack();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * obj-&gt;push(x);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * obj-&gt;pop();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * int param_3 = obj-&gt;top();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * int param_4 = obj-&gt;min();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-31-栈的压入、弹出序列"><a href="#剑指-Offer-31-栈的压入、弹出序列" class="headerlink" title="剑指 Offer 31. 栈的压入、弹出序列"></a><a href="https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">剑指 Offer 31. 栈的压入、弹出序列</a></h1><p><strong>解题思路</strong> ：直观的想法就是利用一个栈直接进行模拟。</p><ul><li>当栈顶元素刚好与当前想要的出栈序列的index元素相同的时候，就可以出栈，并且index加一，期待下一个出栈序列元素。需要保证栈不为空。</li><li>最终如果栈刚好为空，则说明完美匹配出栈序列，是合法的弹出序列。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">validateStackSequences</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; pushed, vector&lt;<span class="hljs-type">int</span>&gt;&amp; popped)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 根据出栈序列模拟压栈</span><br><br>        stack&lt;<span class="hljs-type">int</span>&gt; myStack;<br><br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录目前模拟已经出栈的元素位置</span><br><br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> num : pushed) &#123;<br><br>            myStack.<span class="hljs-built_in">push</span>(num);<br><br>            <span class="hljs-keyword">while</span> (!myStack.<span class="hljs-built_in">empty</span>() &amp;&amp; myStack.<span class="hljs-built_in">top</span>() == popped[index]) &#123;<br><br>                myStack.<span class="hljs-built_in">pop</span>();<br><br>                ++index;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> myStack.<span class="hljs-built_in">empty</span>();<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-32-I-从上到下打印二叉树"><a href="#剑指-Offer-32-I-从上到下打印二叉树" class="headerlink" title="剑指 Offer 32 - I. 从上到下打印二叉树"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">剑指 Offer 32 - I. 从上到下打印二叉树</a></h1><p><strong>解题思路</strong> ：就是要求层次遍历，利用一个队列实现即可。</p><ul><li>边界条件，root不为空。</li><li>队列不为空就一直循环，出队元素，再压入其不为空的孩子。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">levelOrder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 树的层次遍历</span><br><br>        queue&lt;TreeNode *&gt; myQueue;<br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> &#123;&#125;;<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>        myQueue.<span class="hljs-built_in">push</span>(root);<br><br>        <span class="hljs-keyword">while</span> (!myQueue.<span class="hljs-built_in">empty</span>()) &#123;<br><br>            TreeNode* currentNode = myQueue.<span class="hljs-built_in">front</span>();<br><br>            myQueue.<span class="hljs-built_in">pop</span>();<br><br>            result.<span class="hljs-built_in">push_back</span>(currentNode-&gt;val);<br><br>  <br><br>            <span class="hljs-keyword">if</span> (currentNode-&gt;left != <span class="hljs-literal">nullptr</span>) &#123;<br><br>                myQueue.<span class="hljs-built_in">push</span>(currentNode-&gt;left);<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (currentNode-&gt;right != <span class="hljs-literal">nullptr</span>) &#123;<br><br>                myQueue.<span class="hljs-built_in">push</span>(currentNode-&gt;right);<br><br>            &#125;<br><br>        &#125; <br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="剑指-Offer-32-II-从上到下打印二叉树-II"><a href="#剑指-Offer-32-II-从上到下打印二叉树-II" class="headerlink" title="剑指 Offer 32 - II. 从上到下打印二叉树 II"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></h2></li></ul><p><strong>解题思路</strong> ：上面问题的一个变体，关键在于对于一层的处理之前，我们先记录该层有多少个需要出队的元素。</p><ul><li>利用一个循环控制出队元素个数；</li><li>一层的元素出队完成之后，作为一个子向量压入到结果向量中去。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">levelOrder</span>(TreeNode* root) &#123;<br><br>        <span class="hljs-comment">// 层次遍历的遍历，可以记录每一层的个数</span><br><br>        <span class="hljs-comment">// 队列遵循先入先出，所以当前层的元素就是前num个元素</span><br><br>        queue&lt;TreeNode *&gt; myQueue;<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br><br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">nullptr</span>) myQueue.<span class="hljs-built_in">push</span>(root);<br><br>        <span class="hljs-keyword">while</span> (!myQueue.<span class="hljs-built_in">empty</span>()) &#123;<br><br>            <span class="hljs-type">int</span> num = myQueue.<span class="hljs-built_in">size</span>();<br><br>            vector&lt;<span class="hljs-type">int</span>&gt; currentLayer;<br><br>            <span class="hljs-keyword">while</span> (num--) &#123;<br><br>                TreeNode *currentNode = myQueue.<span class="hljs-built_in">front</span>();<br><br>                myQueue.<span class="hljs-built_in">pop</span>();<br><br>  <br><br>                currentLayer.<span class="hljs-built_in">push_back</span>(currentNode-&gt;val);<br><br>                <span class="hljs-keyword">if</span> (currentNode-&gt;left != <span class="hljs-literal">nullptr</span>) myQueue.<span class="hljs-built_in">push</span>(currentNode-&gt;left);<br><br>                <span class="hljs-keyword">if</span> (currentNode-&gt;right != <span class="hljs-literal">nullptr</span>) myQueue.<span class="hljs-built_in">push</span>(currentNode-&gt;right);<br><br>            &#125;<br><br>            result.<span class="hljs-built_in">push_back</span>(currentLayer);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="剑指-Offer-32-III-从上到下打印二叉树-III"><a href="#剑指-Offer-32-III-从上到下打印二叉树-III" class="headerlink" title="剑指 Offer 32 - III. 从上到下打印二叉树 III"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></h2><p><strong>解题思路</strong> ：上述问题的进一步变体，唯一的区别在于需要不断改变子向量的顺序。</p><ul><li>利用一个reverseFlag来决定是否逆转当前层子向量</li><li>完成一层子向量压入之后，reversFlag取反<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">levelOrder</span>(TreeNode* root) &#123;<br><br>        <span class="hljs-comment">// 继续变体，可以利用一个reverseFlag来记录当前是否应该反转</span><br><br>        <span class="hljs-comment">// 只需要再将结果子向量压入结果向量之前逆转以下即可</span><br><br>        queue&lt;TreeNode *&gt; myQueue;<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br><br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">nullptr</span>) myQueue.<span class="hljs-built_in">push</span>(root);<br><br>        <span class="hljs-type">bool</span> reverseFlag = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">while</span> (!myQueue.<span class="hljs-built_in">empty</span>()) &#123;<br><br>            <span class="hljs-type">int</span> num = myQueue.<span class="hljs-built_in">size</span>();<br><br>            vector&lt;<span class="hljs-type">int</span>&gt; currentLayer;<br><br>            <span class="hljs-keyword">while</span> (num--) &#123;<br><br>                TreeNode *currentNode = myQueue.<span class="hljs-built_in">front</span>();<br><br>                myQueue.<span class="hljs-built_in">pop</span>();<br><br>                currentLayer.<span class="hljs-built_in">push_back</span>(currentNode-&gt;val);<br><br>                <span class="hljs-keyword">if</span> (currentNode-&gt;left != <span class="hljs-literal">nullptr</span>) myQueue.<span class="hljs-built_in">push</span>(currentNode-&gt;left);<br><br>                <span class="hljs-keyword">if</span> (currentNode-&gt;right != <span class="hljs-literal">nullptr</span>) myQueue.<span class="hljs-built_in">push</span>(currentNode-&gt;right);<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (reverseFlag == <span class="hljs-literal">true</span>) <span class="hljs-built_in">reverse</span>(currentLayer.<span class="hljs-built_in">begin</span>(), currentLayer.<span class="hljs-built_in">end</span>());<br><br>            reverseFlag = !reverseFlag;<br><br>            result.<span class="hljs-built_in">push_back</span>(currentLayer);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-33-二叉搜索树的后序遍历序列"><a href="#剑指-Offer-33-二叉搜索树的后序遍历序列" class="headerlink" title="剑指 Offer 33. 二叉搜索树的后序遍历序列"></a><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/">剑指 Offer 33. 二叉搜索树的后序遍历序列</a></h1><p><strong>解题思路</strong> ：以查错的方式进行验证是否是合法的后序遍历序列。</p><ul><li>注意这里是二叉搜索树，需要满足 左子树 &lt; 根节点 &lt; 右子树</li><li>根据二叉搜索树的这个性质进行递归验证子树</li><li>根节点就是序列的最后一个元素</li><li>根据根节点可以将序列划分成三部分：左子树得呃后序序列、右子树的后序序列、根节点。当然划分也需要满足二叉搜索树的性质，这也是排除该序列为后序序列的依据。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">verifyPostorder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; postorder)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DivideAndConquer</span>(postorder, <span class="hljs-number">0</span>, postorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DivideAndConquer</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; postorder, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 闭区间 [start, end]</span><br><br>        <span class="hljs-keyword">if</span> (start &gt;= end) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 解题关键在于找错，是否存在违反二叉搜索树定义的点，递归到此说明都是合法的</span><br><br>        <span class="hljs-comment">// 二叉搜索树的特点，左子树 &lt; 根节点 &lt; 右子树</span><br><br>        <span class="hljs-comment">// 根节点postorder[end]</span><br><br>        <span class="hljs-type">int</span> index = start, root = postorder[end];<br><br>        <span class="hljs-keyword">while</span> (postorder[index] &lt; root) ++index;<br><br>        <span class="hljs-type">int</span> middle = index;<br><br>        <span class="hljs-keyword">while</span> (postorder[index] &gt; root) ++index;<br><br>        <span class="hljs-type">int</span> high = index; <br><br>        <span class="hljs-comment">// 需要保证两个子树序列都是合法的，即左子树都小于根，右子树都大于根</span><br><br>        <span class="hljs-comment">// index应该指向end位置才对</span><br><br>        <span class="hljs-keyword">return</span> (high == end) &amp;&amp; <span class="hljs-built_in">DivideAndConquer</span>(postorder, start, middle - <span class="hljs-number">1</span>) &amp;&amp; <span class="hljs-built_in">DivideAndConquer</span>(postorder, middle, high - <span class="hljs-number">1</span>);<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-34-二叉树中和为某一值的路径"><a href="#剑指-Offer-34-二叉树中和为某一值的路径" class="headerlink" title="剑指 Offer 34. 二叉树中和为某一值的路径"></a><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指 Offer 34. 二叉树中和为某一值的路径</a></h1></li></ul><p><strong>解题思路</strong> ：先序遍历，要找的是从根节点到叶子节点的路径。递归，直到叶子结点，不断去凑target。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">pathSum</span>(TreeNode* root, <span class="hljs-type">int</span> target) &#123;<br><br>        <span class="hljs-built_in">findPath</span>(root, target);<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findPath</span><span class="hljs-params">(TreeNode *root, <span class="hljs-type">int</span> target)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">// 处理根节点，判断是否是符合条件的路径</span><br>        path.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br><br>        target -= root-&gt;val;<br><br>        <span class="hljs-type">bool</span> isLeaf = root-&gt;left == <span class="hljs-literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">if</span> (target == <span class="hljs-number">0</span> &amp;&amp; isLeaf) &#123;<br><br>            result.<span class="hljs-built_in">push_back</span>(path);<br><br>        &#125;<br><br><span class="hljs-comment">//递归左右子树</span><br>        <span class="hljs-built_in">findPath</span>(root-&gt;left, target); <br><br>        <span class="hljs-built_in">findPath</span>(root-&gt;right, target);<br><br><span class="hljs-comment">// 当前root结点左右子树执行完成，弹出作为路径。</span><br>        path.<span class="hljs-built_in">pop_back</span>();<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-35-复杂链表的复制"><a href="#剑指-Offer-35-复杂链表的复制" class="headerlink" title="剑指 Offer 35. 复杂链表的复制"></a><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/">剑指 Offer 35. 复杂链表的复制</a></h1><p><strong>解题思路</strong> ：采用递归思路，用一个私有的无序映射，记录当前已经复制的原链表结点与复制后的结点的对应关系。</p><ul><li>如果头节点为空，链表为空，直接返回</li><li>头节点不为空，查询无序映射，确定待复制的当前的head所指的结点是否已经创建过。如果没有则进行创建，并且记录在映射中，然后递归复制next和random子链表。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// Definition for a Node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">class Node &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">public:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node* next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node* random;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node(int _val) &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        next = NULL;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        random = NULL;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">Node* <span class="hljs-title">copyRandomList</span><span class="hljs-params">(Node* head)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">if</span> (!nodeCache.<span class="hljs-built_in">count</span>(head)) &#123; <span class="hljs-comment">// 当前head结点未被复制创建，下面创建。</span><br><br>            Node *currentNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(head-&gt;val);<br><br>            nodeCache[head] = currentNode;<br><br>            currentNode-&gt;next = <span class="hljs-built_in">copyRandomList</span>(head-&gt;next);<br><br>            currentNode-&gt;random = <span class="hljs-built_in">copyRandomList</span>(head-&gt;random);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> nodeCache[head];<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    unordered_map&lt;Node*, Node*&gt; nodeCache; <span class="hljs-comment">// 存拷贝之后的结点指针与结点的对应关系</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-36-二叉搜索树与双向链表"><a href="#剑指-Offer-36-二叉搜索树与双向链表" class="headerlink" title="剑指 Offer 36. 二叉搜索树与双向链表"></a><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/">剑指 Offer 36. 二叉搜索树与双向链表</a></h1></li></ul><p><strong>解题思路</strong> ：利用二叉搜索树的特性，中序遍历的结果是有序的。</p><ul><li>构建双向链表，利用两个指针，一个currentTail，指向当前已经完成的双向链表最右端的结点。一个head结点，作为整个链表的头节点，只会有一个头节点，就是二叉搜索最左端结点。</li><li>中序遍历进行处理。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// Definition for a Node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">class Node &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">public:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node* left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node* right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node() &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node(int _val) &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        left = NULL;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        right = NULL;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node(int _val, Node* _left, Node* _right) &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        left = _left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        right = _right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">Node* <span class="hljs-title">treeToDoublyList</span><span class="hljs-params">(Node* root)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 二叉搜索树的中序遍历就是有序的</span><br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-built_in">tree22List</span>(root); <span class="hljs-comment">// 处理完成获得的是一个双向链表，头尾指针需要单独处理。</span><br><br>        head-&gt;left = currentTail;<br><br>        currentTail-&gt;right = head;<br><br>        <span class="hljs-keyword">return</span> head;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    Node *currentTail = <span class="hljs-literal">nullptr</span>, *head = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tree22List</span><span class="hljs-params">(Node *currentNode)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (currentNode == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><br>  <br><br>        <span class="hljs-built_in">tree22List</span>(currentNode-&gt;left); <span class="hljs-comment">// 处理左子树</span><br><br>        <span class="hljs-keyword">if</span> (currentTail != <span class="hljs-literal">nullptr</span>) currentTail-&gt;right = currentNode; <span class="hljs-comment">//连接原有链表和当前结点</span><br><br>        <span class="hljs-keyword">else</span> head = currentNode; <span class="hljs-comment">// 头节点</span><br><br>        currentNode-&gt;left = currentTail; <span class="hljs-comment">// 当前结点反向连接原链表</span><br><br>        currentTail = currentNode; <span class="hljs-comment">// 更新currentTail</span><br><br>        <span class="hljs-built_in">tree22List</span>(currentNode-&gt;right); <span class="hljs-comment">// 处理右子树</span><br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-38-字符串的排列"><a href="#剑指-Offer-38-字符串的排列" class="headerlink" title="剑指 Offer 38. 字符串的排列"></a><a href="https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/">剑指 Offer 38. 字符串的排列</a></h1></li></ul><p><strong>解题思路</strong> ：根据字符串，生成其字典序的所有排列。</p><ul><li>nextPermutation函数<ul><li>每次先从序列倒数第二的位置往左开始找顺序的位置，s[index] &lt; s[index + 1]。注意边界条件判断，如果没有，则说明已经找完了所有的排列，返回错误。</li><li>再从末尾往左找第一个大于s[index] 的数，s[index] &lt; s[j]。</li><li>找到之后替换两个位置。</li><li>将末尾的所有元素逆转，因为一轮nextPermutation之后，余下的这部分元素是降序排列的。</li></ul></li><li>初始化为顺序的字符串，压入结果向量中，然后根据nextPermuation不断压入新的排列，直到所有的排列都完成。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">permutation</span><span class="hljs-params">(string s)</span> </span>&#123;<br><br>        vector&lt;string&gt; result;<br><br>        <span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-keyword">do</span> &#123;<br><br>            result.<span class="hljs-built_in">push_back</span>(s);<br><br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">nextPermutation</span>(s));<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">nextPermutation</span><span class="hljs-params">(string&amp; s)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> index = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>; <span class="hljs-comment">// index后面至少还有一个j的位置。</span><br><br>        <span class="hljs-keyword">while</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; s[index] &gt;= s[index + <span class="hljs-number">1</span>]) --index; <span class="hljs-comment">// 找到从右往左第一个s[index] &lt; s[index+1]位置</span><br><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 不存在index，说明已经是最大的排列了，没有nextPermutation</span><br><br>        <span class="hljs-type">int</span> j = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[index] &gt;= s[j]) --j;<br><br>        <span class="hljs-built_in">swap</span>(s[index], s[j]);<br><br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>() + index + <span class="hljs-number">1</span>, s.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-39-数组中出现次数超过一半的数字"><a href="#剑指-Offer-39-数组中出现次数超过一半的数字" class="headerlink" title="剑指 Offer 39. 数组中出现次数超过一半的数字"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">剑指 Offer 39. 数组中出现次数超过一半的数字</a></h1></li></ul><p><strong>解题思路</strong> ：摩尔投票法，数组中有一个数字出现的次数超过数组长度的一半，也就是说它出现的次数比其他所有数字出现次数的和还要多。</p><ul><li>前提条件：存在这样的数字</li><li>用一个候选者，作为可能的目标</li><li>一个计数器，决定是否更换候选者</li><li>考虑容错，如果不存在这样的超过一半的元素，需要特别考虑，检查最终的结果。</li></ul><p><strong>还可以使用快速排序的思路来做</strong> ：出现次数超过一半，一定是统计意义上的中位数，通过不断随机选择元素并调整，一旦找到最终位置为中间位置的元素，就是目标元素。也需要容错检查。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 摩尔投票法</span><br><br>        <span class="hljs-type">int</span> candidate = nums[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br><br>            <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) &#123;<br><br>                candidate = nums[i];<br><br>                cnt = <span class="hljs-number">1</span>;<br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] != candidate) --cnt;<br><br>            <span class="hljs-keyword">else</span> ++cnt;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">moreThanHalf</span>(nums, candidate)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br><br>        <span class="hljs-keyword">return</span> candidate;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">moreThanHalf</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> num)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> numCnt = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums) &#123;<br><br>            <span class="hljs-keyword">if</span> (n == num) ++numCnt;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> numCnt &gt; nums.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="面试题40-最小的k个数"><a href="#面试题40-最小的k个数" class="headerlink" title="面试题40. 最小的k个数"></a><a href="https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/">面试题40. 最小的k个数</a></h1><p><strong>解题思路</strong> ：可以利用大顶堆实现，大顶堆的堆顶元素大于堆内的所有元素，所需我们只需要最小的k个元素，维护一个大小为k的大顶堆，依次插入元素并弹出最大元素，剩下的即为目标元素集合。<br><strong>还可以使用上面的快速排序partition思路来做</strong> ：一旦确定最终位置为k的元素，其左端及自身即为最终的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">getLeastNumbers</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> k)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 利用大顶堆最容易实现</span><br><br>        <span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">1</span> ) <span class="hljs-keyword">return</span> &#123;&#125;;<br><br>        <span class="hljs-keyword">if</span> (arr.<span class="hljs-built_in">size</span>() &lt; k) <span class="hljs-keyword">return</span> arr;<br><br>        priority_queue&lt;<span class="hljs-type">int</span>&gt; pQueue;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) pQueue.<span class="hljs-built_in">push</span>(arr[i]); <span class="hljs-comment">// 只需要O(k)空间</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt; arr.<span class="hljs-built_in">size</span>(); ++i) &#123;<br><br>            pQueue.<span class="hljs-built_in">push</span>(arr[i]);<br><br>            pQueue.<span class="hljs-built_in">pop</span>();<br><br>        &#125;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(k, <span class="hljs-number">0</span>)</span></span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>&amp; res : result) &#123;<br><br>            res = pQueue.<span class="hljs-built_in">top</span>();<br><br>            pQueue.<span class="hljs-built_in">pop</span>();<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-42-连续子数组的最大和"><a href="#剑指-Offer-42-连续子数组的最大和" class="headerlink" title="剑指 Offer 42. 连续子数组的最大和"></a><a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a></h1><p><strong>解题思路</strong> ：动态规划问题，对于长度为 $i$ 的连续子数组的最大和，记为 $maxSum(i) = f(i)$ ，对于长度为 $i + 1$ 的连续子数组的最大和为 $maxSum(i + 1) = max(nums[i + 1], f(i) + nums[i + 1]$ ，需要不断遍历更新整个数组，在遍历的过程中顺便记录下最大值。</p><ul><li>可以使用单独的dp数组，但是这里不需要记录过多的信息，只需要保存当前的几个状态信息：之前的以末尾元素构成的最长数组连续和，当前最大和。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> resultMax = nums[<span class="hljs-number">0</span>], currentSum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; num : nums) &#123;<br><br>            currentSum = <span class="hljs-built_in">max</span>(currentSum + num, num);<br><br>            resultMax = <span class="hljs-built_in">max</span>(currentSum, resultMax);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> resultMax;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-43-1～n-整数中-1-出现的次数"><a href="#剑指-Offer-43-1～n-整数中-1-出现的次数" class="headerlink" title="剑指 Offer 43. 1～n 整数中 1 出现的次数"></a><a href="https://leetcode.cn/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/">剑指 Offer 43. 1～n 整数中 1 出现的次数</a></h1><p><strong>解题思路</strong> ：![[Pasted image 20220703165448.png]]</p><ul><li>用mulk表示 $10^k$ ，从低位到高位不同段统计数位为1的个数。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countDigitOne</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> mulk = <span class="hljs-number">1</span>; <span class="hljs-comment">// 初始化为 10^0</span><br><br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; n &gt;= mulk; ++k) &#123; <span class="hljs-comment">// 从低位往高位枚举</span><br><br>            result += (n / (mulk * <span class="hljs-number">10</span>)) * mulk + <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>((n % (mulk * <span class="hljs-number">10</span>)) - mulk + <span class="hljs-number">1</span>, <span class="hljs-number">0LL</span>), mulk);<br><br>            mulk *= <span class="hljs-number">10</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-45-把数组排成最小的数"><a href="#剑指-Offer-45-把数组排成最小的数" class="headerlink" title="剑指 Offer 45. 把数组排成最小的数"></a><a href="https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/">剑指 Offer 45. 把数组排成最小的数</a></h1><p><strong>解题思路</strong> ：基本思路，想要组成最小的数，以两个元素{x, y}为例，需要按照两种可能的组合方式给两个数排序，及 x + y 与 y + x 的大小关系。因此根据这种新的排序规则，我们定义一个新的排序函数，将所有的待组合元素排序，最后将所有的元素拼接起来得到最终的结果，即为答案。</p><ul><li>int可能会溢出，转换为string类型，string可以直接用 + 拼接，比较大小。</li><li>利用修改之后的快速排序。<ul><li>选择数组最左端元素作为 pivot元素</li><li>确定pivot元素的最终位置，<ul><li>保证满足 numsString[左边的元素] + numsString[pivot] &lt;= numsString[pivot] + numsString[左边的元素]。</li><li>保证满足 numsString[pivot] + numsString[右边的元素] &lt;= numsString[右边的元素] + numsString[pivot]。 </li></ul></li><li>将pivot元素放入最终位置。</li><li>递归子数组排序。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">string <span class="hljs-title">minNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-comment">// int类型的数据可能溢出，所以要转为string</span><br><br>        <span class="hljs-comment">// 根据新的排序规则对于待拼接数组进行排序，从而得到拼接结果</span><br><br>        vector&lt;string&gt; numsString;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> num : nums) &#123;<br><br>            numsString.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">to_string</span>(num));<br><br>        &#125;<br><br>        <span class="hljs-built_in">quickSort</span>(numsString, <span class="hljs-number">0</span>, numsString.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br><br>        string result;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> s : numsString) &#123;<br><br>            result += s;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(vector&lt;string&gt;&amp; numsString, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 利用快速排序的思想</span><br><br>        <span class="hljs-comment">// 新的排序规则: 对于字符串 x + y &lt; y + x ， 则有x &lt; y</span><br><br>        <span class="hljs-keyword">if</span> (left &gt;= right) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-type">int</span> i = left, j = right;<br><br>        <span class="hljs-comment">// 将numsString[left] 作为 pivot元素</span><br><br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br><br>            <span class="hljs-comment">// 根据新的规则调整序列元素</span><br><br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; (numsString[left] + numsString[j] &lt;= numsString[j] + numsString[left])) --j;<br><br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; (numsString[i] + numsString[left] &lt;= numsString[left] + numsString[i])) ++i;<br><br>            <span class="hljs-built_in">swap</span>(numsString[i], numsString[j]);<br><br>        &#125; <span class="hljs-comment">// 循环终止条件 i == j</span><br><br>        <span class="hljs-built_in">swap</span>(numsString[i], numsString[left]);<br><br>        <span class="hljs-built_in">quickSort</span>(numsString, left, i - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-built_in">quickSort</span>(numsString, i + <span class="hljs-number">1</span>, right);<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="剑指-Offer-49-丑数"><a href="#剑指-Offer-49-丑数" class="headerlink" title="剑指 Offer 49. 丑数"></a><a href="https://leetcode.cn/problems/chou-shu-lcof/">剑指 Offer 49. 丑数</a></h1><p><strong>解题思路</strong> ：找第n个丑数，动态规划，不断将2，3，5的倍数作为丑数加入到结果数组中。</p><ul><li>1是第一个丑数</li><li>每次加入结果中的丑数是三个倍数中最小的数</li><li>三个数的倍数可能是相同的数，即该丑数同时是2，3，5若干数的倍数</li><li>需要保证不重复<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> pointer_2 = <span class="hljs-number">1</span>, pointer_3 = <span class="hljs-number">1</span>, pointer_5 = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><br>            <span class="hljs-type">int</span> multiple_2 = dp[pointer_2] * <span class="hljs-number">2</span>;<br><br>            <span class="hljs-type">int</span> multiple_3 = dp[pointer_3] * <span class="hljs-number">3</span>;<br><br>            <span class="hljs-type">int</span> multiple_5 = dp[pointer_5] * <span class="hljs-number">5</span>;<br><br>  <br><br>            dp[i] = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(multiple_2, multiple_3), multiple_5);<br><br>            <span class="hljs-keyword">if</span> (dp[i] == multiple_2) ++pointer_2;<br><br>            <span class="hljs-keyword">if</span> (dp[i] == multiple_3) ++pointer_3;<br><br>            <span class="hljs-keyword">if</span> (dp[i] == multiple_5) ++pointer_5;<br><br>        &#125; <br><br>        <span class="hljs-keyword">return</span> dp[n];<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-50-第一个只出现一次的字符"><a href="#剑指-Offer-50-第一个只出现一次的字符" class="headerlink" title="剑指 Offer 50. 第一个只出现一次的字符"></a><a href="https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/">剑指 Offer 50. 第一个只出现一次的字符</a></h1><p><strong>解题思路</strong> ：利用hash表计数，两次遍历即可。</p><ul><li>第一次遍历计数各字符出现的次数</li><li>第二次遍历找出出现一次的字符</li><li>利用unordered_map方便实现，利用vector也可以。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">firstUniqChar</span><span class="hljs-params">(string s)</span> </span>&#123;<br><br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; myUnorderMap;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s) &#123;<br><br>            myUnorderMap[c] += <span class="hljs-number">1</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s) &#123;<br><br>            <span class="hljs-keyword">if</span> (myUnorderMap[c] == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> c;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-51-数组中的逆序对"><a href="#剑指-Offer-51-数组中的逆序对" class="headerlink" title="剑指 Offer 51. 数组中的逆序对"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">剑指 Offer 51. 数组中的逆序对</a></h1><p><strong>解题思路</strong> ：分治法处理，基于归并排序，并在归并序列的过程中，计数逆序对。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(n)</span></span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">mergeSort</span>(nums, temp, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, vector&lt;<span class="hljs-type">int</span>&gt;&amp; temp, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 利用分治法，不断归并来计数逆序对数</span><br><br>        <span class="hljs-comment">// nums:待处理数据</span><br><br>        <span class="hljs-comment">// temp:辅助用的中间数组,记录每一轮的有序结果</span><br><br>        <span class="hljs-comment">// 闭区间 [left, right] 分为两部分递归处理 [left, middle], [middle + 1, right]</span><br><br>  <br><br>        <span class="hljs-keyword">if</span> (left &gt;= right) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>  <br><br>        <span class="hljs-comment">// 1.分：分为两个子序列[left, middle], [middle + 1, right]递归处理子序列</span><br><br>        <span class="hljs-type">int</span> middle = (left + right) &gt;&gt; <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> countInversions = <span class="hljs-built_in">mergeSort</span>(nums, temp, left, middle) + <span class="hljs-built_in">mergeSort</span>(nums, temp, middle + <span class="hljs-number">1</span>, right);<br><br>  <br><br>        <span class="hljs-comment">// 2.治：已有两个有序子序列，归并并计数逆序对</span><br><br>        <span class="hljs-type">int</span> i = left, j = middle + <span class="hljs-number">1</span>, index = left; <span class="hljs-comment">// 两个子序列的工作指针,index 纪录归并结果的指针</span><br><br>        <span class="hljs-keyword">while</span> (i &lt;= middle &amp;&amp; j &lt;= right) &#123;<br><br>            <span class="hljs-keyword">if</span> (nums[i] &lt;= nums[j]) &#123;<br><br>                <span class="hljs-comment">// 注意这里优先放入左边序列的值到最终结果中，因为相同的数不是逆序对</span><br><br>                temp[index++] = nums[i++];<br><br>                <span class="hljs-comment">// 只有左边序列的数往结果数组中放的时候，才说明是逆序的，仅此而已。</span><br><br>                <span class="hljs-comment">// 因为此时左边序列的当前值nums[i](i自增之前的值)是大于右边序列nums[j]之前的所有数，总数为(j - (middle + 1))</span><br><br>                countInversions += (j - (middle + <span class="hljs-number">1</span>)); <span class="hljs-comment">// 右边序列 nums[j] 之前的元素个数</span><br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span> &#123;<br><br>                temp[index++] = nums[j++];<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-comment">// 特殊情况处理，因为可能会出现有序列之一没有遍历完成</span><br><br>        <span class="hljs-comment">// case 1：左侧序列没有遍历完成</span><br><br>        <span class="hljs-keyword">while</span> (i &lt;= middle) &#123;<br><br>            temp[index++] = nums[i++];<br><br>            countInversions += j - (middle + <span class="hljs-number">1</span>);<br><br>        &#125;<br><br>        <span class="hljs-comment">// case 2: 右边的序列没有处理完</span><br><br>        <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br><br>            temp[index++] = nums[j++];<br><br>        &#125;<br><br>        <span class="hljs-comment">// 复制temp中的有序序列到原来的nums对应位置中去</span><br><br>        <span class="hljs-built_in">copy</span>(temp.<span class="hljs-built_in">begin</span>() + left, temp.<span class="hljs-built_in">begin</span>() + right + <span class="hljs-number">1</span>, nums.<span class="hljs-built_in">begin</span>() + left); <span class="hljs-comment">// 拷贝的是闭区间[left, right]</span><br><br>        <span class="hljs-comment">// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!特别小心，这里是都是从begin()开始的偏移位置</span><br><br>        <span class="hljs-keyword">return</span> countInversions;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-52-两个链表的第一个公共节点"><a href="#剑指-Offer-52-两个链表的第一个公共节点" class="headerlink" title="剑指 Offer 52. 两个链表的第一个公共节点"></a><a href="https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指 Offer 52. 两个链表的第一个公共节点</a></h1><p><strong>解题思路</strong> ：很容易想到双指针。但是可以更巧妙。</p><ul><li>两个链表有公共结点，那么一定是在末尾对齐的某一个位置上。</li><li>所以一种方法可以考虑记录长度，然后长的链表对其短的链表，然后同步移动寻找公共结点。</li><li>另一种思路可以参考leetcode，更简便。![[Pasted image 20220706172352.png]]</li></ul><p><strong>方法 1</strong> ：直接遍历记录长度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br><br>        ListNode* pA = headA, *pB = headB;<br><br>        <span class="hljs-type">int</span> lenA = <span class="hljs-number">0</span>, lenB = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (pA) &#123; <span class="hljs-comment">// 记录链表A的长度</span><br><br>            ++lenA;<br><br>            pA = pA-&gt;next;<br><br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (pB) &#123; <span class="hljs-comment">//记录链表B的长度</span><br><br>            ++lenB;<br><br>            pB = pB-&gt;next;<br><br>        &#125;<br><br><span class="hljs-comment">// 按末尾将两个链表的起点对齐</span><br>        pA = headA, pB = headB;<br><br>        <span class="hljs-keyword">while</span> (lenA &gt; lenB) &#123; <br><br>            pA = pA-&gt;next;<br><br>            --lenA;<br><br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (lenA &lt; lenB) &#123;<br><br>            pB = pB-&gt;next;<br><br>            --lenB;<br><br>        &#125;<br><br><span class="hljs-comment">// 对其之后的两个链表指针同步移动，寻找公共结点</span><br>        <span class="hljs-keyword">while</span> (pA &amp;&amp; pB) &#123;<br><br>            <span class="hljs-keyword">if</span> (pA == pB) <span class="hljs-keyword">return</span> pA;<br><br>            pA = pA-&gt;next;<br><br>            pB = pB-&gt;next;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法 2</strong> ：参考leetcode，如果两个链表的长度不等，先遍历完的指针就指向另外的指针，而另一个指针遍历完也采用相同的操作。最坏情况就是两个指针分别遍历了两个链表依次，都在链表都回合了，此时pA == pB == nullptr。</p><ul><li>这样处理就需要判断两个链表其一是否为空。可以快速处理特殊情况，不加也不会有影响。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">nullptr</span> || headB == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>        ListNode* pA = headA, *pB = headB;<br><br>        <span class="hljs-keyword">while</span> (pA != pB) &#123;<br><br>            pA = pA == <span class="hljs-literal">nullptr</span> ? headB : pA-&gt;next; <span class="hljs-comment">// 如果先遍历完，就将其重置为另外链表表头</span><br><br>            pB = pB == <span class="hljs-literal">nullptr</span> ? headA : pB-&gt;next; <span class="hljs-comment">// 至多两轮就可以同时到达链表尾。</span><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> pA;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-53-I-在排序数组中查找数字-I"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I"></a><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></h1><p><strong>解题思路</strong> ：很直观的想法是用二分查找。根据邓俊辉老师的课程中实现的二分查找函数，可以返回最大的不大于带查找目标元素的下标。</p><ul><li>利用二分查找找到最大不大于目标的位置，如果有多个相同元素，返回的是最大的下标。</li><li>再利用二分查找找到最大不大于（目标 - 1）的位置</li><li>两个位置的差值就是目标数重复的次数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">binarySearch</span>(nums, target) - <span class="hljs-built_in">binarySearch</span>(nums, target - <span class="hljs-number">1</span>);<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>, high = nums.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 左闭右开区间[low, high)</span><br><br>        <span class="hljs-keyword">while</span> (low &lt; high) &#123;<br><br>            <span class="hljs-type">int</span> middle = (low + high) &gt;&gt; <span class="hljs-number">1</span>; <br><br>            (target &lt; nums[middle]) ? high = middle : low = middle + <span class="hljs-number">1</span>; <span class="hljs-comment">// 条件是小于</span><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> --low; <span class="hljs-comment">// 需要自减1</span><br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-55-I-二叉树的深度"><a href="#剑指-Offer-55-I-二叉树的深度" class="headerlink" title="剑指 Offer 55 - I. 二叉树的深度"></a><a href="https://leetcode.cn/problems/er-cha-shu-de-shen-du-lcof/">剑指 Offer 55 - I. 二叉树的深度</a></h1><p><strong>解题思路</strong> ：很容易想到BFS和DFS。</p><ul><li><p>BFS需要借助队列，并且与之前的32题相似![[剑指offer 二刷笔记#剑指 Offer 32 - II 从上到下打印二叉树 II https leetcode cn problems cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof]]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        queue&lt;TreeNode*&gt; Q;<br>        Q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!Q.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-type">int</span> sz = Q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">while</span> (sz &gt; <span class="hljs-number">0</span>) &#123;<br>                TreeNode* node = Q.<span class="hljs-built_in">front</span>();Q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span> (node-&gt;left) Q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                <span class="hljs-keyword">if</span> (node-&gt;right) Q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>                sz -= <span class="hljs-number">1</span>;<br>            &#125;<br>            ans += <span class="hljs-number">1</span>;<br>        &#125; <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>DFS，实现跟简单，只需要考虑左右子树的高度最大值，加上根节点本身的高度1即可。递归处理子树。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>  <br><br>        <span class="hljs-type">int</span> depth = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">maxDepth</span>(root-&gt;left), <span class="hljs-built_in">maxDepth</span>(root-&gt;right)) + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">return</span> depth;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-55-II-平衡二叉树"><a href="#剑指-Offer-55-II-平衡二叉树" class="headerlink" title="剑指 Offer 55 - II. 平衡二叉树"></a><a href="https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof/">剑指 Offer 55 - II. 平衡二叉树</a></h1><p><strong>解题思路</strong> ：很容易根据定义直到怎么处理，关键在于对于树的深度如何有效地处理。</p><ul><li>可以显示地求出子树地高度再判断，但是会重复计算很多，效率不够。</li><li>考虑后序遍历，刚好可有有效地满足本题地需求。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> depth = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">isBalanced</span>(root, depth);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span>&amp; depth)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 因为需要判断二叉平衡树，需要直到子树的高度</span><br><br>        <span class="hljs-comment">// 利用树的后序遍历可以很巧妙地实现这一点</span><br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br><br>            depth = <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果为空，则树的高度为0</span><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-type">int</span> leftDepth = <span class="hljs-number">0</span>, rightDepth = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isBalanced</span>(root-&gt;left, leftDepth) &amp;&amp; <span class="hljs-built_in">isBalanced</span>(root-&gt;right, rightDepth)) &#123; <span class="hljs-comment">// 左右子树</span><br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(leftDepth - rightDepth) &lt;= <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 根节点处理：左右子树都是平衡的</span><br><br>                depth = <span class="hljs-number">1</span> + <span class="hljs-built_in">max</span>(leftDepth, rightDepth); <span class="hljs-comment">// 根节点的深度加1</span><br><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 返回树为平衡二叉树</span><br><br>            &#125;<br><br>        &#125; <br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 根节点处理：左右子树不平衡</span><br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-56-I-数组中数字出现的次数"><a href="#剑指-Offer-56-I-数组中数字出现的次数" class="headerlink" title="剑指 Offer 56 - I. 数组中数字出现的次数"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a></h1><p><strong>解题思路</strong> ：数学知识，异或的使用：相同的两个数的异或结果为0。</p><ul><li>$a$ ^ $a$ = 0</li><li>$a$ ^ $a$ ^ $b$ = $b$</li><li>一共只有两个数是只出现一次的, 记为a, b，所以对全体所有数的异或结果xorResult，就是两个出现一次的数的异或结果</li><li>根据这个异或结果xorResult，对于其中不为0的位，一定是两个出现一次的数a ^ b 的结果，找出位为 1 的位，一定是a 和 b 不同的位（根据异或的定义）。</li><li>根据这个为 1 的位，可以将数组分成两个组，而两个组中的元素一定是两两一对加上出现一次的数。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">singleNumbers</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> xorResult = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br><br>            xorResult ^= num;<br><br>        &#125;<br><br>        <span class="hljs-comment">// 需要第一个非0的异或位，用这个位将原来的nums分为两个组</span><br><br>        <span class="hljs-comment">// 因为两个数是不同异或结果，所以该位一定可以将两个出现一次的数字分到两个组中。</span><br><br>        <span class="hljs-type">int</span> mask = <span class="hljs-number">0x1</span>;<br><br>        <span class="hljs-keyword">while</span> ((mask &amp; xorResult) == <span class="hljs-number">0</span>) mask &lt;&lt;= <span class="hljs-number">1</span>;<br><br>  <br><br>        <span class="hljs-type">int</span> num1 = <span class="hljs-number">0</span>, num2 = <span class="hljs-number">0</span>; <span class="hljs-comment">// 存储两个结果，分组异或的结果就是目标的出现一次的两个数</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br><br>            <span class="hljs-keyword">if</span> (num &amp; mask) num1 ^= num;<br><br>            <span class="hljs-keyword">else</span> num2 ^= num;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;num1, num2&#125;;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-57-和为s的两个数字"><a href="#剑指-Offer-57-和为s的两个数字" class="headerlink" title="剑指 Offer 57. 和为s的两个数字"></a><a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/">剑指 Offer 57. 和为s的两个数字</a></h1><p><strong>解题思路</strong> ：有序数组，目标是合为s的两个数。双指针，不断调整low和high去寻找目标。</p><ul><li>特殊情况，数组的大小 $\leq$ 1，不符合条件，直接返回空。</li><li>正常情况，直接寻找nums[low] + nums[high] == target 的值。</li><li>nums[low] + nums[high] &lt; target ，就让 low += 1；</li><li>nums[low] + nums[high] &gt; target ，就让 high -= 1。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 双指针</span><br><br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> &#123;&#125;;<br><br>        <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>, high = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (low &lt; high) &#123;<br><br>            <span class="hljs-type">int</span> currentSum = nums[low] + nums[high];<br><br>            <span class="hljs-keyword">if</span> (currentSum == target) <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;nums[low], nums[high]&#125;;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentSum &lt; target) ++low;<br><br>            <span class="hljs-keyword">else</span> --high; <br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-57-II-和为s的连续正数序列"><a href="#剑指-Offer-57-II-和为s的连续正数序列" class="headerlink" title="剑指 Offer 57 - II. 和为s的连续正数序列"></a><a href="https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/">剑指 Offer 57 - II. 和为s的连续正数序列</a></h1><p><strong>解题思路</strong> ：题意是要寻找满足合为s的所有连续正整数序列。考虑滑动窗口。</p><ul><li>采用左开右闭区间 $[low, high)$，当区间的元素之和为s的时候就是我们想要的结果。</li><li>从窗口为0，正整数 1 开始滑动窗口。</li><li>得到一个连续的序列之和，需要继续寻找下一个序列，此时滑动窗口。无论滑动low还是high之一，都需要在滑动对应的high或low一次。因为如果low右移，值一定是小于 s，所以一定会右移 high。如果右移high，一定会大于 s，所以一定会右移 low。故此时可以同时移动 low 和 high。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">findContinuousSequence</span>(<span class="hljs-type">int</span> target) &#123;<br><br>        <span class="hljs-comment">// 寻找的返回是正整数序列</span><br><br>        <span class="hljs-comment">// 滑动窗口，左闭右开区间[low, high)</span><br><br>        <span class="hljs-type">int</span> low = <span class="hljs-number">1</span>, high = <span class="hljs-number">1</span>; <span class="hljs-comment">// 窗口大小为0</span><br><br>        <span class="hljs-type">int</span> currentSum = <span class="hljs-number">0</span>;<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br><br>  <br><br>        <span class="hljs-keyword">while</span> (low &lt;= target / <span class="hljs-number">2</span>) &#123; <br><br>            <span class="hljs-comment">//因为寻找的是正整数序列，所以当最小的数low都大于target的时候，不可能加上high能够=target</span><br><br>            <span class="hljs-keyword">if</span> (currentSum &lt; target) &#123;<br><br>                <span class="hljs-comment">// 区间[low, high)内的元素和是符合条件的连续正整数序列，记录结果</span><br><br>                currentSum += high;<br><br>                ++high;<br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentSum &gt; target) &#123;<br><br>                currentSum -= low;<br><br>                ++low;<br><br>            &#125;<br><br>            <span class="hljs-keyword">else</span> &#123;<br><br>                vector&lt;<span class="hljs-type">int</span>&gt; currentResult;<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = low; i &lt; high; ++i) &#123;<br><br>                    currentResult.<span class="hljs-built_in">push_back</span>(i);<br><br>                &#125;<br><br>                result.<span class="hljs-built_in">push_back</span>(currentResult);<br><br>                <span class="hljs-comment">// low, high同时往右调整</span><br><br>                currentSum -= low;<br><br>                currentSum += high;<br><br>                ++low;<br><br>                ++high;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></h1><p><strong>解题思路</strong> ：逆转链表常规思路。</p><ul><li>$(A^TB^T)^T = BA$</li><li>自己实现得reverse函数比调用算法库里得快很多。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">string <span class="hljs-title">reverseLeftWords</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> s;<br><br>        <span class="hljs-built_in">reverse</span>(s, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-built_in">reverse</span>(s, n, s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-built_in">reverse</span>(s, <span class="hljs-number">0</span>, s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> s;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(string&amp; s, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> </span>&#123;<br><br>        <span class="hljs-keyword">while</span> (low &lt; high) &#123;<br><br>            <span class="hljs-built_in">swap</span>(s[low], s[high]);<br><br>            ++low;<br><br>            --high;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-58-I-翻转单词顺序"><a href="#剑指-Offer-58-I-翻转单词顺序" class="headerlink" title="剑指 Offer 58 - I. 翻转单词顺序"></a><a href="https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/">剑指 Offer 58 - I. 翻转单词顺序</a></h1><p><strong>解题思路</strong> ：与上一题58-Ⅱ类似。</p><ul><li>可以考虑先逆转整个序列，在处理每个单词。</li><li>只有空格字符串返回空字符串</li><li>这里参考leetcode解题思路<ul><li>首先逆转整个字符串</li><li>再找到第一个不为空格的地方起点，说明接下来有新的单词要逆转。非首单词添加空格将他们隔开。</li><li>通过end不断往后找单词结束的地方，并且不断往前移位到最终位置</li><li>逆转单词，将start赋值为end继续循环</li><li>需要利用erase函数将s的末尾空格去除。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">string <span class="hljs-title">reverseWords</span><span class="hljs-params">(string s)</span> </span>&#123;<br><br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-type">int</span> resultIdx = <span class="hljs-number">0</span>; <span class="hljs-comment">// 指向结果字符串末尾后一位置</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> start = <span class="hljs-number">0</span>; start &lt; n; ++start) &#123;<br><br>            <span class="hljs-keyword">if</span> (s[start] != <span class="hljs-string">&#x27; &#x27;</span>) &#123; <span class="hljs-comment">// 多个空格都跳过</span><br><br>                <span class="hljs-keyword">if</span> (resultIdx != <span class="hljs-number">0</span>) s[resultIdx++] = <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// 马上又要加入新的结果单词，用空格分隔</span><br><br>                <span class="hljs-type">int</span> end = start;<br><br>                <span class="hljs-keyword">while</span> (end &lt; n &amp;&amp; s[end] != <span class="hljs-string">&#x27; &#x27;</span>) s[resultIdx++] = s[end++]; <span class="hljs-comment">// 将end一直后移，直到遇到第一个空格或末尾</span><br><br>                <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>() + resultIdx - (end - start), s.<span class="hljs-built_in">begin</span>() + resultIdx);<br><br>                start = end;<br><br>            &#125;<br><br>        &#125;<br><br>        s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">begin</span>() + resultIdx, s.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-keyword">return</span> s;<br><br>    &#125;<br><br>  <br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-61-扑克牌中的顺子"><a href="#剑指-Offer-61-扑克牌中的顺子" class="headerlink" title="剑指 Offer 61. 扑克牌中的顺子"></a><a href="https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof/">剑指 Offer 61. 扑克牌中的顺子</a></h1></li></ul></li></ul><p><strong>解题思路</strong> ：要构成题中的顺子，意思就是需要连续，但是可以用joker来替代任意牌。</p><ul><li>对于顺子排序，<strong>最大的牌 - 最小的牌 &lt; 5</strong> 的，一旦超过了，那么不可能用joker替换了，这种情况直接返回false</li><li>对于可以用joker替换的情况，排序之后，除joker以外的最大牌和最小牌应该也是符合最大的牌 - 最小的牌 &lt; 5的</li><li>joker数量需要记录，这样可以找到最小的非joker牌</li><li>最大的牌就是nums[4]</li><li>最大的牌 - 最小的牌(非joker) &lt; 5 –&gt; nums[4] - nums[joker]<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isStraight</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 排序</span><br><br>        <span class="hljs-comment">// 如果有相同的0，则++joker</span><br><br>        <span class="hljs-comment">// 如果是相同的其他数字，则一定不可能是顺子</span><br><br>        <span class="hljs-comment">// 最后，如果是顺子，则最大的牌与最小的牌的差距一定是小于5的，即最大到最小值之间不超过5，而最小值为nums[joker]</span><br><br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-type">int</span> joker = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i)&#123;<br><br>            <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">0</span>) ++joker;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; nums.<span class="hljs-built_in">size</span>() &amp;&amp; nums[i] == nums[i+<span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">4</span>] - nums[joker] &lt; <span class="hljs-number">5</span>;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-62-圆圈中最后剩下的数字"><a href="#剑指-Offer-62-圆圈中最后剩下的数字" class="headerlink" title="剑指 Offer 62. 圆圈中最后剩下的数字"></a><a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">剑指 Offer 62. 圆圈中最后剩下的数字</a></h1></li></ul><p><strong>解题思路</strong> ：约瑟夫环问题，每次从剩余的序列中删除第m个数字 (循环取余)。</p><ul><li>第一次删除的第m个元素</li><li>第二次删除的是相对于m位置之后m个位置的元素</li><li>用 $f(n,m)$ 该函数的返回值为最终留下的元素的序号。![[Pasted image 20220711184358.png]]<ul><li>$f(n,m) = (f(n - 1) + m) \ % \ n$   ，即删除第m个位置元素之后，需要从序列长度为n-1的序列中去删除第m个元素，直到剩最后一个元素。而相对于原来数组的下标位置就是 $(f(n - 1) + m) \ % \ n$ </li><li>序列长度为 1 的时候，数组下标为0，这是唯一的元素，所有就是结果，直接返回。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 递归</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lastRemaining</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(n, m);<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">f</span>(n - <span class="hljs-number">1</span>, m);<br><br>        <span class="hljs-keyword">return</span> (m + x) % n; <span class="hljs-comment">// 第一次删除第m个位置的元素，第二次删除的是第m个位置加f(n - 1, m)位置元素。都是原数组位置。</span><br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 迭代</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lastRemaining</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> f = <span class="hljs-number">0</span>; <span class="hljs-comment">// f 代表 f(n, m)</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123; <span class="hljs-comment">// i 代表n的取值，从2 --&gt; n</span><br><br>            f = (f + m) % i;  <span class="hljs-comment">// 每次在原来序列的删除第m个元素留下最后一个元素的基础上，加上m，再对序列长度取余，</span><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> f;<br><br>    &#125;<br><br>  <br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-64-求1-2-…-n"><a href="#剑指-Offer-64-求1-2-…-n" class="headerlink" title="剑指 Offer 64. 求1+2+…+n"></a><a href="https://leetcode.cn/problems/qiu-12n-lcof/">剑指 Offer 64. 求1+2+…+n</a></h1><p><strong>解题思路</strong> ：不能使用条件判断语句，考虑使用逻辑运算符 &amp;&amp; ，利用其判断能力和短路机制可以很有效解决问题。</p><ul><li>A &amp;&amp; B 为真，当且仅当 A 和 B 同时为真</li><li>A 为假，则不会执行 B</li><li>值得好好学习<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumNums</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><br>        n &amp;&amp; (n += <span class="hljs-built_in">sumNums</span>(n - <span class="hljs-number">1</span>));<br><br>        <span class="hljs-keyword">return</span> n;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-65-不用加减乘除做加法"><a href="#剑指-Offer-65-不用加减乘除做加法" class="headerlink" title="剑指 Offer 65. 不用加减乘除做加法"></a><a href="https://leetcode.cn/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/">剑指 Offer 65. 不用加减乘除做加法</a></h1><p><strong>解题思路</strong> ：用位运算模拟加法。计算机存整数是二进制形式</p><ul><li>二进制形式的数，不进位的加法 $\Leftrightarrow$ 二进制异或运算 ^</li><li>二进制形式的数，进位 $\Leftrightarrow$ 二进制与运算 &amp;</li><li>C++中负数不支持移位，本题中可能为负数，所以需要注意类型转换<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 利用二进制位运算做整数加法</span><br><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, carry = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">do</span> &#123;<br><br>            sum = a ^ b; <span class="hljs-comment">// 用异或运算模拟二进制加法，只有0-1，1-0相加才是1，0-0，1-1相加为0</span><br><br>            carry = (<span class="hljs-type">unsigned</span>)(a &amp; b) &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 用与运算模拟二进制进位，只有1-1才会才会产生进位.</span><br><br>                                            <span class="hljs-comment">//C++中负数不支持左移位，因为结果是不定的</span><br><br>            a = sum; <span class="hljs-comment">// 接下来将进位和求和结果相加就是最终结果</span><br><br>            b = carry; <span class="hljs-comment">// 因为可能存在多次进为，所以需要一直加到进位为0位置</span><br><br>        &#125; <span class="hljs-keyword">while</span> (b != <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">return</span> a;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-67-把字符串转换成整数"><a href="#剑指-Offer-67-把字符串转换成整数" class="headerlink" title="剑指 Offer 67. 把字符串转换成整数"></a><a href="https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/">剑指 Offer 67. 把字符串转换成整数</a></h1></li></ul><p><strong>解题思路</strong> ：本题可以使用状态机解，但是不够直观简单。采用模拟法直接模拟，注意边界条件。</p><ul><li>分别存储符号位和绝对值</li><li>给定的字符串前面可能存在多个空格，所以使用一个循环跳过所有的空格</li><li>在出现数字之前可能出现一个符号位，判断该符号位，如果为 ‘-’ 则符号位取 -1</li><li>对于绝对值结果就是不断乘10加当前位值，<ul><li>最大的int值绝对值为 INT_MAX</li><li>最小的int值绝对值为 INT_MAX + 1</li></ul></li><li>最终的返回结果就是符号位乘上绝对值<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">strToInt</span><span class="hljs-params">(string str)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> sign = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (str[currentIndex] == <span class="hljs-string">&#x27; &#x27;</span>) ++currentIndex; <span class="hljs-comment">// 跳过空格</span><br><br>        <span class="hljs-keyword">if</span> (currentIndex == str.<span class="hljs-built_in">size</span>() || (!<span class="hljs-built_in">isdigit</span>(str[currentIndex]) &amp;&amp; str[currentIndex] != <span class="hljs-string">&#x27;-&#x27;</span> &amp;&amp; str[currentIndex] != <span class="hljs-string">&#x27;+&#x27;</span>))&#123;<br><span class="hljs-comment">// 判读除去前面多个空格之后的是否还有可能为数字</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (str[currentIndex] == <span class="hljs-string">&#x27;-&#x27;</span> || str[currentIndex] == <span class="hljs-string">&#x27;+&#x27;</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (str[currentIndex] == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br><br>                sign = <span class="hljs-number">-1</span>;<br><br>            &#125;<br><br>            ++currentIndex;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;  <span class="hljs-comment">// int 可能会越界</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(str[currentIndex]) &amp;&amp; currentIndex &lt; str.<span class="hljs-built_in">size</span>()) &#123;<br><br>            result = result * <span class="hljs-number">10</span> + (str[currentIndex] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>            ++currentIndex;<br><br>            <span class="hljs-keyword">if</span> (result &gt;= INT_MAX &amp;&amp; sign == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INT_MAX;<br><br>            <span class="hljs-keyword">if</span> (result &gt; INT_MAX &amp;&amp; sign == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> INT_MIN;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sign * result;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-66-构建乘积数组"><a href="#剑指-Offer-66-构建乘积数组" class="headerlink" title="剑指 Offer 66. 构建乘积数组"></a><a href="https://leetcode.cn/problems/gou-jian-cheng-ji-shu-zu-lcof/">剑指 Offer 66. 构建乘积数组</a></h1><p><strong>解题思路</strong> ：暴力法可以解，但是不够高效。仔细分析有如下结论：假设 $A[0..n-1]$ –&gt; $B[0..n-1]$</p><ul><li>$B[i] = \prod \limits_{j \neq i}^{n-1} A[j]$</li><li>$B[i] = \prod \limits_{j = 0}^{i-1} A[j] * \prod \limits_{j = i + 1}^{n-1} A[j]$ </li><li>将 $B[i]$ 的求解看成是两个阶段，第一个阶段先计算小于 $i$ 的前半部分的乘积，而这里显然可以利用之前的计算结果来快速求得后一元素的结果，$B[i] = \prod \limits_{j = 0}^{i-1} A[j] = (\prod \limits_{j = 0}^{i-2} A[j]) * A[i - 1] = B[i - 1] * A[i - 1]$ </li><li>第二阶段，需要用一个变量来存当前的累积乘积，与第一阶段类似。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">constructArr</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; a)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> n = a.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> &#123;&#125;;<br><br>        <span class="hljs-comment">// B[i] = a[0] * .. * a[i - 1] * a[i + 1] * .. * a[n - 1], 可以以i为界分为两部分</span><br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">B</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>; <span class="hljs-comment">// 申请结果向量存储结果B，与a大小相同，初始化为全1</span><br><br>        <span class="hljs-comment">// 1.首先计算 B[i] = a[0] * .. * a[i - 1], 可以利用B[i] = B[i - 1] * a[i - 1]，基于前面计算结果，一步乘法就可</span><br><br>        <span class="hljs-comment">// B[0] = 1</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br><br>            B[i] = B[i - <span class="hljs-number">1</span>] * a[i - <span class="hljs-number">1</span>]; <br><br>        &#125;<br><br>  <br><br>        <span class="hljs-comment">// 2.计算B[i] = B[i] * a[i + 1] * .. * a[n - 1]，基于前面的结果继续累乘</span><br><br>        <span class="hljs-comment">// B[n - 1] = B[n - 1]</span><br><br>        <span class="hljs-type">int</span> currentProduct = <span class="hljs-number">1</span>; <span class="hljs-comment">// 暂存变量，存储 a[n - 1] * .. * a[i + 1] 的乘积，方便用于之后的计算</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br><br>            currentProduct *= a[i + <span class="hljs-number">1</span>];<br><br>            B[i] *= currentProduct;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> B;<br><br>    &#125;<br><br>&#125;;<br>```  <br><br># [剑指 Offer <span class="hljs-number">19.</span> 正则表达式匹配](https:<span class="hljs-comment">//leetcode.cn/problems/zheng-ze-biao-da-shi-pi-pei-lcof/)</span><br>**解题思路** ：关键在于 * 的多字母匹配。<br>- 模式串中第二个字符不是 * ，则可以直接比较模式串与字符串是否相同，或者看模式串中是否是 . （可以匹配任意一个字符），然后递归处理其余的字符串和模式串。<br>- 模式串中第二个字符是 * ，则可以分为两种情况，因为 * 可以匹配多个或者一个字符。结果都需要 &amp;&amp; 当前字符的匹配结果，如果当前不匹配，则不应该继续之后的匹配<br>- 匹配 <span class="hljs-number">0</span> 个字符，则直接将模式串后移两位，而字符串不动，继续递归处理<br>- 如果匹配多个字符，则模式串不动，字符串后移一位继续递归匹配<br>```C++<br><span class="hljs-keyword">class</span> Solution &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-type">bool</span> <span class="hljs-built_in">isMatch</span>(string s, string p) &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">isMatch</span>(s, p, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    &#125;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-built_in">isMatch</span>(<span class="hljs-type">const</span> string&amp; str,<span class="hljs-type">const</span> string&amp; ptn, <span class="hljs-type">int</span> s_index, <span class="hljs-type">int</span> p_index) &#123;<br><br>        <span class="hljs-keyword">if</span> (ptn[p_index] == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br><br>            <span class="hljs-comment">// 当模式串匹配结束的时候，去查看待匹配的串时候结束</span><br><br>            <span class="hljs-keyword">return</span> str[s_index] == <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>        &#125;<br><br>        <span class="hljs-comment">//对于当前元素进行位匹配</span><br><br>        <span class="hljs-type">bool</span> currentMatch = (str[s_index] != <span class="hljs-string">&#x27;\0&#x27;</span>) &amp;&amp; (str[s_index] == ptn[p_index] || ptn[p_index] == <span class="hljs-string">&#x27;.&#x27;</span>);<br><br>        <span class="hljs-keyword">if</span> (ptn[p_index + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; ptn[p_index + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br><br>            <span class="hljs-built_in">return</span> (currentMatch &amp;&amp; <span class="hljs-built_in">isMatch</span>(str, ptn, s_index + <span class="hljs-number">1</span>, p_index)) || <span class="hljs-built_in">isMatch</span>(str, ptn, s_index, p_index + <span class="hljs-number">2</span>); <span class="hljs-comment">// 是 * </span><br><br>        &#125;<br><br>        <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-built_in">return</span> (currentMatch &amp;&amp; <span class="hljs-built_in">isMatch</span>(str, ptn, s_index + <span class="hljs-number">1</span>, p_index + <span class="hljs-number">1</span>)); <span class="hljs-comment">// 不是 *</span><br><br>        &#125;<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-20-表示数值的字符串"><a href="#剑指-Offer-20-表示数值的字符串" class="headerlink" title="剑指 Offer 20. 表示数值的字符串"></a><a href="https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">剑指 Offer 20. 表示数值的字符串</a></h1><p><strong>解题思路</strong> ：关键是分清楚题中合法字符串的规律</p><ul><li>分类讨论，最多三部分组成 $A[.[B]][e|E \ C]$ </li><li>A、C是有符号整数</li><li>B如果存在，一定是无符号整数</li><li>利用一个ScanUnsignedInteger函数判断从当前index开始是否存在无符号整数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isNumber</span><span class="hljs-params">(string s)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 分类讨论，最多三部分组成 A[.[B]][e|E C]</span><br><br>        <span class="hljs-comment">// 只需要判断是否是合法的数值类型</span><br><br>        <span class="hljs-comment">// 有以下几种情况</span><br><br>        <span class="hljs-comment">// 1. 整数，即只有A的部分，A可以是正数，也可以是负数</span><br><br>        <span class="hljs-comment">// 2. A可以存在也可以不存在，有小数点和B，只有B必须是非负数</span><br><br>        <span class="hljs-comment">// 3. 一旦存在e或是E，则C一定要存在，C可以是负数，且前面一定也要是数字才行</span><br><br>  <br><br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用该变量存储当前遍历字符串s的位置</span><br><br>  <br><br>        <span class="hljs-comment">// 可能存在若干空格，用一个循环跳过所有的空格</span><br><br>        <span class="hljs-keyword">while</span> (s[currentIndex] == <span class="hljs-string">&#x27; &#x27;</span>) ++currentIndex;<br><br>  <br><br>        <span class="hljs-comment">// 首先判断A是否存在</span><br><br>        <span class="hljs-type">bool</span> isNumeric = <span class="hljs-built_in">ScanInteger</span>(s, currentIndex);<br><br>  <br><br>        <span class="hljs-comment">// 出现小数点，B一定要是数字</span><br><br>        <span class="hljs-keyword">if</span> (s[currentIndex] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br><br>            ++currentIndex;<br><br>            isNumeric = <span class="hljs-built_in">ScanUnsignedInteger</span>(s, currentIndex) || isNumeric; <span class="hljs-comment">// A可以不存在，所以关键在于B</span><br><br>        &#125;<br><br>  <br><br>        <span class="hljs-comment">// 出现e或是E, </span><br><br>        <span class="hljs-keyword">if</span> (s[currentIndex] == <span class="hljs-string">&#x27;e&#x27;</span> || s[currentIndex] == <span class="hljs-string">&#x27;E&#x27;</span>) &#123;<br><br>            ++currentIndex;<br><br>            isNumeric = isNumeric &amp;&amp; <span class="hljs-built_in">ScanInteger</span>(s, currentIndex); <span class="hljs-comment">// 前后必须存在，利用短路，先判断前面</span><br><br>        &#125;<br><br>  <br><br>        <span class="hljs-comment">// 结尾可能存在多个空格，并且可能不符合，如“12e+5  .4”</span><br><br>        <span class="hljs-keyword">while</span> (s[currentIndex] == <span class="hljs-string">&#x27; &#x27;</span>) ++currentIndex;<br><br>        <span class="hljs-keyword">return</span> isNumeric &amp;&amp; currentIndex == s.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">//刚好所有的字符串遍历完才行</span><br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ScanUnsignedInteger</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s, <span class="hljs-type">int</span>&amp; currentIndex)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 基于字符串s，和当前的下标，去看是否存在一个或是多个数字</span><br><br>        <span class="hljs-type">int</span> before = currentIndex;<br><br>        <span class="hljs-keyword">while</span> (currentIndex != s.<span class="hljs-built_in">size</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(s[currentIndex])) ++currentIndex;<br><br>        <span class="hljs-keyword">return</span> before &lt; currentIndex; <span class="hljs-comment">// 只有当存在至少一个数字的时候，才会返回真，否则就是不存在数字</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ScanInteger</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s, <span class="hljs-type">int</span>&amp; currentIndex)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (s[currentIndex] == <span class="hljs-string">&#x27;-&#x27;</span> || s[currentIndex] == <span class="hljs-string">&#x27;+&#x27;</span>) ++currentIndex;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ScanUnsignedInteger</span>(s, currentIndex);<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="剑指-Offer-54-二叉搜索树的第k大节点"><a href="#剑指-Offer-54-二叉搜索树的第k大节点" class="headerlink" title="剑指 Offer 54. 二叉搜索树的第k大节点"></a><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">剑指 Offer 54. 二叉搜索树的第k大节点</a></h1><p><strong>解题思路</strong> ：二叉搜索树的中序有序性质。</p><ul><li>左子树 &lt; 根 &lt; 右子树</li><li>如果采用左根右的遍历方式获取的就是 <strong>递增序列</strong> </li><li>采用 <strong>右根左</strong> 的遍历方式，获取的就是 <strong>递减序列</strong> <ul><li>递减序列的第k个元素就是我们想要的第k大的结点<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kthLargest</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> k)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 二叉搜索树的中序遍历序列是有序序列</span><br><br>        <span class="hljs-comment">// 调整中序遍历，右根左，则遍历到第k个顶点就是结果</span><br><br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-built_in">Inorder</span>(root, k, result);<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Inorder</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span>&amp; k, <span class="hljs-type">int</span>&amp; result)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><br>  <br><br>        <span class="hljs-keyword">if</span> (root-&gt;right) <span class="hljs-built_in">Inorder</span>(root-&gt;right, k, result);<br><br>        <span class="hljs-keyword">if</span> (--k == <span class="hljs-number">0</span>) result = root-&gt;val; <span class="hljs-comment">// k 用于计数当前根节点是第k大的，当k等于0的时候就是目标元素</span><br><br>        <span class="hljs-keyword">if</span> (root-&gt;left) <span class="hljs-built_in">Inorder</span>(root-&gt;left, k, result);<br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>algorithem</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Merriam-Webster-Vocabulary-Builder</title>
    <link href="/2023/01/08/Merriam-Webster-Vocabulary-Builder/"/>
    <url>/2023/01/08/Merriam-Webster-Vocabulary-Builder/</url>
    
    <content type="html"><![CDATA[<h1 id="Unit-1"><a href="#Unit-1" class="headerlink" title="Unit 1"></a>Unit 1</h1><h2 id="BENE"><a href="#BENE" class="headerlink" title="BENE"></a><code>BENE</code></h2><blockquote><p><code>bene</code> is <strong>Latin</strong> for “well”<br>A <code>benefit</code> is a good result or effect.<br>Something <code>beneficial</code> produces good results or effects.<br>The Latin root can be heard in other languages as well: “<code>good</code>“ or “<code>fine</code>“.<br>In Spanish is “<code>bueno</code>“<br>In French it’s “<code>bon</code>“</p></blockquote><h3 id="benediction"><a href="#benediction" class="headerlink" title="benediction"></a><code>benediction</code></h3><blockquote><p>A <code>prayer</code> (<em><strong>words</strong> that you say to God giving thanks or asking for help</em>) that asks for God’s blessing, especially a prayer that <strong>concludes</strong>(<em>conclude: to come to an end; to bring something to an end</em>) a worship service.</p></blockquote><p>E.g.</p><ul><li>The moment the <strong>bishop</strong> (<em>a senior priest in charge of the work of the Church in a city or district</em>) had finished his <code>benediction</code>, she squeezed quickly out of her row and darted out the cathedral’s side entrance.</li></ul><p>From</p><ul><li><code>dictio</code> : Latin root for “speaking”.</li><li><code>benediction</code> becomes something like “well-wishing”.</li></ul><h3 id="benefactor"><a href="#benefactor" class="headerlink" title="benefactor"></a><code>benefactor</code></h3><blockquote><p><code>Someone</code> who helps another person or group, <strong>especially by giving money</strong>.</p></blockquote><p>E.g.</p><ul><li>An anonymous <strong>benefactor</strong> had given $15 million to establish an ecological institute at the university.</li><li>Many <strong>benefactor</strong> reported that giving away their money turned out to be the most rewarded thing they ever did.</li></ul><p>Usage</p><ul><li>A <code>benefactor</code> may be involved in almost any field.<ul><li>One may endow (<em>endow something: to give a large sum of money to a school, a college or another institution to provide it with an income</em>) a scholarship fund;</li><li>Another may give money to expand a library;</li><li>Still another may leave a generous sum to hospital in her will.</li></ul></li></ul><h3 id="beneficiary"><a href="#beneficiary" class="headerlink" title="beneficiary"></a><code>beneficiary</code></h3><blockquote><p><code>A person</code> or <code>organization</code> that benefits or is expected to benefit from something, especially one that receives money or property when someone dies.</p></blockquote><p>E.g.</p><ul><li>Living in a tailer in near-poverty, she received word in the mail that her father had died, naming her as the sole <strong>beneficiary</strong> of his <strong>life-insurance</strong> (<em>a type of insurance in which you make regular payments so that you receive a sum of money when you are a particular age, or so that your family will receive a sum of money when you die</em>) policy.</li></ul><p>Usage</p><ul><li><code>Beneficiary</code> is often used in connection with <strong>life insurance</strong>, but it shows up in <strong>many other contexts</strong> as well.<ul><li>A college may be the beneficiary of a private donation.</li><li>Your uncle’s will may make a church his sole beneficiary, in which case all his money and property will go to it when he dies.</li><li>A “third-part beneficiary” of a contract is a person (often a child) who the people signing the contract (which is usually an insurance policy or an employee-benefit plan) want to benefit from it.</li></ul></li><li>In a more general way, a small business may be a beneficiary of changes to the tax code, or a restaurant may be the beneficiary when the one across the street <strong>closes down</strong> (<em>the act of stopping work, the act of stopping work, especially permanently, in an office, a factory, etc.</em>) and its whole lunch crowd starts coming in.</li></ul><h3 id="benevolence"><a href="#benevolence" class="headerlink" title="benevolence"></a><code>benevolence</code></h3><blockquote><p>Kindness, generosity.</p></blockquote><p>E.g.</p><ul><li>In those financially <strong>desperate</strong> (<em>extremely serious or dangerous</em>) years, the young couple was saved only by the benevolence of her <strong>elderly</strong> (<em>used as a polite word for old</em>) great-uncle.</li></ul><p>From</p><ul><li>Part of <code>benevolence</code> comes from the Latin root meaning “wish”.</li></ul><p>Usage</p><ul><li>The novels of Charles Dickens often include a <code>benevolent</code> figure who rescues the main characters at some point.</li><li>To be <code>benevolent</code>, it helps to have money, but it’s not necessary; kind assistance of a non-financial sort may turn out to be a lifesaving <code>benevolence</code> as well.</li></ul><h2 id="AM"><a href="#AM" class="headerlink" title="AM"></a><code>AM</code></h2><blockquote><p>comes from the Latin <code>amare</code>, “<strong>to love</strong>“.<br>The Roman god of love was know by two different names, <em><strong>Cupid</strong></em> and <em><strong>Amor</strong></em>.<br><code>Amiable</code> means “<strong>friendly or good-natured</strong>“, and <code>amigo</code> is Spanish for “<strong>friend</strong>“.</p></blockquote><h3 id="amicable"><a href="#amicable" class="headerlink" title="amicable"></a><code>amicable</code></h3><blockquote><p>Friendly, peaceful.</p></blockquote><p>E.g.</p><ul><li>Their relations with their <strong>in-laws</strong> (<em>your relatives by marriage, especially the parents of your husband or wife</em>) were <strong>generally</strong> (<em>most of the time</em>) amicable, despite some <strong>bickering</strong> (<em>the activity of arguing about things that are not important</em>) during the holidays.</li></ul><p>Usage</p><ul><li><code>Amicable</code> often describes <strong>relations between two groups, or especially to nations</strong> (<em>nation: a country considered as a group of people with the same language, culture and history, who live in a particular area under one government</em>).<ul><li>The United States and Canada, which are proud of sharing the longest unguarded border in the world. So they often speak of an <strong>amicable meeting</strong> or an <strong>amicable settlement</strong> (<em>settlement: an official agreement that ends an argument between two people or groups</em>).</li></ul></li><li>When <code>amicable</code> describes <strong>more personal relations</strong>, it may indicate <strong>a rather formal friendliness</strong>. But it’s always nice when two friends who’ve been quarreling manage to have an <strong>amicable conversation</strong> and to say <strong>amicable good-byes</strong> at the end.</li></ul><h3 id="enamored"><a href="#enamored" class="headerlink" title="enamored"></a><code>enamored</code></h3><blockquote><p>Charmed or fascinated; inflamed with love.</p></blockquote><p>E.g.</p><ul><li>Rebecca quickly became <code>enamored</code> of the town’s <strong>rustic</strong> (<em>typical of the country or of country people; simple</em>) surroundings, its slow pace, and its <strong>eccentric</strong> (<em>considered by other people to be strange or unusual</em>) characters.</li></ul><p>Usage</p><ul><li><p>Computer hackers are always <em><strong>enamored of</strong></em> their new programs and games.</p></li><li><p>Millions of readers have found themselves <em><strong>enamored with</strong></em> Jane Austen’s novels.</p></li><li><p>Romeo and Juliet were, of course, <strong>utterly</strong> (<em>(used for emphasis) completely</em>) <em><strong>enamored of</strong></em> each other.</p></li><li><p>But we also often use the word in negative contexts:</p><ul><li>A friend at work may complain that she’s <strong>not enamored of</strong> the new boss.</li><li>When you start talking about how you’re <strong>not enamored with</strong> the neighbors it may be time to move.</li><li>(Note that both <code>of</code> and <code>with</code> are <em><strong>commonly used after enamored.</strong></em>)</li></ul></li></ul><h3 id="amorous"><a href="#amorous" class="headerlink" title="amorous"></a><code>amorous</code></h3><blockquote><p>Having or showing strong feelings of attraction or love.</p></blockquote><p>E.g.</p><ul><li>It turned out that the <code>amorous</code> Congressman had gotten his girlfriend a good job and was paying for her apartment.</li></ul><p>Usage</p><ul><li><p>A couple <strong>smooching</strong> (<em>smooch: to kiss and hold somebody closely, especially when you are dancing slowly</em>) on a park bench could be called <strong>amorous</strong>, or a young married couple who are always hugging and kissing.</p></li><li><p>But the word is <strong>often used a bit sarcastically</strong>, </p><ul><li>as when a tabloid newspaper gets hold of some scandalous photos and calls the participants “<strong>the amorous pair</strong>“.</li><li>In such cases, we may be encountered to think <strong>the attraction is more physical than emotional</strong>.</li></ul></li></ul><h3 id="paramour"><a href="#paramour" class="headerlink" title="paramour"></a><code>paramour</code></h3><blockquote><p>A lover, often secret, not allowed by law or custom.</p></blockquote><p>E.g.</p><ul><li>He had been coming to the house for two years before her brothers realized that he was actually the <code>paramour</code> of their shy and <strong>withdrawn</strong> (<em>not wanting to talk to other people; extremely quiet and shy</em>) sister.</li></ul><p>From</p><ul><li><code>Paramour</code> came to English from French (<em>a language based on Latin</em>), though the modern French don’t use the word.</li><li>Since <code>par</code> <code>amour</code> meant “<strong>through love</strong>“, it implies <strong>a relationship based solely on love</strong>, often <strong>physical love</strong>, rather than on social custom or ceremony.</li></ul><p>Usage</p><ul><li>So today it tends to refer to <strong>the lover of a married man or woman</strong>, but may be used for any lover who isn’t <strong>obeying</strong> (<em>obey: to do what you are told or expected to do</em>) the social rules.</li></ul><h2 id="BELL"><a href="#BELL" class="headerlink" title="BELL"></a><code>BELL</code></h2><blockquote><p>comes from the <em><strong>Latin</strong></em> word meaning “<strong>war</strong>“.<br><em><strong>Bellona</strong></em> was the little-known Roman goddess of war; her husband, <em><strong>Mars</strong></em>, was the god of war.</p></blockquote><h3 id="antebellum"><a href="#antebellum" class="headerlink" title="antebellum"></a><code>antebellum</code></h3><blockquote><p>Existing before a war, especially before the America Civil War (1861-1865).</p></blockquote><p>E.g.</p><ul><li>When World War Ⅰ was over, the French nobility found it impossible to return to their extravagant antebellum way of life.</li></ul><p>Usage</p><ul><li>Even countries that win a war often end up worse off than they had been before, and the losers almost always do. So <code>antebellum</code> often <strong>summons up</strong> (<em>summon up: to make a feeling, an idea, a memory, etc. come into your mind</em>) images of ease, elegance, and entertainment that disappeared in the <strong>postwar</strong> (<em>existing, happening or made in the period after a war, especially the Second World War</em>) years.</li></ul><h3 id="bellicose"><a href="#bellicose" class="headerlink" title="bellicose"></a><code>bellicose</code></h3><blockquote><p><strong>Warlike</strong> (<em>aggressive and wanting to fight</em>), aggressive, <strong>quarrelsome</strong> (<em>(of a person) often arguing with other people</em>).</p></blockquote><p>E.g.</p><ul><li>The <code>bellicose</code> party always got selected whenever there was tension along the border and the public believed that military action would lead to security.</li></ul><p>Usage</p><ul><li>Since <code>bellicose</code> describes <strong>an attitude that hopes for actual war</strong>, the word is generally applied to <em><strong>nations</strong></em> and <em><strong>their leaders</strong></em>.<ul><li>In the 20th century, it was commonly used to describe such figures as Germany’s Kaiser Wilhelm, Italy’s Benito Mussolini, and Japan’s General Tojo, <em><strong>leaders who believed their countries had everything to gain by starting wars</strong></em>.</li></ul></li><li>The international relations of a nation with <strong>bellicose foreign policy</strong> tend to be stormy and difficult, and <strong>bellicosity</strong> usually makes the rest of the world very uneasy.</li></ul><h3 id="belligerence"><a href="#belligerence" class="headerlink" title="belligerence"></a><code>belligerence</code></h3><blockquote><p>Aggressiveness, combativeness.</p></blockquote><p>E.g.</p><ul><li>The belligerence in Turner’s voice told them that the warning was a serious threat.</li></ul><p>Usage</p><ul><li><strong>Unlike</strong> <em><strong>bellicose</strong></em> and <em><strong>bellicosity</strong></em>, the world <code>belligerence</code> can be used <strong>at every level from the personal to the global</strong>.<ul><li>  The <strong>belligerence</strong> of Marlon Brando’s performances as the violent Stanley Kowalski in A Streetcar Named Desire electrified the country in the 1940s and ‘50s. At the same time, <strong>belligerence speeches</strong> by leaders of the Soviet Union and the United States throughout the Cold War were keeping the world on edge.</li></ul></li><li><code>Belligerent</code> is even a noun; the terrible war in the Congo in recent years, for example, has involved seven nations as belligerents.</li></ul><h3 id="rebellion"><a href="#rebellion" class="headerlink" title="rebellion"></a><code>rebellion</code></h3><blockquote><p>Open <strong>defiance</strong> (<em>the act of openly refusing to obey somebody/something</em>) and <strong>opposition</strong> (<em>the act of strongly disagreeing with somebody/something, especially with the aim of preventing something from happening</em>), <strong>sometimes armed</strong>, <strong>to a person or thing in authority</strong> (<em>the power to give orders to people</em>).</p></blockquote><p>E.g.</p><ul><li>A student <strong>rebellion</strong> that afternoon in Room 13 resulted in the new substitute teacher racing out of the building in tears.</li></ul><p>Usage</p><ul><li>Plenty of teenagers <code>rebel</code> against their parents in all kinds of ways.</li><li>But a <code>rebellion</code> usually <em><strong>involves a group</strong></em>.</li><li><code>Armed rebellions</code> are usually <strong>put down</strong> (<em>to stop something by force</em>) by a country’s armed forces, or at least kept from expanding beyond a small area.<ul><li>The American War of Independence was first viewed by British as a <strong>minor</strong> (<em>not very large, important or serious</em>) <strong>rebellion</strong> that would soon run its course, but this particular rebellion led a <strong>full-fledged</strong> revolution (<em>full-fledged: completely developed; with all the qualifications necessary for something</em>)(<em>fledged:  able to fly</em>) – that is , the <strong>overthrow</strong> (<em>the act of taking power by force from a leader or government</em>) of a government.</li></ul></li><li>Rebellion, armed or otherwise, has often alerted those in power that those they control very unhappy.</li></ul><h2 id="PAC"><a href="#PAC" class="headerlink" title="PAC"></a><code>PAC</code></h2><blockquote><p>is related to the <em><strong>Latin words</strong></em> for “<strong>agree</strong>“ and “<strong>peace</strong>“.<br>The <em><strong>Pacific Ocean</strong></em> – that is, the “<strong>Peaceful Ocean</strong>“ – was named by Ferdinand Magellan because it seemed so calm after he had  sailed through the storms near <strong>Cape Horn</strong> (<em>the extreme end of South America, known for its very bad weather and dangerous ocean currents</em>). (Magellan obviously had never witnessed a Pacific typhoon)</p></blockquote><h3 id="pacify"><a href="#pacify" class="headerlink" title="pacify"></a><code>pacify</code></h3><blockquote><p>To <em><strong>soothe</strong></em> (<em>to make somebody who is anxious, upset, etc. feel calmer</em>) anger or agitation.<br>To <em><strong>subdue</strong></em> (<em>to bring somebody/something under control, especially by using force</em>) by armed action.</p></blockquote><p>E.g.</p><ul><li>It took the police hours to pacify the angry demonstrators.</li></ul><p>Usage</p><ul><li>Someone stirred up be a strong emotion can usually be <code>pacified</code> by some kind words and the <strong>removal</strong> (<em>the act of getting rid of something</em>) of its causes.</li><li>Unhappy babies are often given a rubber <code>pacifier</code> for sucking to make them stop crying.</li><li>During the Vietnam War, <code>pacification</code> of an area meant using armed force to drive out the enemy, which might be followed by bringing the local people over to our side by building schools and providing social services.</li><li>But an army can often bring “<code>peace</code>“ by pure force, without soothing anyone’s emotions.</li></ul><h3 id="pacifist"><a href="#pacifist" class="headerlink" title="pacifist"></a><code>pacifist</code></h3><blockquote><p><strong>A person</strong> who opposed to war or violence, especially someone who refuses to <strong>bear arms</strong> (<em>to serve as a soldier</em>) or fight, on moral or religious grounds.</p></blockquote><p>E.g.</p><ul><li>Her grandfather had fought in the <strong>Marines</strong> (<em>the Marine Corps, 海军陆战队</em>) in the World War Ⅱ, but in his later years he had become almost a <code>pacifist</code>, opposing every war <strong>for one reason or another</strong> (<em>因某种理由</em>).</li></ul><p>Usage</p><ul><li>The <strong>Quakers</strong> (<em>a member of the Society of Friends, a Christian religious group that meets without any formal ceremony and is strongly opposed to violence and war</em>) and the <strong>Jehovah’s Witnesses</strong> (<em>a member of a religious organization that believes the end of the world will happen soon and sends its members to people’s houses to try to persuade them to join</em>) are <code>pacifist</code> religious groups, and <strong>Henry David Thoreau</strong> (<em>(1817-62) a US writer and poet who believed strongly in the rights of individual people.</em>) and <strong>Martin Luther King</strong> (<em>(1929-68) the most important leader of the US civil rights movement</em>) are probably the most famous American pacifists.</li><li>Like these groups and individuals, pacifists haven’t always met with sympathy or understanding. </li><li><code>Pacifism</code> during wartime has often gotten people persecuted and even thrown in prison.</li></ul><h3 id="pact"><a href="#pact" class="headerlink" title="pact"></a><code>pact</code></h3><blockquote><p><strong>An agreement</strong> between <em><strong>two or more people or groups</strong></em>;<br><strong>A treaty</strong> or <strong>formal agreement</strong> between <em><strong>nations</strong></em> to deal with a <em><strong>problem</strong></em> or to resolve a <em><strong>dispute</strong></em>.</p></blockquote><p>E.g.</p><ul><li>The girl made a pact never to reveal what had happened on that terrifying night in the abandoned house.</li></ul><p>Usage</p><ul><li><code>Pact</code> has “<em><strong>peace</strong></em>“ at its root because a pact <strong>often ends a period of unfriendly relations.</strong></li><li>The words is generally used in the field of <strong>international relations</strong>, <ul><li>where diplomats may speak of an “<strong>arm pact</strong>“, a “<strong>trade pact</strong>“, or a “<strong>fishing-right pact</strong>“.</li></ul></li><li>But it may also be used for any <strong>solemn agreement or promise</strong> between two people; after all, whenever two parties shake hands on a deal, they’re not about to go to war with each other.</li></ul><h3 id="pace"><a href="#pace" class="headerlink" title="pace"></a><code>pace</code></h3><blockquote><p>Contrary to the opinion of.</p></blockquote><p>E.g.</p><ul><li>She had only three husbands, <em><code>pace</code></em> some Hollywood historians who claim she had as many as six.</li></ul><p>Usage</p><ul><li>This word looks like another that is much more familiar, but <strong>notice how it’s pronounced</strong>.</li><li>It is used only by <strong>intellectuals</strong> (<em>a person who is well educated and enjoys activities in which they have to think seriously about things</em>), and often printed in <em><strong>italics</strong></em> so that the reader doesn’t mistake it for the other word.</li><li>Writers use it when correcting an opinion that many people believe; for example, “The costs of the program, <em><strong>pace</strong></em> some commentators, will not be significant.”</li><li>So what does pace have to do with peace?<ul><li>Because it says “Peace to them” (that is, to the people I’m mentioning) – I don’t want to start an argument; I just want to correct the facts.</li></ul></li></ul><h2 id="CRIM"><a href="#CRIM" class="headerlink" title="CRIM"></a><code>CRIM</code></h2><blockquote><p>comes from the <em><strong>Latin words</strong></em> for “<strong>fault or crime</strong>“ or “<strong>accusation</strong>“ (<em>a statement saying that you think a person is guilty of doing something wrong or illegal; the fact of accusing somebody</em>).<br>A <code>crime</code> is an act forbidden by the government, which the government will punish you for, and for which you may be branded a <code>criminal</code>.<br>A <code>crime</code> is usually more serious than a <code>tort</code>, a “<strong>civil wrong</strong>“ for which the <strong>wronged</strong> (<em>being injured unjustly; suffering a wrong</em>) person must himself sue if he wants to get repaid in some way.</p></blockquote><h3 id="criminology"><a href="#criminology" class="headerlink" title="criminology"></a><code>criminology</code></h3><blockquote><p>The <em><strong>study</strong></em> of crime, criminals, law <strong>enforcement</strong> (<em>the act of making people obey a particular law or rule</em>), and punishment.</p></blockquote><p>E.g.</p><ul><li>His growing interest in <code>criminology</code> led him to become a <strong>probation officer</strong> (<em>a person whose job is to check on people who are on probation and help them</em>) (<em>probation: a system that allows a person who has committed a crime not to go to prison if they behave well and if they see an official (called a probation officer) regularly for a fixed period of time</em>).</li></ul><p>Usage</p><ul><li><code>Criminology</code> includes <strong>the study of all aspects of crime and law enforcement</strong> – criminal psychology, the social setting of crime, prohibition and prevention, investigation and detection, capture and punishment.</li><li>Thus, <strong>many of the people involved</strong> – legislators, social workers, probation officers, judges, etc. – could possibly be considered <code>criminologists</code>, though <strong>the word usually refers only to scholars and researchers</strong>.</li></ul><h3 id="decriminalize"><a href="#decriminalize" class="headerlink" title="decriminalize"></a><code>decriminalize</code></h3><blockquote><p>To remove or reduce the criminal status of.</p></blockquote><p>E.g.</p><ul><li>An angry debate over <code>decriminalizing</code> doctor-assisted suicide raged all day in the statehouse.</li></ul><p>Usagepapppp</p><ul><li><code>Decriminalization</code> of various “victimless crime” – crime that don’t directly harm others, such as private gambling and drug-taking – has been recommended by <strong>conservatives</strong> (<em>connected with the British Conservative Party</em>) as well as <strong>liberals</strong> (<em>connected with the British Liberal Party in the past, or a Liberal Party in another country</em>), who often claim that it would be ease the burden on the legal system, decrease the amount of money flowing to criminals, and increase personal liberty.</li><li><code>Decriminalization</code> is not the same as legalization; decriminalization may still <strong>call for a small fine</strong> (<em>like a traffic ticket</em>) (<em>call for: to need something</em>), and may apply only to use or possession of something, leaving the actual sale of goods or services illegal.</li></ul><h3 id="incriminate"><a href="#incriminate" class="headerlink" title="incriminate"></a><code>incriminate</code></h3><blockquote><p>To show evidence, of involvement in a crime or a fault.</p></blockquote><p>E.g.</p><ul><li>The muddy <strong>tracks</strong> (<em>track: marks left by a person, an animal or a moving vehicle</em>) leading to and from the cookie jar were enough to <code>incriminate</code> them.</li></ul><p>Usage</p><ul><li><em><strong>Testimony</strong></em> may <code>incriminate</code> a suspect by placing him the scene of a crime, and <code>incriminating</code> evidence is the kind that strongly links him to it.</li><li>But the word doesn’t always refer to an actual crime. <ul><li>We can say, for instance, that a virus has been incriminated as the cause of a type of cancer, or that video games have been incriminated in the decline in study among young people.</li></ul></li></ul><h3 id="recrimination"><a href="#recrimination" class="headerlink" title="recrimination"></a><code>recrimination</code></h3><blockquote><p> <strong>An accusation</strong> in answer to an accusation made against oneself.<br> The <strong>making of such an accusation</strong>.</p></blockquote><p>E.g.</p><ul><li>Their failure to find help led to endless and pointless <code>recriminations</code> over responsibility for the accident.</li></ul><p>Usage</p><ul><li>Defending oneself from a verbal attack <strong>by means of</strong> (<em>through the use of</em>) a <strong>counter-attack</strong> (<em>an attack made in response to the attack of an enemy or opponent in war, sport or an argument</em>) is as natural as physical self-defense.<ul><li>So a disaster often brings <code>recriminations</code> among those connected with it, and divorces and child-<strong>custody</strong> (<em>the legal right or duty to take care of or keep somebody/something; the act of taking care of something/somebody</em>) battles usually involve recriminations between husband and wife.</li></ul></li><li><strong>An actual crime isn’t generally involved, but it may be</strong>; when two suspects start exchanging angry <code>recriminations</code> after they’ve been picked up, it often leads to one of them turning against the other in court.</li></ul><h2 id="PROB"><a href="#PROB" class="headerlink" title="PROB"></a><code>PROB</code></h2><blockquote><p>comes from the <em><strong>Latin words</strong></em> for “<strong>prove or proof</strong>“ and “<strong>honesty or integrity</strong>“.<br>A <code>probe</code>, whether it’s a little object for testing electrical circuits or a spacecraft headed for Mars, is basically something that’s looking for evidence or proof.<br><code>Probable</code> originally described something that wasn’t certain but might be “provable”.</p></blockquote><h3 id="approbation"><a href="#approbation" class="headerlink" title="approbation"></a><code>approbation</code></h3><blockquote><p>A <strong>formal or official act of approving</strong>; <strong>praise</strong>, usually given with pleasure or enthusiasm.</p></blockquote><p>E.g.</p><ul><li>The senate signaled its <code>approbation</code> of the new play by voting for it <strong>unanimously</strong> (<em>by everyone in a particular group</em>) (<em>unanimous: if a decision or an opinion is unanimous, it is agreed or shared by everyone in a group</em>).</li></ul><p>Usage</p><ul><li><code>Approbation</code> is a noun form of <code>approve</code>, but approbation is usually stronger than mere <code>approval</code> (<em>the feeling that somebody/something is good or acceptable; a positive opinion of somebody/something</em>).</li><li><strong>An official commendation for bravery</strong> is an example of approbation; getting reelected to office by a wide margin indicates <code>public approbation</code>; and the <code>social approbation</code> received by a star <strong>quarterback</strong> (<em>the player who directs the team’s attacking play and passes the ball to other players at the start of each attack</em>) in high school usually makes all the pain worthwhile.</li></ul><h3 id="probate"><a href="#probate" class="headerlink" title="probate"></a><code>probate</code></h3><blockquote><p><strong>The process</strong> of proving in the court that the will of someone who has died is valid, and of administering the <strong>estate</strong> (<em>all the money and property that a person owns, especially everything that is left when they die</em>) of a dead person.</p></blockquote><p>E.g.</p><ul><li>When her father died, she thought she would be able to avoid <code>probate</code>, but she wasn’t that lucky.</li></ul><p>Usage</p><ul><li>Ever since people have written wills, those wills have had to be proven <strong>genuine</strong> (<em>real; exactly what it appears to be; not artificial</em>) by a judge.</li><li>Without a <code>probate</code> process, greedy acquaintances or relatives could <strong>write up</strong> (<em>to record something in writing in a full and complete form, often using notes that you made earlier</em>) a fake will stating that all the person’s wealth belonged  to them.</li><li>To establish a will as genuine, it must be witnessed and <strong>stamped</strong> (<em>to print letters, words, a design, etc. onto something using a special tool</em>) by someone officially licensed to do so (<em>though wills have sometimes been approved even when they were just written on a piece of scrap paper, with no witnesses</em>).</li><li>Today we use <code>probate</code> <strong>more broadly</strong> to mean <strong>everything that’s handled</strong> in <code>probate court</code>, special court that <strong>oversees</strong> (<em>to watch somebody/something and make sure that a job or an activity is done correctly</em>) the handling of <strong>estates</strong> (<em>estate: the money and property left when someone dies</em>), making sure that everyone eventually receives what is properly theirs.</li></ul><h3 id="probity"><a href="#probity" class="headerlink" title="probity"></a><code>probity</code></h3><blockquote><p><strong>Absolute</strong> <strong>honesty</strong> and <strong>uprightness</strong>.</p></blockquote><p>E.g.</p><ul><li>Her unquestioned <code>probity</code> helped her win the respect of her fellow judges.</li></ul><p>Usage</p><ul><li><code>Probity</code> is a quality the public generally hopes for in its elected <strong>officials</strong> (<em>(often in compounds) a person who is in a position of authority in a large organization</em>) but doesn’t always get.<ul><li>Banker, for example, have traditionally been careful to <strong>project</strong> (<em>to present somebody/something/yourself to other people in a particular way, especially one that gives a good impression</em>) an air of <code>probity</code>, even though banking scandals and <strong>bailouts</strong> (<em>a rescue from financial distress</em>) have made this harder than ever.</li><li>An <strong>aura</strong> (<em>a feeling or particular quality that is very easy to notice and seems to surround a person or place</em>) of <code>probity</code> surrounds such public figures as Warren Buffett and Bill Moyers, men to whom many Americans would entrust their children and <strong>finances</strong> (<em>finance: the money available to a person, an organization or a country; the way this money is managed</em>).</li></ul></li></ul><h3 id="reprobate"><a href="#reprobate" class="headerlink" title="reprobate"></a><code>reprobate</code></h3><blockquote><p><strong>A person</strong> of thoroughly bad character.</p></blockquote><p>E.g.</p><ul><li>His wife finally left him, claiming that he was a reprobate who would disappear for weeks <strong>at a time</strong> (<em>every time</em>), gambling and drinking <strong>away</strong> (<em>spent, exhaust, run out, use up</em>) all his money. </li></ul><p>Usage</p><ul><li>The related verb of <code>reprobate</code> is <code>reprove</code>, which originally, as the <strong>opposite of</strong> <code>approve</code>, meant “<strong>to condemn</strong>“. </li><li>Thus, a <code>reprobate</code>, as the word was <strong>used in Biblical translations</strong>, was <strong>someone condemned to hell</strong>.</li><li>But for many years <code>reprobate</code> has been said in a tone of <strong>joshing</strong> (<em>josh: to gently make fun of somebody or talk to them in a joking way</em>) <strong>affection</strong> (<em>a feeling of liking or love and <strong>caring</strong> (kind, helpful and showing that you care about other people)</em>), usually to <strong>describe someone of doubtful morals but good humor</strong>.<ul><li>Shakespeare’s great character Falstaff – a lazy, lying, boastful, sponging <strong>drunkard</strong> (<em>a person who gets drunk very often</em>) – is the model of a <code>reprobate</code>, but still everyone’s favorite Shakespeare character.</li></ul></li></ul><h2 id="GRAV"><a href="#GRAV" class="headerlink" title="GRAV"></a><code>GRAV</code></h2><blockquote><p>comes from the <em><strong>Latin word</strong></em> meaning “<strong>heavy</strong>, <strong>weighty</strong>, <strong>serious</strong>“.<br><code>Gravity</code> is, of course, what makes things heavy, and without it there wouldn’t be any life on earth, since nothing would stay on earth at all. This doesn’t stop us from yelling in outrage when the familiar <code>laws of gravity</code> cause something to drop to the floor and break.</p></blockquote><h3 id="grave"><a href="#grave" class="headerlink" title="grave"></a><code>grave</code></h3><blockquote><p>Requiring serious thought or concern.<br>Serious and formal in appearance or manner.</p></blockquote><p>E.g.</p><ul><li>We realized that the situation was <code>grave</code> and the slightest incident could spark <strong>all-out</strong> (<em>in a very determined way using every possible effort</em>) war.</li></ul><p>Usage</p><ul><li><code>Gravity</code> has a familiar physical meaning but also a nonphysical meaning – basically “seriousness”. Thus, something <code>grave</code> possesses <code>gravity</code>.</li><li>You can refer to <strong>the gravity of a person’s manner</strong>, though public figures today seem to have a lot less gravity than they used to have.</li><li>Or you can talk about a <strong>grave situation</strong>, as in the example sentence.</li><li>But even though Shakespeare makes a <strong>pun</strong> (<em>the clever or humorous use of a word that has more than one meaning, or of words that have different meanings but sound the same</em>) on <code>grave</code> when a dying character talks about being buried the next day (“Ask for me tomorrow and you shall find me a grave man”), the word meaning “hole for burying a body” isn’t actually related.</li></ul><h3 id="gravitas"><a href="#gravitas" class="headerlink" title="gravitas"></a><code>gravitas</code></h3><blockquote><p>Great or very <strong>dignified</strong> (<em>calm and serious and deserving respect</em>) <em><strong>seriousness</strong></em>.</p></blockquote><p>E.g.</p><ul><li>The head of the committee never failed to carry herself with the <code>gravitas</code> she felt was appropriate to her office.</li></ul><p>Usage</p><ul><li>This word comes to us straight from <em><strong>Latin</strong></em>.</li><li>Among the <strong>Romans</strong> (<em>a book of the Bible</em>), <code>gravitas</code> was thought to be essential to the character and functions of any adult (male) in authority. Even the head of a <strong>household</strong> (<em>all the people living together in a house or flat (a set of rooms for living in, usually on one floor of a building)</em>) or a low-level official would strive for this important quality.</li><li>We use gravitas today to identify the same solemn dignity in men and women, but it seems to come easier in those who are over 60, slow-moving – and a bit overweight.</li></ul><h3 id="gravitate"><a href="#gravitate" class="headerlink" title="gravitate"></a><code>gravitate</code></h3><blockquote><p>To move or be <strong>drawn</strong> (<em>draw: to move in the direction mentioned</em>) toward something, especially by natural tendency or <strong>as if</strong> (<em>used to describe somebody/something appearing to be somebody/something else</em>) by an invisible force.</p></blockquote><p>E.g.</p><ul><li>On hot evenings, the town’s social life <strong><code>gravitated toward</code></strong> the <strong>lakefront</strong> (<em>the land along the edge of a lake</em>), where you could <strong>stroll</strong> (<em>to walk somewhere in a slow relaxed way</em>) the long <strong>piers</strong> (<em>pier: a long structure built in the sea and joined to the land at one end, often with places of entertainment on it</em>) eating ice cream or dance at the old Casino.</li></ul><p>Usage</p><ul><li>To <code>gravitate</code> is <strong>to respond</strong>, almost <strong>unconsciously</strong>, to <strong>a force that works like</strong> <code>gravity</code> to draw things steadily to it as if by their own weight.<ul><li>Thus, young people <code>gravitate toward</code> a role model, <strong>moths</strong> (<em>moth: an insect resembling a butterfly, generally differing in having a duller color and differently shaped antennae, and in being active at night</em>.) <code>gravitate to</code> a flame, a conversation might <code>gravitate toward</code> politics, and everyone at a party often <code>gravitate to</code> the bar.</li></ul></li></ul><h3 id="aggravate"><a href="#aggravate" class="headerlink" title="aggravate"></a><code>aggravate</code></h3><blockquote><p>To make (injury, problem, etc.) more serious or severe.<br>To annoy or bother.</p></blockquote><p>E.g.</p><ul><li>She went back to the soccer team before the knee was completely healed, which naturally aggravated the injury.</li></ul><p>Usage</p><ul><li>Since the <code>grav-</code> root means basically “<strong>weighty</strong> or <strong>serious</strong>“ the original meaning of <code>aggravate</code> was “<strong>to make more serious</strong>“.<ul><li>A bad relationship with your parents can <code>be aggravated by </code>marrying someone who nobody likes, for example.</li><li>Or a <strong>touchy</strong> (<em>(of a person) easily upset or offended</em>) trade relationship between two countries can <code>be aggravated by</code> their <strong>inability</strong> (<em>the fact of not being able to do something</em>) to agree on climate-change issues.</li><li>Depression can <code>be aggravated by</code> <strong>insomnia</strong> (<em>the condition of being unable to sleep</em>) – and insomnia can <code>be aggravated by</code> depression.</li></ul></li><li>But when most people use <code>aggravate</code> <em><strong>today</strong></em>, they <em><strong>employ its “annoy” sense</strong></em>, as in “What really aggravates my dad is having to listen to that TV all day long.”</li></ul><h2 id="LEV"><a href="#LEV" class="headerlink" title="LEV"></a><code>LEV</code></h2><blockquote><p>comes from the <em><strong>Latin adjective</strong></em> <code>levis</code>, meaning “<strong>light</strong>“, and the verb <code>levare</code>, meaning “<strong>to raise or lighten</strong>“ (<em>lighten something: to reduce the amount of work, debt, worry, etc. that somebody has</em>).<br>So a <code>lever</code> (<em>杠杆</em>) is a bar used to lift something, by means of <code>leverage</code> (<em>杠杆作用</em>).<br>And <code>levitation</code> (<em>the act or process of levitating; especially the rising or lifting of a person or thing by means held to be supernatural</em>) is the magician’s trick in which a body seems to rise into the air by itself.</p></blockquote><h3 id="alleviate"><a href="#alleviate" class="headerlink" title="alleviate"></a><code>alleviate</code></h3><blockquote><p>To lighten, <strong>lessen</strong> (<em>to become or make something become smaller, weaker, less important, etc.</em>), or relieve, especially physical or mental suffering.</p></blockquote><p>E.g.</p><ul><li><strong>Cold compresses</strong> (<em>冷敷法</em>) <code>alleviated</code> the <em><strong>pain of the</strong></em> <em><strong>physical injury</strong></em>, but only <strong>time</strong> could <em><strong>alleviate the effect of the insult</strong></em>.</li></ul><p>Usage</p><ul><li><strong>Physical pain</strong> or <strong>emotional anguish</strong>, or a <strong>water shortage</strong> or <strong>traffic congestion</strong>, can all <code>be alleviated by</code> providing the appropriate remedy. </li><li>But <em><strong>some</strong></em> <strong>pain</strong> or <strong>anguish</strong> or <strong>shortage</strong> or <strong>congestion</strong> will remain: <code>to alleviate is not to cure</code>.</li></ul><h3 id="elevation"><a href="#elevation" class="headerlink" title="elevation"></a><code>elevation</code></h3><blockquote><p>The height of a place.<br>The act or result of lifting or raising someone or something.</p></blockquote><p>E.g.</p><ul><li>Her doctor is concerned about the <code>elevation</code> (<em>an increase in the level or amount of something</em>) of her blood pressure since her last visit.</li></ul><p>Usage</p><ul><li>When you’re hiking, you may be interested in knowing<code> the highest elevation</code> you’ll be reaching.</li><li>Psychologists use the term “<code>mood elevation</code>“ to mean improvement in a patient’s depression, and some leg <strong>ailments</strong> (<em>ailment: an illness that is not very serious</em>) require <code>elevation</code> of the limb, usually so that it’s higher than the heart for part of each day.</li><li><code>Elevation</code> can also mean “<strong>promotion</strong>“; thus a <strong>vice president</strong> (<em>the person below the president of a country in rank, who takes control of the country if the president is not able to</em>) may <code>be elevated to</code> president, or a captain may <code>be elevated to</code> <strong>admiral</strong> (<em>an officer of very high rank in the navy</em>).</li></ul><h3 id="cantilever"><a href="#cantilever" class="headerlink" title="cantilever"></a><code>cantilever</code></h3><blockquote><p>A long piece of wood, metal, etc., that <strong>sticks out</strong> (<em>to be further out than something else or to come through a hole; to push something further out than something else or through a hole</em>) from a wall to support something above it.</p></blockquote><p>E.g.</p><ul><li>The house’s <strong>deck</strong> (<em>a floor or platform similar to the deck of a ship</em>), supported by <code>cantilevers</code>, <strong>jutted</strong> (<em>jut: to stick out further than the surrounding surface, objects, etc.; to make something stick out</em>) dramatically over the rocky slope, and looking over the edge made him <strong>dizzy</strong> (<em>feeling as if everything is turning (turn: to move or make something move around a central point) around you and that you are not able to balance</em>).</li></ul><p>Usage:</p><ul><li><code>Cantilever</code> hold up a surface or room without themselves being supported at their outer end.<ul><li>Many outdoor balconies <code>are cantilevered</code>, and theater balconies may be as well.</li><li>A cantilevered bridge may have a huge span (<em>as long as 1,800 feet (feet: a unit for measuring length equal to 12 inches or 30.48 centimeters)</em>) <strong>built out</strong> (<em>增建</em>) on either side of a single large foundation <strong>pier</strong> (<em>a large strong piece of wood, metal or stone that is used to support a roof, wall, bridge, etc.</em>).</li></ul></li><li>Architects sometimes use <code>cantilevered construction</code> to produce dramatic effects.<ul><li>Frank Lloyd Wright’s “<strong>Fallingwater</strong>“ house, which extends out over a rocky river, is a famous example.<ul><li>![[Pasted image 20220903130221.png]]</li></ul></li><li>But the Grand Canyon’s “Skywalk” has become perhaps the best-known piece of <code>cantilevered construction</code> in America.<ul><li>![[Pasted image 20220903130705.png]]</li></ul></li></ul></li></ul><h3 id="levity"><a href="#levity" class="headerlink" title="levity"></a><code>levity</code></h3><blockquote><p>Lack of appropriate seriousness.</p></blockquote><p>E.g.</p><ul><li>The <strong>Puritan</strong> (<em>清教徒</em>) elders tried to ban <code>levity</code> of all sorts from the community’s meetings, but found it increasingly difficult to control the younger generation.</li></ul><p>Usage</p><ul><li><code>Levity</code> originally was thought to be <strong>a physical force exactly like gravity</strong> but <strong>pulling in the opposite direction</strong>, like <strong>helium</strong> (<em>a gas that is lighter than air and is used to make balloons float. It is a chemical element: symbol <em><strong>He</strong></em></em>) in a balloon. As recently as the 19th century, scientists were still arguing about its existence.</li><li>Today <code>levity</code> refers only to <strong>lightness in manner</strong>. To stern believers of some religious faiths, <code>levity</code> is often regarded as almost sinful.</li><li>But the word, like its synonym <em><strong>frivolity</strong></em> (<em>behavior that is silly or funny, especially when this is not suitable</em>), now has an old-fashined ring to it (<em>现在听起来有点老套</em>) and is <strong>usually used only half-seriously</strong>.</li></ul><h2 id="Words-from-Mythology-and-History"><a href="#Words-from-Mythology-and-History" class="headerlink" title="Words from Mythology and History"></a>Words from Mythology and History</h2><h3 id="cicerone"><a href="#cicerone" class="headerlink" title="cicerone"></a><code>cicerone</code></h3><blockquote><p>A guide, especially one who takes tourists to museums, monuments, or architectural sites and explains what is being seen.</p></blockquote><p>E.g.</p><ul><li>On <strong>Crete</strong> (<em>the largest island belonging to Greece</em>) they <strong>sought out</strong> (<em>to look for and find somebody/something, especially when this involves using a lot of effort</em>) a highly recommended <code>cicerone</code>, hoping to receive the best possible introduction to the <strong>noteworthy</strong> (<em>deserving to be noticed or to receive attention because it is unusual, important or interesting</em>) historical sites.</li></ul><p>From</p><ul><li>The Roman statesman and <strong>orator</strong>(<em>a person who makes formal speeches in public or is good at public speaking</em>) <em><strong>Cicero</strong></em> was renowned for his elegant style and great knowledge(and occasional long-windedness).</li></ul><h3 id="hector"><a href="#hector" class="headerlink" title="hector"></a><code>hector</code></h3><blockquote><p>To bully or harass by <strong>bluster</strong>(<em>to talk in an aggressive or threatening way, but with little effect</em>) or personal pressure.</p></blockquote><p>E.g</p><ul><li>He would <strong>swagger</strong>(<em>to walk in an extremely proud and confident way</em>) around the apartment entrance with his friends and <code>hector</code> the terrified inhabitants going in and out.</li></ul><p>From</p><ul><li>In <strong>Homer</strong>‘s(<em>a Greek poet who probably lived around 800 to 700 years B.C.</em>) great <em><strong>Iliad</strong></em>, Hector wa the leader of the <strong>Trojan</strong>(<em>特洛伊</em>) forces, and the very model of nobility and honor.<ul><li>In the Greek war against Troy, he killed several great warriors before being slain by Achillies. His name(Hector) began to take its current meaning only after gands of bullying young <strong>rowdies</strong>.(<em>rowdy: a person who makes a lot of noise or is likely to cause trouble</em>)</li></ul></li></ul><h3 id="hedonism"><a href="#hedonism" class="headerlink" title="hedonism"></a><code>hedonism</code></h3><blockquote><p>An attitude or way of life based on the idea that pleasure or happiness should be the chief(most important) goal.</p></blockquote><p>E.g.</p><ul><li>In her new spirit of <code>hedonism</code>, she went out for a massage, picked up champagne and chocolate <strong>truffles</strong>(<em>truffle: a soft round sweet made of chocolate</em>), and made a date that evening with an old boyfriend.</li></ul><p>From</p><ul><li>Derived from the Greek work for “pleasure”, <code>hedonism</code> over the ages has provided the basis for several philosophies.<ul><li>The ancient <strong>Epicureans</strong>( <em>epicurean: taking great pleasure in things, especially food and drink, and enjoying yourself</em>) and the 19th-century Utilitarians both taught and pursued <code>hedonistic</code> principles.</li></ul></li></ul><p>Usage</p><ul><li>We generally use the word today when talking about <em><strong>immediate pleasures</strong></em> for the senses.</li><li>Philosophers who talk about <code>hedonism</code> are usually talking about quiet pleasures that aren’t pursued in a selfish way.</li></ul><h3 id="nestor"><a href="#nestor" class="headerlink" title="nestor"></a><code>nestor</code></h3><blockquote><p>A senior <em><strong>figure</strong></em> or <em><strong>leader</strong></em> in one’s field.</p></blockquote><p>E.g.</p><ul><li>The guest of honor was a <code>nestor</code> among journalists, and after dinner he shared some of his wisdom with the audience.</li></ul><p>From</p><ul><li><em><strong>Nestor</strong></em> was another character from the <em><strong>Iliad</strong></em>, the eldest of the Greek leaders in the Trojan War. A great warrior as a young man, he was now noted for his wisdom and his <strong>talkativeness</strong>(<em>talkative: liking to talk a lot</em>), both of which increased as his aged.</li></ul><p>Usage</p><ul><li>These days, a <code>nestor</code> is not necessarily <strong>long-winded</strong>(<em>tediously long in speaking or writing</em>), but merely wise and generous with his advice.</li></ul><h3 id="spartan"><a href="#spartan" class="headerlink" title="spartan"></a><code>spartan</code></h3><blockquote><p>Marked by <em><strong>simplicity</strong></em>, avoidance of luxury, and often strict self-discipline or <strong>self-denial</strong>(<em>a restraint or limitation of one’s own desires or interests</em>).</p></blockquote><p>E.g.</p><ul><li>When he was single, he had lived a <strong><code>spartan</code> life</strong> in a tiny, undecorated apartment with one chair, a table, and a bed.</li></ul><p>From</p><ul><li>In ancient times, the Greek <strong>city-state</strong>(<em>城邦</em>) of <strong>Sparta</strong>(<em>斯巴达</em>) had a reputation for severe and highly disciplined way of life it enforced among its citizens, so as to keep them ready for war at any time.</li></ul><h3 id="stentorian"><a href="#stentorian" class="headerlink" title="stentorian"></a><code>stentorian</code></h3><blockquote><p><em><strong>Extremely loud</strong></em>, often with especially deep richness of sound.</p></blockquote><p>E.g.</p><ul><li>Even without a microphone, his <strong><code>stentorian</code> voice</strong> was clearly audible in the last rows of the auditorium.</li></ul><p>From </p><ul><li><em><strong>Stentor</strong></em>, like <em><strong>Hector</strong></em>, was a warrior in the Iliad, but on the Greek side.<ul><li>His unusually powerful voice (Homer calls hime “brazen-voiced” – that is, with a voice like a brass instrument) made him the natural choice for delivering announcements and proclamations to the assembled Greek army, in an era when there was no way of artificially increasing the volume of a voice.</li></ul></li></ul><h3 id="stoic"><a href="#stoic" class="headerlink" title="stoic"></a><code>stoic</code></h3><blockquote><p>Seemingly indifferent to pleasure or pain.</p></blockquote><p>E.g.</p><ul><li>She bore the pain of her broken leg with such <code>stoic</code> patience that most of us had no idea she was suffering.</li></ul><p>From </p><ul><li>The <em><strong>Stoics</strong></em> were members of a philosophical movement that first appeared in ancient Greece and lasted well into the Roman era.</li><li><em><strong><code>Stoicism</code></strong></em> taught that humans should seek to free themselves from joy, grief, and passions of all kinds in order to attain wisdom; its teachings thus have much in common with Buddhism.</li></ul><p>Usage</p><ul><li>Today we admire the kind of <code>stoicism</code> that enables some people to endure both mental and physical pain without complaint.</li></ul><h3 id="sybaritic"><a href="#sybaritic" class="headerlink" title="sybaritic"></a><code>sybaritic</code></h3><blockquote><p>Marked by a luxurious or <strong>sensual</strong>(<em>connected with your physical feelings; giving pleasure to your physical senses, especially sexual pleasure</em>) way of life.</p></blockquote><p>E.g.</p><ul><li>When I knew them they were living a <code>sybaritic</code> <strong>existence</strong>(<em>a way of living, especially when this is difficult or boring</em>) – <strong>hopping</strong>(<em>hop: to go or move somewhere quickly and suddenly</em>) from <strong>resort</strong>(<em>a place where a lot of people go for holidays</em>) ot resort, each more <strong>splendid</strong>(<em>very impressive; very beautiful</em>) than the last – but a year later the money ran out.</li></ul><p>From</p><ul><li>The ancient city of <em><strong>Sybaris</strong></em> (<em>near modern Terranova di Sibari</em>), found by the Greeks on the toe of Italy’s “boot”, was famous for the welth and luxury of its citizens in the 6th century B.C.<ul><li>But the <em><strong>Sybarites</strong></em>‘(<em>a native or resident of the ancient city of Sybaris</em>) welth made them overconfident, and when they went to war with a nearby city, they were defeated by a much smaller army.</li><li>After the victory, their enemies <strong>diverted</strong>(<em>divert: to make somebody/something change direction</em>) the <strong>course</strong>(<em>the direction a river moves in</em>) of the river running through Sybaris so that it destroyed the whole city forever.</li></ul></li></ul><h1 id="Unit-2"><a href="#Unit-2" class="headerlink" title="Unit 2"></a>Unit 2</h1><h2 id="MANIA"><a href="#MANIA" class="headerlink" title="MANIA"></a><code>MANIA</code></h2><blockquote><p>in Latin means “madness”, and the meaning passed over into English unchanged.<br>Our word <code>mania</code> can mean a mental illness, or at least an excessive enthusiasm.<br>We might call someone a <code>maniac</code> who was wild, violent, and mental ill – or may be just really enthusiastic about something.<br>To much coffeine might make your a bit <code>manic</code>.<br>    But the intense mood swings once known as <code>manic-depressive illness</code>(<em>狂躁抑郁症</em>) are now usually called <em><code>bipolar disorder</code></em> instead.</p></blockquote><h3 id="kleptomania"><a href="#kleptomania" class="headerlink" title="kleptomania"></a><code>kleptomania</code></h3><blockquote><p>A mental illness in which a person has a strong desire to steal things.</p></blockquote><p>E.g.</p><ul><li><code>Kleptomania</code> leads its sufferers to steal items of little value that they don’t need anyway.</li></ul><p>From</p><ul><li><code>Klepto-</code> comes from the Greek word <em><code>kleptein</code></em>, “to steal”.</li></ul><p>Usage</p><ul><li>Even though <code>kleptomania</code> is often <strong>the butt of</strong> (<em>to be the person or thing that other people often make jokes about</em>) jokes, its actually a serious mental illness, often associated with mood disorders, anxiety disorders, eating disorders, and <strong>substance abuse</strong> (<em>the habit of taking too much of a harmful drug or drinking too much alcohol</em>).</li><li><code>Kleptomaniacs</code> tend to be depressed, and mang live lives of secret shame because they’re afraid to seek treatment.</li></ul><h3 id="dipsomaniac"><a href="#dipsomaniac" class="headerlink" title="dipsomaniac"></a><code>dipsomaniac</code></h3><blockquote><p>A person with extreme and uncontrollable desire for alcohol.</p></blockquote><p>E.g.</p><ul><li>She didn’t like the word <em><strong>alcoholic</strong></em> (<em>regularly drinking too much alcohol and unable to stop easily, so that it has become an illness</em>) being applied to her, and like <code>dipsomaniac</code> even less.</li></ul><p>From</p><ul><li><code>Dipsomaniac</code> comes from the Greek noun <code>dipsa</code>, “thirst”, but thirst usually has nothing to do with it.</li></ul><p>Usage</p><ul><li>Some experts distinguish between an <em><strong>alcoholic</strong></em> and a <code>dipsomaniac</code>, reserving <code>dipsomaniac</code> for some involved  in frequent <strong>episode</strong> (<em>a period of time during which somebody is affected by a particular illness or a particular stage of a longer illness</em>) of <strong>binge</strong> (<em>a short period of time when somebody does too much of a particular activity, especially eating or drinking alcohol</em>) drinking and <strong>blackouts</strong> (<em>blackout: to become unconscious for a short time</em>).</li><li><strong>In any case</strong> (<em>whatever happens or may have happened</em>), there are plenty of less respectful words for a person of similar habits: <ul><li><em><strong>sot</strong></em>: someone who is drunk all the time.</li><li><em><strong>lush</strong></em>: (informal) an alcoholic.</li><li><em><strong>wino</strong></em>: a person who drinks a lot of cheap alcohol and who has no home.</li><li><em><strong>souse</strong></em>: a habitual drunkard</li><li><em><strong>boozer</strong></em>: a person who drinks a lot of alcohol</li><li><em><strong>guzzler</strong></em>: (informal) especially in compounds, a person who drinks or eats something quickly and in large amounts; somebody/something that uses a lot of fuel, power or another resource.</li><li><em><strong>tippler</strong></em>: a person who drinks alcohol regularly</li><li><em><strong>tosspot</strong></em>: an offensive word for an unpleasant or stupid person; drunkard: a drunken person (archaic (<em>old and no longer used</em>) or literary)</li><li><em><strong>drunkard</strong></em>: a person who gets drunk very often</li><li><em><strong>boozehound</strong></em>: <strong>excessive drinker:</strong> a heavy drinker of alcohol (slang(<em>very informal words and expressions that are more common in spoken language, especially used by a particular group of people, for example, children, criminals, soldiers, etc.</em>))</li><li>the list goes on and on and on.</li></ul></li></ul><h3 id="megalomaniac"><a href="#megalomaniac" class="headerlink" title="megalomaniac"></a><code>megalomaniac</code></h3><blockquote><p>A mental disorder marked by feelings of great personal power and importance.</p></blockquote><p>E.g.</p><ul><li>When the governor started calling for arming his Nation Guard with nuclear weapons, the voter finally realized they had elected a <code>megalomaniac</code>.</li></ul><p>From</p><ul><li>Since the Greek root <code>megalo</code> means “large”, someone who is <code>megalomaniacal</code> has mental disorder marked by feelings of personal <strong>grandeur</strong> (<em>the importance or social status somebody has or thinks they have</em>).</li></ul><p>Usage</p><ul><li><code>Megalomania</code> has probably <strong>afflicted</strong> (<em>afflict: to affect somebody/something in an unpleasant or harmful way</em>) many rulers throughout history:<ul><li>The Roman emperor <strong>Caligula</strong> (<em>(12–41 AD) a Roman emperor who was known for being extremely violent, cruel, and mad</em>) insisted that he be worshipped as a living god.</li><li>Joseph Stalin suffered from the <strong>paranoia</strong>(<em>a mental illness in which a person wrongly believes that other people are trying to harm them, that they are somebody very important, etc.</em>) that often accompanies <code>megalomania</code>, and had thousands of his countrymen executed as a result.</li><li>J.-B. Bokassa, dictator of a small and extremely poor African nation, proclaimed himself emperor of the country he renamed the Central African Empire.</li><li>And even democratically elected leaders have often aquired huge egos as a result of public acclaim.</li></ul></li><li>But <code>megalomaniac</code> is generally thrown around as an <em><strong>insult and rarely to real mental illness</strong></em>.</li></ul><h3 id="egomaniac"><a href="#egomaniac" class="headerlink" title="egomaniac"></a><code>egomaniac</code></h3><blockquote><p>Someone who is extremely self-centered and ignores the problems and concerns of others.</p></blockquote><p>E.g.</p><ul><li>He’s a completely unimpressive person, but that doesn’t keep him from being an egomaniac.</li></ul><p>From</p><ul><li><code>Ego</code> is Latin for “I”, and in English <code>ego</code> usually means “sense of self-worth”.</li></ul><p>Usage</p><ul><li>Most people’s egos stay at a healthy level, but some become exaggerated.  <code>Egomaniacs</code> may display a grandiose sense of self-importance, with fantasies about their own brilliance or beauty, intense envy of others, a lack of sympathy, and a need to be adored or feared.</li><li>But, like <em><strong>megalomaniac</strong></em>, the word <code>egomaniac</code> is thrown around by lots of people who don’t mean much more by it than <em><strong>blowhard</strong></em>(<em>a person who talks too proudly about something they own or something they have done</em>) or <em><strong>know-it-all</strong></em>(<em>a person who behaves as if they know everything</em>).</li></ul><h2 id="PSYCH"><a href="#PSYCH" class="headerlink" title="PSYCH"></a><code>PSYCH</code></h2><blockquote><p>comes from the Greek word <code>psyche</code>, meaning “breath, life, soul”.<br><code>Psychology</code> is the science of mind and behavior, and a <code>psychologist</code> <strong>treats</strong>(<em>treat: to give medical care or attention to a person, an illness, an injury, etc.</em>) or studies the mental problems of individuals and groups.<br><code>Psychiatry</code> is a branch of medicine that deals with mental and emotional disorders, and a <code>psychiatrist</code> (like any other doctor) may prescribe drugs to treat them.</p></blockquote><h3 id="psyche"><a href="#psyche" class="headerlink" title="psyche"></a><code>psyche</code></h3><blockquote><p>Soul, personality, mind.</p></blockquote><p>E.g.</p><ul><li><strong>Analysts</strong> (<em>analyst: (also psychoanalyst)a person who treats patients using psychoanalysis</em>) are constantly trying to understand the nation’s <code>psyche</code> and why the U.S. often behaves so differently from other countries.</li></ul><p>From</p><ul><li><strong>Sometime</strong> (<em>at a time that you do not know exactly or has not yet been decided</em>) back in the 16th century, we borrowed the word <code>psyche</code> directly from Greek into English.</li><li>In Greek mythology, <code>Psyche</code> was a beautiful princess who fell in love with Eros(<em>in Greek mythology, the god of sexual and romantic love. In Roman mythology his name is Cupid.</em>), god of love, and went through terrible trials before being allowed to marry him. The story is often understood to be about the soul redeeming itself through love.</li><li>To the Greeks, <code>psyche</code> is also meant “butterfly”, which suggests how they imagined the soul.</li></ul><p>Usage</p><ul><li>In English, <code>psyche</code> often sound less spiritual than <em><strong>soul</strong></em>, less intellectual than <em><strong>mind</strong></em>, and more private that <em><strong>personality</strong></em>.</li></ul><h3 id="psychedelic"><a href="#psychedelic" class="headerlink" title="psychedelic"></a><code>psychedelic</code></h3><blockquote><ol><li>Of or relating to a drug (such as <strong>LSD</strong>(<em>a powerful illegal drug that affects people’s minds and makes them see and hear things that are not really there.</em>)) that produces abnormal and often extreme mental effects such as <strong>hallucinations</strong> (<em>hallucination: the fact of seeming to see or hear somebody/something that is not really there, especially because of illness or drugs</em>).</li><li>Imitating the effects of <code>psychedelic</code> drugs.</li></ol></blockquote><p>E.g.</p><ul><li>In her only <code>psychedelic</code> experience, back in 1970, she had watched with horror as walls began crawling with bizarrely colored creatures.</li></ul><p>Usage</p><ul><li>The most famous – or notorious – of the <code>psychedelic</code> drugs is <em><strong>LSD</strong></em>, a comound that can be obtained from various mushrooms and other fungi but is usually created in the lab.</li><li>The other well-known <code>psychedelics</code> are <em><strong>psilocybin</strong></em> (likewise obtained from fungi) and <em><strong>mescaline</strong></em> (obtained from <strong>peyote cactus</strong> (<em>peyote: a small, blue-green cactus that contains a powerful drug that affects people’s minds</em>)(<em>cactus: a plant that grows in hot dry regions, especially one with thick stems covered in spines but without leaves. There are many different types of cactus.</em>)). </li><li>How <code>psychedelics</code> produce their effects is still <strong>fairly</strong> (<em>to some extent but not very</em>) mysterious, partly because research ceased for almost 20 years because of their reputation. but scientists are determined to find the answers and much research is now under way.</li><li><code>Psychedelics</code> are now used to treat anxiety in patients with cancer, and are being tested in the treatment of such serious condition as severe depression, <strong>alcoholism</strong> (<em>the medical condition caused by drinking too much alcohol regularly; poisoning by alcohol</em>), and drug addiction.</li></ul><h3 id="psychosomatic"><a href="#psychosomatic" class="headerlink" title="psychosomatic"></a><code>psychosomatic</code></h3><blockquote><p>Caused by mental or emotional problems rather than physical illness.</p></blockquote><p>E.g.</p><ul><li>Her doctor assumed her stomach problems were <code>psychosomatic</code> but gave her some harmless <strong>medication</strong> (<em>a drug or another form of medicine that you take to prevent or to treat an illness; treatment involving drugs</em>) anyway.</li></ul><p>From</p><ul><li>Since the Greek word <code>soma</code> means “body”, <code>psychosomatic</code> suggests the link between mind and body.</li></ul><p>Usage</p><ul><li>Since one’s mental state may have an important effect on one’s physical state, research on new medicines always involves giving some patients in the experiment a <strong>placebo</strong> (<em>fake medicine</em>), and some who receive the sugar pills will seem to improve.</li><li>You may hear someone say of someone else’s symptoms, “Oh, it’s probably just <code>psychosomatic</code>“, implying that the physical pain or illness is imaginary – may be just an attempt to get sympathy – and the person could will it away if he or she wanted to. But this can be <strong>harsh</strong> (<em>cruel, severe and unkind</em>) and unfair, since, whatever the cause is, the pain is usually real.</li></ul><h3 id="psychotherapist"><a href="#psychotherapist" class="headerlink" title="psychotherapist"></a><code>psychotherapist</code></h3><blockquote><p>One who treats mental or emotional disorder or related bodily ills by psychological <strong>means</strong> (<em>means: an action, an object or a system by which a result is achieved; a way of achieving or doing something</em>).</p></blockquote><p>E.g.</p><ul><li>He’s getting medication from a <em><strong>psychiatrist</strong></em> (<em>a doctor who studies and treats mental illnesses</em>), but it’s his sessions with the <code>psychotherapist</code> that he really <strong>values</strong> (<em>value: to think that somebody/something is important</em>).</li></ul><p>Usage</p><ul><li>Many psychologists offer pyschological <strong>counseling</strong> (<em>counsel: advice, especially given by older people or experts; a piece of advice</em>), and psychological counseling can usually be called <code>psychotherapy</code>, so many psychologists can be called <code>psychotherapists</code>.</li><li>The most intense form of <code>psychotherapy</code>, called <code>pychoanalysis</code>, usually requires several visits a week. A <strong>competing</strong> (<em>unable to exist or be true at the same time</em>) type of therapy known as <em><strong>behavior therapy</strong></em> focuses on changing a person’s behavior (often some individual habit such as <strong>stuttering</strong> (<em>stutter: a speech problem in which a person finds it difficult to say the first sound of a word and repeats it several times</em>), <strong>tics</strong> (<em>tic: a sudden, quick movement of a muscle, especially in your face or head, that you cannot control</em>), or <strong>phobias</strong> (<em>phobia: a strong unreasonable fear of something</em>)) without looking very deeply into hist or her mental state.</li></ul><h2 id="CEPT"><a href="#CEPT" class="headerlink" title="CEPT"></a><code>CEPT</code></h2><blockquote><p>comse from the Latin verb meaning “take, seize”.<br><code>Capture</code>(<em>the act of capturing somebody/something or of being captured</em>) which is what a <code>captor</code>(<em>a person who captures a person or an animal and keeps them as a prisoner</em>) has done to a <code>captive</code>(<em>a person who is kept as a prisoner, especially in a war</em>), has the same meaning.<br><code>Captivate</code> once meant literally  “capture”, but now means only to capture meantally through <em><strong>charm or appeal.</strong></em><br>But in some other English words this root produces, such as those below, its meaning is <em><strong>harder to find</strong></em>.</p></blockquote><h3 id="reception"><a href="#reception" class="headerlink" title="reception"></a><code>reception</code></h3><blockquote><ol><li>The act of receiving.</li><li>A social <strong>gathering</strong> (<em>a meeting of people for a particular purpose</em>) where guests are <strong>formally</strong> (<em>in a very correct way that is suitable for official or important occasions</em>) welcomed.</li></ol></blockquote><p>E.g.</p><ul><li>Although the <code>reception</code> of her plan by the board of directors was enthusiastic, it was months before anything was done about it.</li></ul><p>From</p><ul><li><code>Reception</code> is the noun form of <code>receive</code>. So at a formal <code>reception</code>, guests are received or welcomed or “<strong>taken in</strong>“(<em>be taken in: 受骗，上当；被接纳</em>).</li></ul><p>Usage</p><ul><li>A <code>bad TV reception</code> means the signal isn’t being received well. </li><li>When a new novel receives good reviews, we say it has met with a <code>good critical reception</code>, on the other hand, that’s the same as saying that it wasn’t <code>well-received</code>.</li></ul><h3 id="intercept"><a href="#intercept" class="headerlink" title="intercept"></a><code>intercept</code></h3><blockquote><p>To stop, seize, or interrupt (something or someone) before arrival.</p></blockquote><p>E.g.</p><ul><li>The <strong>explosives</strong> (<em>explosive: a substance that is able or likely to cause an explosion</em>) had been <code>intercepted</code> by police just before being loaded onto the <strong>jet</strong> (<em>jet: a plane driven by jet engines(jet engine: an engine that drives an aircraft forwards by pushing out a stream of gases behind it)</em>).</li></ul><p>From</p><ul><li>Since the prefix <code>inter</code> means “between”, it’s not hard to see how <code>intercept</code> was created.</li></ul><p>Usage</p><ul><li><strong>Arms</strong> (<em>arms: weapons, especially as used by the army, navy, etc.</em>) <strong>shipments</strong> (<em>shipment: the process of sending goods from one place to another</em>) coming to a country are sometimes <code>intercept</code>, but such <code>intercepts</code> can sometimes be understood as acts of war.</li><li>In football, soccer, and basketball, players try to <code>intercept</code> the ball as it’s being passed by the other team.</li><li>In years gone by, letters and documents being carried between <strong>officers</strong>(<em>officer: (often in compounds) a person who is in a position of authority in the government or a large organization</em>) or <strong>officials</strong>(<em>(often in compounds) a person who is in a position of authority in a large organization</em>) were sometimes <code>intercepted</code> when the carrier was caught; today, when these communications are generally electronic, an <code>intercepted</code> e-mail isn’t actually stopped, but simply read secretly be a third party.</li></ul><h3 id="perceptible"><a href="#perceptible" class="headerlink" title="perceptible"></a><code>perceptible</code></h3><blockquote><p>Noticeable or able to be felt by senses.</p></blockquote><p>E.g.</p><ul><li>Her change in attitude toward him was <strong>barely</strong>(<em>in a way that almost does not happen or exist</em>) <code>perceptible</code>, and he couldn’t be sure he wasn’t just imagining it.</li></ul><p>From</p><ul><li><code>Perceptible</code> includes the prefix <code>per-</code>, meaning “through”, so the word refers to whatever can be taken in through the senses.</li></ul><p>Usage</p><ul><li>A <code>perceptive</code> person picks up minor changes, small clues, or <strong>hints</strong>(<em>(usually singular) a small amount of something</em>) and <strong>shades</strong>(<em>(countable, usually plural) shade of something: a different kind or level of opinion, feeling, etc.</em>) of meaning that others can’t <code>perceive</code>, so one person’s <code>perception</code> – a tiny sound, a slight change in the weather, a different tone of voice – often won’t be <code>perceptible</code> to another.</li></ul><h3 id="susceptible"><a href="#susceptible" class="headerlink" title="susceptible"></a><code>susceptible</code></h3><blockquote><ol><li>Open to some influence; <strong>responsive</strong>(<em>reacting with interest or enthusiasm</em>).</li><li>Able to be <strong>submitted</strong>(<em>submit: to accept the authority, control or greater strength of somebody/something; to agree to something because of this</em>) to an action or process.</li></ol></blockquote><p>E.g.</p><ul><li>She impressed everyone immediately with her intelligence, so they’re now highly <code>susceptible</code> to her influence and usually go along with anything she proposes.</li></ul><p>From</p><ul><li>With its prefix <code>sus-</code>, “up”, <code>susceptible</code> refers to something or someone that “<strong>takes up</strong>“(<em>take up: to accept something that is offered or available</em>) or absorbs like a sponge.</li></ul><p>Usage</p><ul><li>A sickly child may be <code>susceptible</code> to <strong>colds</strong>(<em>cold: a common illness that affects the nose and/or throat, making you cough sneeze, etc.</em>). and an unlucky adult may be <code>susceptible</code> to back problems.</li><li>A lonely elderly person may be <code>susceptible</code> to what a <strong>con</strong>(<em>a trick; an act of cheating somebody</em>) man tells him or her on the phone.</li><li>And students are usually <code>susceptible</code> to the teaching of an imaginative professor – that is, likely to enjoy and learn from it.</li></ul><h2 id="FIN"><a href="#FIN" class="headerlink" title="FIN"></a><code>FIN</code></h2><blockquote><p>comes from the Latin word for “end” or “boundary”.<br><code>Final</code> describes last things, and a <code>finale</code> or <code>finish</code> is an ending.<br>(And at the end of a French film, you may just see the word “<code>Fin.</code>“)<br>But its meaning is harder to trace in some of the other English words derived from it.</p></blockquote><h3 id="confine"><a href="#confine" class="headerlink" title="confine"></a><code>confine</code></h3><blockquote><ol><li>To keep (someone or something) within limits.</li><li>To hold (someone) in a location.</li></ol></blockquote><p>E.g.</p><ul><li>He had heard the bad news from the CEO, but when he spoke to his <strong>employees</strong>(<em>employee: a person who is paid to work for somebody</em>) he <code>confined</code> his <strong>remarks</strong>(<em>remark: something that you say or write which expresses an opinion, a thought, etc. about somebody/something</em>) to a few <strong>hints</strong>(<em>hint: something that you say or do in an indirect way in order to show somebody what you are thinking</em>) that <strong>sales</strong>(<em>sales: the number of items sold</em>) had <strong>sliped</strong>(<em>slip: to fall to a lower level; to become worse</em>).</li></ul><p>Usage</p><ul><li><code>Confine</code> means basically to keep someone or something within borders.<ul><li>Artist Frida Kahlo taught herself to <strong>paint</strong>(<em>to make a picture or design using paints</em>) when she was <code>confined</code> to bed after a serious bus accident.</li><li>A person under “house arrest” is <code>confined</code> to his or her house by the government.</li><li>The discussion at a meeting may be <code>confined</code> to a single topic.</li><li>A town may keep industrial development <code>confined</code> to one area <strong>by means of</strong>(<em>through the use of</em>) <strong>zoning</strong>(<em>zoning: the practice of allowing areas of land to be used only for a particular purpose</em>).</li><li>And when potholes are being repaired, traffic on a <strong>two-way</strong>(<em>moving in two different directions; allowing something to move in two different directions</em>) road may be <code>confined</code> to a single <strong>lane</strong>(<em>a section of a wide road, that is marked by painted white lines, to keep lines of traffic separate</em>).</li></ul></li></ul><h3 id="definitive"><a href="#definitive" class="headerlink" title="definitive"></a><code>definitive</code></h3><blockquote><ol><li>Authoritative and final.</li><li>Specifying perfectly or precisely.</li></ol></blockquote><p>E.g.</p><ul><li>The team’s brilliant research provided a <em><strong><code>definitive</code> description</strong></em> of the virus and its strange <strong>mutation</strong>(*change in genetic material) patterns.</li></ul><p>Usage</p><ul><li>Something <code>definitive</code> is complete and final.<ul><li>A <code>definitive</code> example is the perfect example.</li><li>A <code>definitive</code> answer is usually a strong yes or no.</li><li>A <code>definitive</code> <strong>biography</strong>(<em>the story of a person’s life written by somebody else; this type of writing</em>) contains everything we’ll ever need to know about someone.</li><li>Ella Fitzgerald’s famous 1950s <strong>recordings</strong>(<em>recording: sound or pictures that have been recorded on computer files or on CD, DVD, video, etc.</em>) of American songs have even been called <code>definitive</code> – but no one ever wanted them to be the last.</li></ul></li></ul><h3 id="finite"><a href="#finite" class="headerlink" title="finite"></a><code>finite</code></h3><blockquote><p>Having definite limits.</p></blockquote><p>E.g.</p><ul><li>Her <strong>ambitions</strong>(<em>ambition: something that you want to do or achieve very much</em>) were infinite, but her wealth was <code>finite</code>.</li></ul><p>Usage</p><ul><li>It has come as a shock to many of us to realize that resources such as oil – and the atmosphere’s ability to absort <strong>greenhouse gases</strong>(<em>greenhouse gas: any of the gases that are thought to cause the greenhouse effect, especially carbon dioxide</em>) – are <code>finite</code> rather than unlimited.</li><li>The <strong>debate</strong>(<em>an argument or a discussion expressing different opinions</em>) continues <strong>as to</strong>(<em>as to something: used when you are referring to something</em>) whether the universe is <code>finite</code> or <code>infinite</code> and, if it’s fine, how to think about what <strong>lies</strong>(<em>lie: to exist or be found</em>) <strong>beyond</strong>(<em>more than something</em>) it.</li><li>Religion has aways concerned itself with the question of the <code>finite</code> (that is, human life on earth) <strong>versus</strong>(<em>used to compare two different ideas, choices, etc.</em>) the infinite (God, <strong>eternity</strong>(<em>time without end, especially life continuing without end after death</em>), and <strong>infinity</strong>(<em>the state of having no end or limit</em>)).</li><li>But <code>finite</code> is mostly used in <em><strong>scientific writing</strong></em>, often with meaning “definitely measurable.”</li></ul><h3 id="infinitesimal"><a href="#infinitesimal" class="headerlink" title="infinitesimal"></a><code>infinitesimal</code></h3><blockquote><p>Extremely or immeasurablely small.</p></blockquote><p>E.g.</p><ul><li>Looking more closely at the research data, he now saw an odd pattern of changes so <code>infinitesimal</code> that they hadn’t been noticed before.</li></ul><p>Usage</p><ul><li>Just as <em><strong>infinite</strong></em> describes something immeasurable (“without limit”), <code>infinitesimal</code> describes something endlessly small.<ul><li>When Antonie van Leeuwenhoek invented the microscope in the 17th century, he was able to see organisms that had been thought too <code>infinitesimally</code> small to exist. But today’s <strong>electron</strong>(<em>electron: a very small piece of matter (= a substance) with a negative electric charge, found in all atoms</em>) microscope allows us to see <code>infinitesimal</code> aspects of matter that even Leeuwenhoek could not have imaged.</li></ul></li></ul><h2 id="JECT"><a href="#JECT" class="headerlink" title="JECT"></a><code>JECT</code></h2><blockquote><p>comes from <em><code>jacere</code></em>, the Latin verb meaning “throw” or “<strong>hurl</strong>.”(<em>hurl: to throw something/somebody violently in a particular direction</em>)<br>To <code>reject</code> something is to thrown (or push) it back; to <code>eject</code> something is to <strong>throw (or drive) it out</strong> (<em>throw out: to force somebody to leave a place; drive out: to make somebody/something disappear or stop doing something</em>); and to <code>inject</code> something is to <strong>throw (or squirt) it into</strong>(<em>throw into: to begin to do something with energy and enthusiasm; squirt: to force liquid, gas, etc. in a thin, fast stream through a narrow opening; to be forced out of a narrow opening in this way.</em>) something else.</p></blockquote><h3 id="interject"><a href="#interject" class="headerlink" title="interject"></a><code>interject</code></h3><blockquote><p>To interrupt a conversation with a comment or remark.</p></blockquote><p>E.g.</p><ul><li>His anger was growing as he listened to the conversation, and <strong>every so often</strong>(<em>every once in a while; once in a while; every now and again</em>) he would <code>interject</code> a crude comment.</li></ul><p>From</p><ul><li>According to its Latin roots, <code>interject</code> ought to mean literally “throw between.”</li></ul><p>Usage</p><ul><li>For most of the word’s history, however, the only things that have been <code>interjected</code> have been <em><strong>comments</strong></em> dropped suddenly into a conversation.</li><li><code>Interjections</code> are often humorous, and sometimes even <strong>insulting</strong>(<em>causing or intending to cause somebody to feel offended</em>), and the best <code>interjections</code> are so quick that the conversation isn’t even interrupted.</li></ul><h3 id="conjecture"><a href="#conjecture" class="headerlink" title="conjecture"></a><code>conjecture</code></h3><blockquote><p>To guess.</p></blockquote><p>E.g.</p><ul><li>He was last heard of <strong>Bogotá</strong>(<em>the capital of Colombia</em>) and they <code>conjectured</code> that he had met his end in the <strong>Andes</strong>(<em>Andes: a range of high mountains along the west coast of South America</em>) <strong>at the hands of</strong>(<em>if you experience something at the hands of somebody, they are the cause of it</em>) the <strong>guerrillas</strong>(<em>guerrilla: a member of a small unofficial military group that fights in small groups</em>).</li></ul><p>From</p><ul><li>Formed with the prefix <code>con-</code>, “together,” <code>conjecture</code> means literally “to throw together” – that is, to produce a theory by putting together a number of facts.</li></ul><p>Usage</p><ul><li>So, for example, Columbus <code>conjectured</code> from his calculations that he would reach Asia if he sailed westard, and his later <code>conjecture</code> that there was a “Northwest Passage” by sea from the <strong>Atlantic</strong>(<em>the Atlantic Ocean. British people sometimes use phrases such as ‘across the Atlantic’ or ‘on the other side of the Atlantic’ when they are talking about the US, and Americans use these phrases when they are talking about western Europe, especially the UK</em>) to the Pacific over the North American continent was proved correct centuries later.</li></ul><h3 id="projection"><a href="#projection" class="headerlink" title="projection"></a><code>projection</code></h3><blockquote><p>An estimate of what might happen in the future based on what is happening now.</p></blockquote><p>E.g.</p><ul><li>The president has been hearing different deficit <code>projections</code> all week from the members of his economic team.</li></ul><p>Usage</p><ul><li><code>Projection</code> has various meanings, but what they all have in common is that <em><strong>something is sent out or forward.</strong></em><ul><li>A movie is <code>project</code> onto a screen; a skilled actress <strong><code>projects</code></strong>(<em>project your voice: to speak clearly and loudly so that you can be heard by everyone in a big room</em>) her voice out into a large theater without seeming to shout; and something <strong>sticking out</strong>(<em>stick out: to jut out; project</em>) from a wall can be called a <code>projection</code>.</li></ul></li><li>But the meaning we foucus on here is the one <em><strong>used by businesses and governments</strong></em>. Most <code>projections</code> of this kind are <em><strong>estimates of a company’s sales or profits</strong></em> – or of the finances(<em>finances(plural): the money available to a person, an organization or a country; the way this money is managed</em>) of a town, state, or country – sometime in the future.</li></ul><h3 id="trajectory"><a href="#trajectory" class="headerlink" title="trajectory"></a><code>trajectory</code></h3><blockquote><p>The curved path that an object makes in space, or a thrown object follows as it rises and falls to earth.</p></blockquote><p>E.g.</p><ul><li>Considering the likely range, <code>trajectory</code>, and accuracy of a <strong>bullet</strong>(<em>a small metal object that is fired from a gun</em>) fired from a cheap <strong>handgun</strong>(<em>a small gun that you can hold and fire with one hand</em>) at 100 <strong>yards</strong>(<em>(in Britain and North America) a unit for measuring length, equal to 3 feet (36 inches) or 0.9144 of a metre</em>), the <strong>murder</strong>(<em>murder: the crime of killing somebody deliberately</em>) seemed incredible.</li></ul><p>From</p><ul><li>Formed with part of the prefix <code>trans-</code>, “across,” <code>trajectory</code> means a “hurling across.”</li></ul><p>Usage</p><ul><li>By calculating the effect of gravity and other forces, the <code>trajectory</code> of an object launched into space at a known speed can be computed precisely.<ul><li><strong>Missiles</strong>(<em>missile: a weapon that is sent through the air and that explodes when it hits the thing that it is aimed at</em>) <strong>stand a chance of</strong>(<em>to have a chance; stand a chance</em>) hitting their target only if their <code>trajectory</code> has been <strong>plotted</strong>(<em>plot something: to mark something on a map, for example the position or course of something</em>) accurately.</li></ul></li><li>The word is used <strong>most often</strong>(<em>最常；通常来说</em>) in physics and engineering, but not always; we can also say, for example, that the <code>trajectory</code> of a whole life may be <strong>set</strong>(<em>set something: to arrange or fix something; to decide on something</em>) in a person’s youth, or that a new book <strong>traces</strong>(<em>trace: to describe a process or the development of something</em>) the long <code>trajectory</code>(<em>the events that happen during a period of time, which often lead to a particular aim or result</em>) of the French <strong>empire</strong>(<em>a group of countries or states that are controlled by one leader or government</em>).</li></ul><h2 id="TRACT"><a href="#TRACT" class="headerlink" title="TRACT"></a><code>TRACT</code></h2><blockquote><p>comes from <em><code>trahere</code></em>, the Latin verb meaning “<strong>drag</strong>(<em>to pull somebody/something along with effort and difficulty</em>) or draw.”<br>Something <code>attractive</code> draws us toward it.<br>Something <code>distracting</code> pull your attention away.<br>And when your <code>extract</code>(<em>extract something (from somebody/something): to take or pull something out, especially when this needs force or effort</em>) something from behind the sofa, you drag it out.</p></blockquote><h3 id="traction"><a href="#traction" class="headerlink" title="traction"></a><code>traction</code></h3><blockquote><p>The friction that allows a moving thing to move over a surface without slipping.</p></blockquote><p>E.g.</p><ul><li>The <strong>spinning</strong>(<em>to turn round and round quickly; to make something do this</em>) wheels were getting no <code>traction</code> on the ice, and we began to slip backward down the hill.</li></ul><p>Usage</p><ul><li>A <code>tractor</code> is something that pulls something else. We usually use the word for a piece of farm <strong>machinery</strong>(<em>machines as a group, especially large ones</em>), but it’s also the name of the part of a big <strong>truck</strong>(<em>a large vehicle for carrying heavy loads by road; British English usually lorry; North American English truck.</em>) that includes the engine and the <strong>cab</strong>(<em>the place where the driver sits in a bus, train or lorry</em>).<ul><li><code>Tractors</code> get terrific traction, because if their powerful engines and the deep <strong>ridges</strong>(<em>ridge: a raised line on the surface of something; the point where two sloping surfaces join</em>) on their huge wheels.</li></ul></li><li>A <strong>cross-country</strong>(<em>the sport of running or skiing across country</em>) <strong>skier</strong>(<em>a person who skis</em>) needs <code>traction</code> to kick herself forward, but doesn’t want it to slow her down when she’s <strong>gliding</strong>(<em>glide: to move smoothly and quietly, especially as though it takes no effort</em>), so the bottom of the skis may have a “fish-<strong>scale</strong>“(<em>scale: any of the thin plates of hard material that cover the skin of many fish and reptiles</em>) surface that permits both of these at the same time.</li></ul><h3 id="retract"><a href="#retract" class="headerlink" title="retract"></a><code>retract</code></h3><blockquote><ol><li>To pull back (something) into something larger. E.g., the animal retacted into its shell.</li><li>To take back (something said or written).</li></ol></blockquote><p>E.g.</p><ul><li>She was forced to retract her comment about her opponent after it was <strong>condemned</strong>(<em>condemn: to say very strongly that you think something is bad, usually for moral reasons</em>) in the <strong>press</strong>(<em>newspapers and magazines</em>).</li></ul><p>From</p><ul><li>The prefix <code>re-</code>(“back”) gives <code>retract</code> the meaning of “draw back.”</li></ul><p>Usage</p><ul><li>Just as a cat <code>retracts</code> its <strong>claws</strong>(<em>claw: one of the sharp curved nails on the end of an animal’s or a bird’s foot</em>) into its <strong>paws</strong>(<em>paw: the foot of an animal that has claws or nail(nail: the thin hard layer covering the outer tip of the fingers or toes)</em>) when they aren’t being used, a public figure may <strong>issue</strong>(<em>to make something known formally</em>) a <code>retraction</code> in order to say that he or she on longer wants to say something that has been said. But it’s sometimes hard to know what a <code>retraction</code> means: Was the original statement an error or an <strong>outright</strong>(<em>complete and total</em>) lie?<ul><li>Sometimes a politician even has to <code>retract</code> something that everyone actually assumes is the truth. Thousands of citizens were forced to publicly <code>retract</code> their “wrong” ideas by the Soviet government in the 1930s, though few of them had actually changed their <strong>minds</strong>(<em>mind: your thoughts, interest, etc.</em>).</li></ul></li><li>Someone wrongly accused may demand a <code>retraction</code> from his accuser – though today it seems more likely he’ll just go ahead and sue.</li></ul><h3 id="protracted"><a href="#protracted" class="headerlink" title="protracted"></a><code>protracted</code></h3><blockquote><p><strong>Drawn out</strong>(<em>lasting a very long time, often too long</em>), continued, or extended.</p></blockquote><p>E.g.</p><ul><li>No one was <strong>looking forward to</strong>(<em>look forward to: to be thinking with pleasure about something that is going to happen (because you expect to enjoy it)</em>) a <code>protracted</code> struggle for <strong>custody</strong>(<em>the legal right or duty to take care of or keep somebody/something; the act of taking care of something/somebody</em>) of the baby.</li></ul><p>From</p><ul><li>With its prefix <code>pro-</code>, “forward,” <code>protracted</code> usually applies to <em><strong>something drawn out forward in time.</strong></em> <ul><li>A <code>protracted</code> strike may <strong>cripple</strong>(<em>to seriously damage or harm somebody/something</em>) a company; a <code>protracted</code> rainy <strong>spell</strong>(<em>a short period of time during which something lasts</em>) may rot the roots of vegetables; and a <code>protracted</code> lawsuit occasionally <strong>outlives</strong>(<em>outlive something: to continue to exist after something else has ended or disappeared</em>) the parties involved.</li><li>Before the invention of the <strong>polio</strong>(<em>a disease that affects the central nervous system and can cause temporary or permanent paralysis(= loss of control or feeling in part or most of the body)</em>) vaccines, polio’s victims had no choice but to suffer a <code>protracted</code> illness and its <strong>aftereffects</strong>(<em>the after-effects of a drug, an illness or an unpleasant event are the feelings that you experience later as a result of it</em>).</li></ul></li></ul><h3 id="intractable"><a href="#intractable" class="headerlink" title="intractable"></a><code>intractable</code></h3><blockquote><p>Not easily handled, led, taught, or controlled.</p></blockquote><p>E.g.</p><ul><li><strong>Corruption</strong>(<em>dishonest or illegal behaviour, especially of people in authority</em>) in the army was the country’s <code>intractable</code> problem, and for many years all <strong>foreign aid</strong>(<em>foreign aid: assistance (as economic aid) provided by one nation to another</em>) had ended up in the <strong>colonel</strong>‘s(<em>colonel: an officer of high rank in the army, the marines, or the US air force</em>) pockets.</li></ul><p>From</p><ul><li><code>Intractable</code> simply means “untreatable,” and even comes from the same root.</li></ul><p>Usage</p><ul><li>The word may <em><strong>describe both people and conditions</strong></em>.<ul><li>A cancer patient may suffer <code>intractable</code> pain that doctors are unable to treat.</li><li>An <code>intractable</code> alcoholic goes back to <strong>the bottle</strong>(<em>the bottle:(informal) the bottle alcoholic drink</em>) immediately after “<strong>drying out</strong>.”(<em>dry out: to stop drinking alcohol after you have continuously been drinking too much; to cure somebody of drinking too much alcohol</em>)</li><li>Homelessness, though it hardly existed thirty years ago, is now sometimes regarded as an <code>intractable</code> problem.</li></ul></li></ul><h2 id="DUC-DUCT"><a href="#DUC-DUCT" class="headerlink" title="DUC/DUCT"></a><code>DUC/DUCT</code></h2><blockquote><p>comes from the Latin verb <em><strong><code>ducere</code></strong></em>, “to lead,” shows up regularly in English.<br><code>Duke</code> means basically “leader.”<br>The Italian dictator Mussolini was known simply as <em><code>Il Duce</code></em>, “the leader.”<br>But such words as <code>produce</code> and <code>reduce</code> also contain the root, even though their meanings show it less clearly.</p></blockquote><h3 id="conducive"><a href="#conducive" class="headerlink" title="conducive"></a><code>conducive</code></h3><blockquote><p>Tending to <strong>promote</strong>(<em>to help something to happen or develop</em>), encourage, or assist; helpful.</p></blockquote><p>E.g.</p><ul><li>She found the <strong>atmosphere</strong>(<em>the feeling or mood that you have in a particular place or situation; a feeling between two people or in a group of people</em>) in the quiet <strong>cafe</strong>(<em>a place where you can buy drinks and simple meals. Alcohol is not usually served in British or American cafes.</em>) <code>conducive</code> to study and even to creative thinking.</li></ul><p>Usage</p><ul><li>Something <code>conducive</code> “leads to” a desirable result.<ul><li>A cozy <strong>living room</strong>(<em>a room in a house where people sit together, watch television, etc.</em>) may be <code>conducive</code> to relaxed conversation, just as a <strong>boardroom</strong>(<em>a room in which the meetings of the board of a company (= the group of people who control it) are held</em>) may be <code>conducive</code> to more intense discussions.</li><li>Particular tax policies are often <code>conducive</code> to <strong>savings</strong>(<em>savings: (plural) money that you have saved, especially in a bank, etc.</em>) and investment, <strong>whereas</strong>(<em>used to compare or contrast two facts</em>) others are <code>conducive</code> to consumer spending.</li></ul></li><li>Notice that <code>conducive</code> is almost always followed by <em><strong>to</strong></em>.</li></ul><h3 id="deduction"><a href="#deduction" class="headerlink" title="deduction"></a><code>deduction</code></h3><blockquote><ol><li>Subtraction.</li><li>The reaching of a conclusion by <strong>reasoning</strong>(<em>the process of thinking about things in a logical way; opinions and ideas that are based on logical thinking</em>).</li></ol></blockquote><p>E.g.</p><ul><li><strong>Foretelling</strong>(<em>foretell: to know or say what will happen in the future, especially by using magic powers</em>) the future by <code>deduction</code> based on political or economic theory has proved to be extremely difficult.</li></ul><p>Usage</p><ul><li>To <code>deduce</code> is simply <em><strong>to subtract</strong></em>.<ul><li>A tax <code>deduction</code> is a subtraction from your <strong>taxable</strong>(<em>(of money) that you have to pay tax on</em>) income allowed by the government for certain <strong>expenses</strong>(<em>expenses: (plural) money spent in doing a particular job, or for a particular purpose</em>), which will result in your paying lower taxes.</li><li>Your insurance <code>deductible</code> is the amount of a medical bill that the insurance company makes you subtract before it starts to pay – in other words, the amount that will come out of you own pocket.</li></ul></li><li>But <code>deduction</code> also means “reasoning,” and <em><strong>particularly reasoning based on general principles</strong></em>(<em>principle:  a law, a rule or a theory that something is based on</em>) to <strong>produce</strong>(<em>produce something: to cause a particular result or effect</em>) specific findings. <ul><li>Mathematical reasoning is almost always <code>deduction</code>, for instance, since it is based on general rules.</li><li>But when Dr. Watson exclaims “Brilliant deduction, my dear Holmes!” he simply means “brilliant reasoning,” since Sherlock Holmes’s solutions are based on specific details he has noticed rather than on general principles.</li></ul></li></ul><h3 id="induce"><a href="#induce" class="headerlink" title="induce"></a><code>induce</code></h3><blockquote><ol><li><strong>Persuade</strong>(<em>to make somebody do something by giving them good reasons for doing it</em>), <strong>influence</strong>(<em>to have an effect on the way that somebody behaves or thinks, especially by giving them an example to follow</em>).</li><li><strong>Bring about</strong>(<em>bring about: to make something happen</em>).</li></ol></blockquote><p>E.g.</p><ul><li>To <code>induce</code> him to make to call we had to <strong>promise</strong>(<em>to tell somebody that you will definitely do or not do something, or that something will definitely happen</em>) we wouldn’t do it again.</li></ul><p>Usage</p><ul><li><code>Inducing</code> is usually gentle <strong>persuasion</strong>(<em>the act of persuading somebody to do something or to believe something</em>); you may, for instance, <code>induce</code> a friend to go to a <strong>concert</strong>(<em>a public performance of music</em>), or <code>induce</code> a child to stop crying.</li><li>An <code>inducement</code> is something that might <strong>lure</strong>(<em>to persuade or trick somebody to go somewhere or to do something by promising them a reward</em>) you to do something, though <code>inducements</code> are <strong>occasionally</strong>(<em>sometimes but not often</em>) a bit <strong>menacing</strong>(<em>seeming likely to cause you harm or danger</em>), like the Godfather’s <strong>offer</strong>(<em>an act of saying that you are willing to do something for somebody or give something to somebody</em>) that you can’t refuse.</li><li><code>Induce</code> also sometimes means “<strong>produce</strong>“(<em>to cause a particular result or effect</em>); thus, doctors must <strong>at times</strong>(<em>once in a while</em>) <code>induce</code> <strong>labor</strong>(<em>the period of time or the process of giving birth to a baby</em>) in a pregnant woman.</li><li>Notice that <em><strong>induct</strong></em> and <em><strong>induction</strong></em> are <strong>somewhat</strong>(<em>to some degree</em>) different from <code>induce</code> and <code>inducement</code>, though they come from <strong>the identical</strong>(<em>the identical: (only before noun) the same</em>) roots.</li></ul><h3 id="seduction"><a href="#seduction" class="headerlink" title="seduction"></a><code>seduction</code></h3><blockquote><ol><li><strong>Temptation</strong>(<em>the desire to do or have something that you know is bad or wrong</em>) to <strong>sin</strong>(<em>to break a religious or moral law</em>), especially temptation to <strong>sexual intercourse</strong>(<em>the physical activity of sex, usually describing the act of a man putting his penis inside a woman’s vagina</em>).</li><li>Attraction or charm.</li></ol></blockquote><p>E.g.</p><ul><li>The <strong>company</strong>(<em>a business organization that makes money by producing or selling goods or services</em>) began its <strong>campaign</strong>(<em>a series of planned activities that are intended to achieve a particular social, commercial or political aim</em>) of <code>seduction</code> of the smaller <strong>firm</strong>(<em>a business or company</em>) by inviting its top <strong>management</strong>(<em>the people who run and control a business or similar organization</em>) to a series of weekends at expensive <strong>resorts</strong>(<em>resort: a place where a lot of people go on holiday</em>).</li></ul><p>From</p><ul><li><code>Seduction</code>, with its prefix <code>se-</code>, “aside,” means basically “lead aside or <strong>astray</strong>.”(<em>lead somebody astray: to make somebody go in the wrong direction or do things that are wrong</em>)<ul><li>In <strong>Hawthorne</strong>‘s(<em>Nathaniel Hawthorne:1804-1864 American author</em>) novel <em>The Scarlet Letter</em>, Hester Prynne is forced to wear a large <strong>scarlet</strong>(<em>a bright red colour</em>) A, for “<strong>adulteress</strong>,”(<em>adulteress: a woman who commits(commit: to do something wrong or illegal) adultery(adultery: sex between a married person and somebody who is not their husband or wife)</em>) after it is revealed that she’s been <code>seduced</code> by the <strong>Reverend</strong>(<em>Reverend: a title of respect used before the name of a minister in the Christian church</em>) Dimmesdale.</li></ul></li><li><code>Seduction</code> also takes less physical forms.<ul><li>Advertisements <strong>constantly</strong>(<em>constantly: all the time; repeatedly</em>) try to <code>seduce</code> us (often using sex as a temptation) into buying products we hadn’t even known existed.</li></ul></li></ul><h2 id="SEQU"><a href="#SEQU" class="headerlink" title="SEQU"></a><code>SEQU</code></h2><blockquote><p>comes from the Latin verb <em><strong><code>sequi</code></strong></em>, meaning “to follow.”<br>A <code>sequel</code> follows the original novel , or television show.</p></blockquote><h3 id="sequential"><a href="#sequential" class="headerlink" title="sequential"></a><code>sequential</code></h3><blockquote><ol><li><strong>Arranged</strong>(<em>arrange: to put something in a particular order; to make something neat or attractive</em>) in <strong>order</strong>(<em>order: the state of being carefully and neatly arranged</em>) or in a <strong>series</strong>(<em>series: several events or things of a similar kind that happen one after the other</em>).</li><li>Following in a series.</li></ol></blockquote><p>E.g.</p><ul><li>In writing the history of the <strong>revolution</strong>(<em>revolution: an attempt, by a large number of people, to change the government of a country, especially by violent action</em>), his challenge was to put all the events of those <strong>fateful</strong>(<em>fateful: having an important, often very bad, effect on future events</em>) days in <strong>proper</strong>(<em>proper: right, appropriate or correct; according to the rules</em>) <code>sequential</code> order.</li></ul><p>Usage</p><ul><li>Things in <code>sequence</code>(<em>sequence: the order that events, actions, etc. happen in or should happen in</em>), or regular order, are arranged <code>sequentially</code>.<ul><li>Most novels and films <strong>move</strong>(<em>move: to make progress in the way or direction mentioned</em>) <code>sequentially</code>, but some use <strong>techniques</strong>(<em>technique:  a particular way of doing something, especially one in which you have to learn special skills</em>) such as <strong>flashbacks</strong>(<em>flashback: a part of a film, play, etc. that shows a scene that happened earlier in time than the main story</em>) that interrupt the <strong>movement</strong>(<em>movement: progress, especially in a particular task</em>) forward in time.</li></ul></li><li><code>Sequential</code> <strong>courses</strong>(<em>a series of lessons or lectures on a particular subject</em>) in college must follow each other in the proper order, just like <code>sequential</code> tasks or steps.</li></ul><h3 id="subsequent"><a href="#subsequent" class="headerlink" title="subsequent"></a><code>subsequent</code></h3><blockquote><p>Following in time, order, or place; later.</p></blockquote><p>E.g.</p><ul><li>Through all her <code>subsequent</code> live <strong>affairs</strong>(<em>affair: a sexual relationship between two people, usually when one or both of them are already in a relationship with somebody else</em>), she never stop thinking about the man who got away.</li></ul><p>From</p><ul><li>The prefix <code>sub-</code> normally means “below,” and the <code>sub</code> in <code>subsequent</code> seems to imply that everything after first is <strong>somehow</strong>(<em>somehow: for a reason that you do not know or understand</em>) inferior.</li></ul><p>Usage</p><ul><li>As the definition <strong>states</strong>(<em>state: to formally write or say something, especially in a careful and clear way</em>), <code>subsequent</code> can refer to <em><strong>time</strong></em> (“All our <code>subsequent</code> attempts to contact her failed”), <em><strong>order</strong></em> (“The <code>subsequent</code> houses on the list looked even worse”), or <em><strong>place</strong></em> (“The <code>subsequent</code> villages on the river heading east become steadily more <strong>primitive</strong>“(<em>primitive: very simple and old-fashioned, especially when something is also not convenient and comfortable</em>))</li><li>But <code>subsequently</code>, as in “I <code>subsequently</code> learned the real story,” simply means “later.”</li></ul><h3 id="consequential"><a href="#consequential" class="headerlink" title="consequential"></a><code>consequential</code></h3><blockquote><ol><li>Resulting(<em>resulting: caused by something; happening as a consequence</em>).</li><li>Important.</li></ol></blockquote><p>E.g.</p><ul><li>None of our discussions <strong>thus far</strong>(<em>thus far: until now; up to this point; so far</em>) has been very <code>consequential</code>; next week’s meeting will be the important one.</li></ul><p>Usage</p><ul><li>Something <code>consequential</code> follows or <strong>comes along</strong>(<em>come along: to arrive; to appear</em>) with something else.</li><li>The “resulting” meaning of <code>consequential</code> is usually seen in <em><strong>legal writing</strong></em>.<ul><li>For example, “<code>consequential</code> losses” are losses that supposedly resulted from some improper behavior, about which the lawyer’s client is suing.</li></ul></li><li>But normally <code>consequential</code> means “significant” or “important,” and it’s especially used for events that will produce large <code>consequences</code>, or results.</li></ul><h3 id="non-sequitur"><a href="#non-sequitur" class="headerlink" title="non sequitur"></a><code>non sequitur</code></h3><blockquote><p>A statement that does not follow logically from anything previously said.</p></blockquote><p>E.g.</p><ul><li><strong>Rattled</strong>(<em>rattle somebody: to make somebody nervous or frightened</em>) by the question, his mind <strong>went blank</strong>(<em>go blank: if your mind goes blank, or if you go blank, you are suddenly unable to remember something</em>), and he <strong>blurted</strong>(<em>blurt something(out): to say something suddenly and without thinking carefully enough</em>) out a <code>non sequitur</code> that <strong>fetched</strong>(<em>fetch: (British English) to make people react in a particular way</em>) a <strong>few</strong>(<em>few: used with plural nouns and a plural verb to mean ‘not many’</em>) <strong>laughs</strong>(<em>laugh: the sound you make when you think that something is funny or silly</em>) from members of the audience.</li></ul><p>From</p><ul><li><code>Non sequitur</code> is actually a complete sentence in Latin, meaning “It does not follow” – that is, something said or written doesn’t logically follow what <strong>came</strong>(<em>come: to happen</em>) before it.</li></ul><p>Usage</p><ul><li>It was Aristotle who <strong>identified</strong>(<em>identify: to recognize somebody/something and be able to say who or what they are</em>) the <code>non sequitur</code> as one of the basic <strong>fallacies</strong>(<em>fallacy: a false way of thinking about something</em>) of logic – that is, one of the ways in which a person’s reasoning may go wrong.<ul><li>For Aristotle, the <code>non sequitur</code> is usually a conclusion that doesn’t actually result from the reasoning and evidence presented.</li><li><strong>Sometime</strong>(<em>sometime: at a time that you do not know exactly or has not yet been decided; 改天；来日</em>) when you’re listening to politicians answering questions, see how many <code>non sequiturs</code> you can <strong>spot</strong>(<em>spot: to see or notice a person or thing, especially suddenly or when it is not easy to do so</em>). </li></ul></li></ul><h2 id="Words-from-mythology"><a href="#Words-from-mythology" class="headerlink" title="Words from mythology"></a>Words from mythology</h2><h3 id="Apollonian"><a href="#Apollonian" class="headerlink" title="Apollonian"></a><code>Apollonian</code></h3><blockquote><p><strong>Harmonious</strong>(<em>harmonious: (of relationships, etc.) friendly, peaceful and without any arguments</em>), <strong>ordered</strong>(<em>ordered: carefully arranged or organized</em>), <strong>rational</strong>(<em>rational: (of behaviour, ideas, etc.) based on reason rather than emotions.</em>), <strong>calm</strong>(<em>calm:  not excited, nervous or upset</em>).</p></blockquote><p>E.g.</p><ul><li>After a century of Romantic emotion, some composers adopted a more <code>Apollonian</code> style, producing clearly patterned pieces that avoided extremes of all kinds.</li></ul><p>From</p><ul><li>In Greek mythology, <code>Apollo</code> was the god of the sun, light, <strong>prophecy</strong>(<em>prophecy: the power of being able to say what will happen in the future</em>), and music, and the most <strong>revered</strong>(<em>revere somebody (as somthing) to admire and respect somebody/something very much</em>) of all the gods. Partly because of the writings of Nietzsche, we now often think of <code>Apollo</code> (in contrast to the god <strong>Dionysus</strong>(<em>the god of wine and fertility.</em>)) as a model of calm reason, and we may call anything with those qualities <code>Apollonian</code>. This isn’t the whole story about <code>Apollo</code>, however, he had a terrible temper and could be viciously <strong>cruel</strong>(<em>cruel: having a desire to cause physical or mental pain and make somebody suffer</em>) when he <strong>felt like</strong>(<em>feel like: to want to have or do something</em>) it.</li></ul><h3 id="bacchanalian"><a href="#bacchanalian" class="headerlink" title="bacchanalian"></a><code>bacchanalian</code></h3><blockquote><p><strong>Frenzied</strong>(<em>frenzied: involving a lot of activity and strong emotions in a way that is often violent or frightening and not under control</em>), <strong>orgiastic</strong>(<em>orgiastic: typical of orgy(orgy: a party there is a lot of eating, drinking and sexual activity)</em>).</p></blockquote><p>E.g.</p><ul><li>The <code>bacchanalian</code> <strong>partying</strong>(<em>party: to enjoy yourself, especially by eating, drinking alcohol and dancing</em>) on gradution night resulted in three <strong>wrecked</strong>(<em>wrecked: having been wrecked</em>) cars, two lawsuits by <strong>unamused</strong>(<em>amused: thinking that somebody/something is funny, so that you smile or laugh</em>) parents, and more new experiences that most of the participants could remember the next day.</li></ul><p>From</p><ul><li>The Roman god of <strong>drama</strong>(<em>drama: the fact of being exciting</em>), wine, and <strong>ecstasy</strong>(<em>ecstasy: a feeling or state of very great happiness</em>), <code>Bacchus</code> was the focus of a widespread <strong>celebration</strong>(<em>celebration: a special event that people organize in order to celebrate something</em>), the <code>Bacchanalia</code>. The <strong>festivites</strong>(<em>festivites: (plural) the activities that are organized to celebrate a special event</em>) were originally secret, and only initiated members could participate. There was wine <strong>in abundance</strong>(<em>in abundance: a large quantity that is more than enough</em>), and participants were expected to <strong>cut loose</strong>(<em>cut loose: to free from control or restraint; to act without restraint</em>) from normal <strong>restraints</strong>(<em>restraint (on somebody/something) a rule, a fact, an idea, etc. that limits or controls what people can do</em>) and <strong>give in to</strong>(<em>give in to: 屈服于; bow to</em>) all sorts of wild <strong>desires</strong>(<em>desire: a strong wish to have or do something</em>).</li><li>Eventually the <code>Bacchanalia</code> become more <strong>public</strong>(<em>public: connected with ordinary people in society in general</em>) and uncontrolled, finally getting so <strong>out of hand</strong>(<em>out of control: difficult or impossible to control</em>) that in 186 B.C. the Roman authorities had it banned.</li><li>Much of the same <code>Bacchanalian</code> <strong>spirit</strong>(<em>spirti: the typical or most important quality or mood of something</em>) fills <strong>tropical</strong>(<em>tropical: coming from, found in or typical of the tropics</em>) <strong>carnival</strong>(<em>carnival: a public festival, usually one that happens at a regular time each year, that involves music and dancing in the streets, for which people wear brightly coloured clothes</em>) every year, including New Orleans’ Mardi Gras.</li></ul><h3 id="delphic"><a href="#delphic" class="headerlink" title="delphic"></a><code>delphic</code></h3><blockquote><p>Unclear, <strong>ambiguous</strong>(<em>ambiguous: not clearly stated or defined</em>), or <strong>confusing</strong>(<em>confusing: difficult to understand; not clear</em>).</p></blockquote><p>E.g.</p><ul><li>All she could get from the strange old woman were a few <code>delphic</code> comments that left her more confused than ever about the missing documents.</li></ul><p>From</p><ul><li><code>Delphi</code> in Greece was the <strong>site</strong>(<em>site: a place where a building, town, etc. was, is or will be located</em>) of a <strong>temple</strong>(<em>temple: a building used for the worship of a god or gods, especially in religions other than(other than: except) Christianity</em>) to Apollo at which there <strong>resided</strong>(<em>reside: to live in a particular place</em>) an <strong>orcale</strong>(<em>oracle: a person or book that gives valuable advice or information</em>), a woman <strong>through</strong>(<em>through: by means of; because of</em>) whom Apollo would speak, foretelling the future.</li><li>The Greeks consulted the oracle frequently on <strong>matters</strong>(<em>matter: a subject or situation that you must consider or deal with</em>) both private and public. The prophecies were given in difficult <strong>poetry</strong>(<em>poetry: poems in general; poetry指体裁，或是诗集，而poem 是一首一首的诗，所以 poetry 是许多的 poems 构成的总称</em>) that had to be interpreted by preists, and even the interpretations could be hard to understand.</li><li>When Croesus, king of Lydia, asked what would happen if he attacked the Persians, the oracle announced that he would destroyed a great empire; what she didn’t say was that the empire destroyed would be his own.</li><li><strong>Modernday</strong>(<em>modernday: used to describe a modern form of somebody/something, usually somebody/something bad or unpleasant, that existed in the past</em>) <strong>descendants</strong>(<em>descendant: something that has developed from something similar in the past</em>) of the oracle include some political commentators, who <strong>utter</strong>(<em>utter: to make a sound with your voice; to say something</em>) <strong>words</strong>(<em>word: a thing that you say; a remark or statement</em>) of <code>delphic</code> complexity every week.</li></ul><h3 id="Dionysian"><a href="#Dionysian" class="headerlink" title="Dionysian"></a><code>Dionysian</code></h3><blockquote><p>Frenzied, <strong>delirious</strong>(<em>delirious: extremely excited and happy</em>).</p></blockquote><p>E.g.</p><ul><li>Only in <strong>the tropics</strong>(<em>the tropics: (plural) the area between two tropics, which is the hottest part of the world</em>) did such <strong>festivals</strong>(<em>festival: a day or period of the year when people stop working to celebrate a special event, often a religious one</em>) become truly <code>Dionysian</code>, he said, which was why he was <strong>booking</strong>(<em>book: to arrange to have or use something on a particular date in the future; to buy a ticket in advance</em>) his <strong>flight</strong>(<em>flight: a plane making a particular journey</em>) to <strong>Rio</strong>(<em>Rio: Rio de Janeiro</em>).</li></ul><p>From</p><ul><li><code>Dionysus</code> was the Greek <strong>forerunner</strong>(<em>forerunner (of somebody/something): a person or thing that came before and influenced somebody/something else that is similar; a sign of what is going to happen</em>) of Bacchus. He was the inventor of wine, which he gave to <strong>the human race</strong>(<em>the human race: all people, considered together as a group</em>). For that gift and for all the wild behavior that it led to, <code>Dionysus</code> became immensely popular, and  he appears in a great many myths. He is often shown holding a wine <strong>goblet</strong>(<em>goblet: a cup for wine, usually made of glass or metal, with a stem</em>) and base but no handle*), with his hair full of <strong>vine</strong>(<em>a climbing plant that produces grapes</em>) leaves, and attended by a <strong>band</strong>(<em>band: a group of people who do something together or who have the same ideas, interests or achievements</em>) of goat-footed <strong>satyrs</strong>(<em>satyr: a god of the woods, with a man’s face and body and a goat’s legs and horns</em>) and wild female spirits called <strong>maenads</strong>(<em>maenad: bacchante; a priestess or female follower of Bacchus</em>).</li><li>In the 19th century, <strong>scholars</strong>(<em>scholar: a person who knows a lot about a particular subject because they have studied it in detail</em>) such as Nietzsche claimed that the ancient world could be understood as a continuing <strong>conflict</strong>(<em>conflict: a situation in which there are ideas, opinions, feelings or wishes that are opposed to each other; a situation in which it is difficult to choose</em>) between the attitudes represented by Apollo and <code>Dionysus</code> – that is, between order and disorder, between <strong>moderation</strong>(<em>moderation: the quality of being reasonable and not being extreme</em>) and <strong>excess</strong>(<em>excess: more than is necessary, reasonable or acceptable</em>), between the controlled and the <strong>ecstatic</strong>(<em>ecstatic: very happy, excited and enthusiastic; feeling or showing great enthusiasm</em>).</li></ul><h3 id="jovial"><a href="#jovial" class="headerlink" title="jovial"></a><code>jovial</code></h3><blockquote><p><strong>Jolly</strong>(<em>jolly: happy and cheerful</em>), <strong>good-natured</strong>(<em>good-natured: kind, friendly and patient when dealing with people</em>).</p></blockquote><p>E.g.</p><ul><li>Their grandfather was <code>jovial</code> and sociable <strong>as</strong>(<em>as: though</em>) their grandmother was quiet and withdrawn.</li></ul><p>From</p><ul><li><code>Jove</code>, or <code>Jupiter</code>, was the Roman <strong>counterpart</strong>(<em>counterpart: one remarkably similar to another</em>) of the Greek’s Zeus, and like Zeus was regarded as <strong>chief</strong>(<em>chief: highest in rank</em>) among the gods.</li><li>Romans were naming the plants, they gave the name <code>Jupiter</code> to the one that, as they may have already known, was the largest of all (though only the second-brightest to <strong>the naked eye</strong>(<em>the naked eye: the normal power of your eyes without the help of an instrument</em>)).</li><li>When the <strong>practice</strong>(<em>practice: action rather than ideas</em>) of <strong>astrology</strong>(<em>astrology: the study of the positions of the stars and the movements of the planets in the belief that they influence human affairs</em>) reached the Roman empire from <strong>the East</strong>(<em>the East: the countries of Asia, especially China, Japan and India</em>), astrologers declared that those “born under Jupiter” were destined to be <strong>merry</strong>(<em>merry: happy and cheerful</em>) and generous, and many centuries later this would result in the words <code>jovial</code> and <code>joviality</code>.</li></ul><h3 id="mercurial"><a href="#mercurial" class="headerlink" title="mercurial"></a><code>mercurial</code></h3><blockquote><p>Having rapid an unpredictable changes of <strong>mood</strong>(<em>mood: the way you are feeling at a particular time</em>).</p></blockquote><p>E.g.</p><ul><li>His mother’s always <code>mercurial</code> <strong>temper</strong>(<em>if somebody has a temper, they become angry very easily</em>) became even more unpredictable, <strong>to the point</strong>(<em>to the point: relevant; pertinent(pertinent: appropriate to a particular situation)</em>) where the slightest thing would <strong>trigger</strong>(<em>trigger something (of): to make something happen suddenly</em>) a <strong>violent</strong>(<em>violent: showing or caused by very strong emotion</em>) <strong>fit</strong>(<em>fit: a short period of very strong feeling</em>).</li></ul><p>From</p><ul><li>The god <code>Mercury</code>, with his winged cap and <strong>sandals</strong>(<em>sandal: a type of light open shoe that is worn in warm weather. The top part consists of leather bands that fasten the sole(the bottom part of a shoe or sock, not including the heel) to your foot.</em>), was the very symbol of speed, and the planet <code>Mercury</code> was named for him by the Romans because it is the fastest-moving of the planets. His name was also given to the liquid silver metal that <strong>skitters</strong>(<em>skitter:  to run or move very quickly and lightly</em>) around on a surface so quickly and unpredictablely.</li><li>And the word <code>mercurial</code> seems to have come from the metal, <strong>rather than</strong>(<em>rather than: instead of somebody or something</em>) directly from the god (or an astrologer’s <strong>view</strong>(<em>view: a personal opinion about something; an attitude towards something</em>) of the planet’s influence). </li><li><code>Mercurial</code> people are usually <strong>bright</strong>(<em>bright: intelligent; quick to learn</em>) but <strong>impulsive</strong>(<em>impulsive: acting suddenly without thinking carefully about what might happen because of what you are doing</em>) and <strong>changeable</strong>(<em>changeable: likely to change; often changing</em>) (an sometimes a bit <strong>unstable</strong>(<em>unstable: likely to change suddenly</em>)).</li></ul><h3 id="Olympian"><a href="#Olympian" class="headerlink" title="Olympian"></a><code>Olympian</code></h3><blockquote><p><strong>Lofty</strong>(<em>lofty: deserving praise because of its high moral quality</em>), <strong>superior</strong>(<em>superior: better in quality than somebody/something else; greater than somebody/something else</em>), and <strong>detached</strong>(<em>detached: not influenced by other people or by your own feelings</em>).</p></blockquote><p>E.g.</p><ul><li>Now 77, he moved slowly and spoke to the younger lawyers in a <code>Olympian</code> <strong>tones</strong>(<em>tone: the quality of somebody’s voice, especially expressing a particular emotion</em>), but his college friends could remember when he was a <strong>brash</strong>(<em>brash: confident in an aggressive way</em>), crazy risk-taker.</li></ul><p>From</p><ul><li>The Greek gods lived high <strong>atop</strong>(<em>atop: on top of; at the top of</em>) <strong>Mt.</strong>(<em>Mt.: (especially on maps) Mount</em>) <code>Olympus</code>, which allowed them to watch what went on in the human realm below and <strong>intervene</strong>(<em>intervene: to become involved in a situation in order to improve or help it</em>) as they saw fit. They <strong>insisted</strong>(<em>insist: to demand that something happen or that somebody agree to do something</em>) on being properly <strong>worshipped</strong>(<em>worship: to show respect for God or a god, especially by saying prayers, singing, etc. with other people in a religious building</em>) by humans, but otherwise tended to treat the affairs of these weak and short-lived creatures almost like a <strong>sport</strong>(<em>sport: pleasure or fun</em>). </li><li>So <code>Olympian</code> describes someone who seems “lofty” and “above it all,” <strong>as if</strong>(<em>as if: in a way that suggest something</em>) <strong>surveying</strong>(<em>survey something: to look carefully at the whole of something, especially in order to get a general impression of it</em>) a scene in which other people appear the size of ants.</li><li>The <code>Olympic</code> <strong>Games</strong>(<em>game: a sport with rules in which people or teams compete against each other</em>) were first celebrated in the 8th century B.C., at the religious site called <code>Olympia</code> (far from Mt. <code>Olympus</code>), and <code>Olympian</code> today actually most often refers to <code>Olympic</code> athletes.</li></ul><h3 id="venereal"><a href="#venereal" class="headerlink" title="venereal"></a><code>venereal</code></h3><blockquote><p>Having to do with sexual intercourse or diseases <strong>transmitted</strong>(<em>transmit: to pass something from one person to another</em>) by it.</p></blockquote><p>E.g.</p><ul><li>In the 19th century <strong>syphilis</strong>(<em>syphilis: a disease that gets worse over a period of time, spreading from the sexual organs to the skin, bones, muscles and brain. It is caught by having sex with a person who already has the disease.</em>) especially was often <strong>fatal</strong>(<em>fatal: causing or ending in death</em>), and <code>venereal</code> diseases killed some of the greatest <strong>figures</strong>(<em>figure: a person of the type mentioned</em>) of the <strong>time</strong>(<em>time: a period of history connected with particular events or experiences in people’s lives</em>).</li></ul><p>From</p><ul><li><code>Venus</code> was the Roman <strong>goddess</strong>(<em>goddess: a female god</em>) of love, the equivalent of the Greek Aphrodite. Since she <strong>governed</strong>(<em>govern something: to control or influence somebody/something or how something happens, functions, etc.</em>) all aspects of love and desire, a word <strong>derived from</strong>(<em>derive from: to develop or come from something else</em>) her name was given to the diseases <strong>acquired</strong>(<em>acquire something: to obtain something by buying or being given it</em>) through sexual contact.</li><li>Most of these <code>venereal</code> diseases have been around for many centuries, but only in the 20th century did doctors <strong>devise</strong>(<em>devise: devise something to invent something new or a new way of doing something</em>) <strong>tests</strong>(<em>test: an experiment to discover whether or how well something works, or to find out more information about it</em>) to identify them or <strong>medicines</strong>(<em>medicine: a substance that you take in order to cure an illness, especially a liquid that you drink or swallow</em>) to cure them.</li><li>Today the official term is <em><strong>sexually transmitted disease</strong></em>, or STD; but even this name turns out to be ambiguous, since some of these diseases can be <strong>contracted</strong>(<em>contract something (formal or medical): to get an illness</em>) in other ways as well.</li></ul><h1 id="Unit-3"><a href="#Unit-3" class="headerlink" title="Unit 3"></a>Unit 3</h1><h2 id="AMBI"><a href="#AMBI" class="headerlink" title="AMBI"></a>AMBI</h2><blockquote><p>means “on both sides” or “around”;<br><em><strong>ambi-</strong></em> comes from Latin.<br>Most of us are either right-handed or left-handed, but <em><strong>ambidextrous</strong></em> people can use their right and left hand equally well.</p></blockquote><h3 id="ambiguous"><a href="#ambiguous" class="headerlink" title="ambiguous"></a><code>ambiguous</code></h3><blockquote><ol><li>Doubtful or uncertain especially from being <strong>obscure</strong>(<em>obscure something: to make it difficult to see, hear or understand something</em>) or <strong>indistinct</strong>(<em>indistinct: that cannot be seen, heard or remembered clearly</em>).</li><li>Unclear in meaning because of being understandable in more than one way.</li></ol></blockquote><p>E.g.</p><ul><li>Successful politicions are good at giving ambiguous answers to questions on difficult issues.</li></ul><p>From</p><ul><li><code>Ambiguous</code> comes from the Latin verb <em><strong><code>ambigere</code></strong></em>, “to be undecided.”</li></ul><p>Usage</p><ul><li>When we say someone’s eyes are an <code>ambiguous</code> color, we mean we cannot decide which color they are – blue or green?</li><li>The <code>ambiguity</code> of the Mona Lisa’s smile makes us wonder what she’s thinking about.</li><li>An <code>ambiguous</code> order is one that can be taken in at least two ways; on the other hand, the order “shut up!” may be rude but at least it’s <code>unambiguous</code>.</li></ul><h3 id="ambient"><a href="#ambient" class="headerlink" title="ambient"></a><code>ambient</code></h3><blockquote><p>Exsiting or present on all sides.</p></blockquote><p>E.g.</p><ul><li>The <code>ambient</code> <strong>lighting</strong>(<em>light: to give light to something or a place</em>) in the restaurant was low, and there was a bright candle at each table.</li></ul><p>Usage</p><ul><li><code>Ambient</code> light is the light that <strong>fills</strong>(<em>fill: if a smell, sound or light fills a place, it is very strong, loud or bright and easy to notice</em>) an area or <strong>surrounds</strong>(<em>surround: to be all around something/somebody</em>) something that being <strong>viewed</strong>(<em>view: to look at something, especially when you look carefully</em>), like a television screen or a painting.\</li><li>Scientists sometimes refer to the <code>ambient</code> temperature, the temperature of the surrounding air.</li><li><code>Ambient</code> music is the term used today for “<strong>atmospheric</strong>“(<em>atmospheric: creating an exciting or emotional mood</em>) background music usually intended for relaxation or <strong>meditation</strong>(<em>meditation: the practice of focusing your mind in silence, especially for religious reasons or in order to make your mind calm</em>).</li><li>The candlelit restaurant in the example sentence is probably trying for a romantic <code>ambience</code>, or “atmosphere.”</li></ul><h3 id="ambivalent"><a href="#ambivalent" class="headerlink" title="ambivalent"></a><code>ambivalent</code></h3><blockquote><ol><li>Holding opposite feelings or attitudes at the same time towards someone or something.</li><li><strong>Continually</strong>(<em>continually: in a way that continues without a break</em>) <strong>wavering</strong>(<em>waver (between A and B) | waver (on/over something): to hesitate and be unable to make a decision or choice</em>) between opposites or <strong>alternative</strong>(<em>alternative: a thing that you can choose to do or have out of two or more possibilities</em>) <strong>courses</strong>(<em>course: the way something develops or should develop</em>) of action.</li></ol></blockquote><p>E.g.</p><ul><li>He was <code>ambivalent</code> about the <strong>trip</strong>(<em>trip: a journey to a place and back again, especially a short one for pleasure or a particular purpose</em>): he <strong>badly</strong>(<em>badly: used to emphasize how much you want, need, etc. somebody/something</em>) wanted to <strong>travel</strong>(<em>travel: to go from one place to another, especially over a long distance</em>) but hated to miss the summer activities at home.</li></ul><p>From</p><ul><li><code>Ambivalent</code> is a fairly new word, less than a hundred years old, and, not superisingly, it was first used by psychologists. Since being <code>ambivalent</code> means simply having mixed feelings about some question or issue, some of us spend most of our lives in a state of <code>ambivalent</code>.</li></ul><p>Usage</p><ul><li>We might feel <code>ambivalence</code> about accepting a high-paying job that requires us to work <strong>long</strong>(<em>long: lasting or taking a great amount of time or more time than usual</em>) <strong>hours</strong>(<em>hours: a long time</em>), about <strong>lending</strong>(<em>lend: to give something to somebody or allow them to use something that belongs to you, which they have to return to you later</em>) money to someone we like but don’t <strong>know</strong>(<em>know somebody/something: to be familiar with a person, place, thing, etc.</em>) well – or about ordering a <strong>Tutti-Frutti</strong>(<em>tutti-frutti: a type of ice cream that contains pieces of fruit of various kinds</em>) Chocolate Banana <strong>Sundae</strong>(<em>Sundae: a cold dessert(dessert: (= a sweet dish) of ice cream covered with a sweet sauce, nuts, pieces of fruit, etc., usually served in a tall glass)</em>) El Supermo after we’ve been <strong>starving</strong>(<em>starve: to prevent someone from having enough food to live</em>) on a strict <strong>diet</strong>(<em>diet: a limited variety or amount of food that you eat for medical reasons or because you want to lose weight; a time when you only eat this limited variety or amount</em>) for weeks.</li></ul><h3 id="ambit"><a href="#ambit" class="headerlink" title="ambit"></a><code>ambit</code></h3><blockquote><p>The range or limit covered by something (such as a law).</p></blockquote><p>E.g.</p><ul><li>The <strong>treatment</strong>(<em>treatment: a way of behaving towards or dealing with a person or thing</em>) of <strong>farm</strong>(<em>farm(especially in compounds): a place where particular fish or animals are kept in order to produce young</em>) animals generally <strong>falls</strong>(<em>fall: to belong to a particular class, group or area of responsibility</em>) out the <code>ambit</code> of <strong>animal-cruelty</strong>(<em>animal cruely: 虐畜罪; 虐待动物罪</em>) laws in the U.S.</li></ul><p>Usage</p><ul><li><code>Ambit</code> is <strong>rather</strong>(<em>rather: used to correct something you have said, or to give more accurate information</em>) formal term, often used by lawyers, as in, “With this new <strong>legislation</strong>(<em>legislation: a law or a set of laws passed by a parliament</em>), <strong>tobacco</strong>(<em>tobacco: the dried leaves of the tobacco plant that are used for making cigarettes, smoking in a pipe, etc.</em>) now falls within the <code>ambit</code> of <strong>FDA</strong>(<em>FDA: Food and Drug Administration</em>) <strong>regulation</strong>(<em>regulation: controlling something by means of rules</em>).”</li><li>It almost always refers to <em><strong>something abstract</strong></em> rather than an actual physical range.<ul><li>So, for example, an <strong>immigrant</strong>(<em>immigrant: a person who has come to live permanently in a country that is not their own</em>) might live completely within the <code>ambit</code> of their immigrant community until she started college, where she might find herself in a much broader social <code>ambit</code>.</li><li>Most of the Latin <strong>American</strong>(<em>American: of or connected with North or South America, especially the US</em>)(<em>Latin American: from or connected with Latin America</em>) colonies were established by Spain, but in the 19th century, as the U.S. became stronger and Spain became weaker, they began to enter the <code>ambit</code> of U.S. power.</li></ul></li></ul><h2 id="EPI"><a href="#EPI" class="headerlink" title="EPI"></a><code>EPI</code></h2><blockquote><p>is a Greek prefix that may mean various things, but usually “on, over” or “attached to.”<br>So an earthquake’s <em><strong><code>epicenter</code></strong></em> is the ground right over the center of the <strong>quake</strong>(<em>quake: an earthquake</em>).<br>And your <em><strong><code>epidermis</code></strong></em> is the outer layer of your skin, on top of the inner <em><strong>dermis</strong></em>(<em>dermis: the layer of living tissue just below the epidermis in human skin that contains blood vessels, nerve endings, sweat glands(gland: an organ in a person’s or an animal’s body that produces a substance for the body to use; a part in the body that is similar to this, especially a lymph node) and other structures</em>)</p></blockquote><h3 id="epilogue"><a href="#epilogue" class="headerlink" title="epilogue"></a><code>epilogue</code></h3><blockquote><p>The final section after the main part of a book or <strong>play</strong>(<em>play: a piece of writing performed by actors in a theatre or on television or radio</em>).</p></blockquote><p>E.g.</p><ul><li>Her editor told her the book really needed an <code>epilogue</code>, to tell where each member of the family is today.</li></ul><p>From</p><ul><li>From its Greek <strong>roots</strong>(<em>root: the origin or basis of something</em>), <code>epilogue</code> basically “words attached (at the end).”</li></ul><p>Usage</p><ul><li>An <code>epilogue</code> often somehow <strong>wraps up</strong>(<em>wrap up: summarize, sum up</em>) a story’s action, as in the one for a famous Shakespeare play that ends, “For never was a story of more <strong>woe</strong>(<em>woe: great unhappiness</em>) / Than this of Juliet and her Romeo.”</li><li>In <strong>nonfiction</strong>(<em>nonfiction: books, articles or texts about real facts, people and events</em>) books, we now often use the term <em><strong>afterword</strong></em> instead of <code>epilogue</code>, just  as we now generally use <em><strong>foreword</strong></em> instead of <em><strong>prologue</strong></em>(<em>prologue: a speech, etc. at the beginning of a play, book or film that introduces it</em>).</li><li>Movies also often have a kind of <code>epilogue</code> – maybe a scene after the exciting climax when the <strong>surviving</strong>(<em>surviving: to continue to live or exist despite a dangerous event or time</em>) lovers meet in a cafe to talk about their future.</li><li>The <code>epilogue</code> of a musical <strong>composition</strong>(<em>composition: a piece of music or art, or a poem</em>), after all the <strong>drama</strong>(<em>drama: a play for the theatre, television or radio</em>) is over, is called the <em><strong>coda</strong></em> (Italian for “tail”)(<em>coda: the final passage of a piece of music</em>)</li></ul><h3 id="epiphyte"><a href="#epiphyte" class="headerlink" title="epiphyte"></a><code>epiphyte</code></h3><blockquote><p>A plant that obtains its nutrients from the air and the rain and usually grows on another plant for support.</p></blockquote><p>E.g.</p><ul><li>The <strong>strangler fig</strong>(<em>strangler fig: 绞杀植物；又名杀手树</em>) begins life as an <code>epiphyte</code> on a tree branch, <strong>drops</strong>(<em>drop: to make something fall deliberately; to let yourself fall</em>) its <strong>tendrils</strong>(<em>tendril: a thin, curly stem that grows from a climbing plant. A plant uses tendrils to attach itself to a wall or other support.</em>) to <strong>take root</strong>(<em>take root: to become rooted; 生根</em>) <strong>in the ground</strong>(<em>in the ground: 在土里</em>) around the trunk, and slowly covers and <strong>strangles</strong>(<em>strangle: a person who kills somebody by pressing their throat hard</em>) the tree to death.</li></ul><p>Usage</p><ul><li><code>Epiphyte</code> plants are sometimes known as “air plants” because they seemingly <strong>survive</strong>(<em>survive: to continue to live or exist</em>) on <strong>thin</strong>(<em>thin: containing less oxygen than normal</em>) air. They rely on their host plants <strong>merely</strong>(<em>merely: used meaning ‘only’ or ‘simply’ to emphasize a fact or something that you are saying</em>) for physical support, not <strong>nourishment</strong>(<em>nourishment: food that is needed to stay alive, grow and stay healthy</em>).</li><li>Tropical <code>epiphyte</code> include <strong>orchids</strong>(<em>orchid: 兰花，兰科植物；a plant with brightly coloured flowers of unusual shapes. There are many different types of orchid and some of them are very rare.</em>), <strong>ferns</strong>(<em>fern: 蕨类植物，蕨；a plant with large attractive leaves and no flowers that grows in wet areas or is grown in a pot. There are many types of fern.</em>), and members of the pineapple family.</li><li>To a newcomer in the tropical rain <strong>forest</strong>(<em>forest: a large area of land that is thickly covered with trees</em>), the first sight of a great tree with large <code>epiphyte</code> hanging from every level can be <strong>eerie</strong>(<em>eerie: strange, mysterious and frightening</em>) and <strong>astonishing</strong>(<em>astonishing: very surprising; difficult to believe</em>).</li><li><strong>Familiar</strong>(<em>familiar: well known to you; often seen or heard and therefore easy to recognize</em>) <code>epiphyte</code> of the <strong>temperate</strong>(<em>temperate: (of a climate or region) having a mild temperature without extremes of heat or cold</em>) <strong>zone</strong>(<em>zone: an area or a region with a particular feature or use</em>) include <strong>lichens</strong>(<em>lichen: 地衣，青苔；a very small grey or yellow plant that spreads over the surface of rocks, walls and trees and does not have any flowers</em>), <strong>mosses</strong>(<em>moss: 苔藓，地衣；a very small green or yellow plant without flowers that spreads over wet surfaces, rocks, trees, etc.</em>) and <strong>algae</strong>(<em>algae: 藻类，海藻；very simple plants, such as seaweed that have no real leaves, stems or roots, and that grow in or near water</em>), which may grow on rocks or water without touching the soil.</li></ul><h3 id="epitaph"><a href="#epitaph" class="headerlink" title="epitaph"></a><code>epitaph</code></h3><blockquote><p>An <strong>inscription</strong>(<em>inscription: words written in the front of a book or cut in stone or metal</em>) on a <strong>grave</strong>(<em>grave: a place in the ground where a dead person is buried</em>) or <strong>tomb</strong>(<em>tomb: a large grave(= where a dead person is buried), especially one built of stone above or below the ground</em>) <strong>in memory of</strong>(<em>in memory of somebody | to the memory of somebody: intended to show respect and remind people of somebody who has died</em>) the one buried there.</p></blockquote><p>E.g.</p><ul><li>The great <strong>architect</strong>(<em>architect: a person whose job is designing buildings</em>) Christopher Wren designed London’s <strong>majestic</strong>(<em>majestic: impressive because of size or beauty</em>) <strong>St. Paul’s Cathedral</strong>(<em>圣保罗大教堂</em>), the site of his tomb and <code>epitaph</code>: “Si monumentum requiris, circumspice”(“If you seek my <strong>monument</strong>(<em>monument: a building, column, statue, etc. built to remind people of a famous person or event</em>), look around you”).</li></ul><p>From</p><ul><li><code>Epitaph</code> includes the root from the Greek word <em><code>taphos</code></em>, “tomb” or “funeral.”</li></ul><p>Usage</p><ul><li>Traditionally, <code>epitaph</code> refers to a tombstone inscription, but it can also refer to brief memorial statement, that resemble such inscriptions. <ul><li>One of the most famous is Henry Lee’s <code>epitaph</code> for George Washington: “First in war, first in peace, and first in the hearts of his countrymen.”</li></ul></li></ul><h3 id="epithet"><a href="#epithet" class="headerlink" title="epithet"></a><code>epithet</code></h3><blockquote><ol><li>A <strong>descriptive</strong>(<em>descriptive: saying what somebody/something is like; describing something</em>) word or phrase occurring with or <strong>in place of</strong>(<em>in place of: as a substitute or replacement for</em>) the name of a person or thing.</li><li>Am insulting or <strong>demeaning</strong>(<em>demeaning: putting somebody in a position that does not give them the respect that they should have</em>) word or phrase.</li></ol></blockquote><p>E.g.</p><ul><li>King Richard Ⅰ of England earned the <code>epithet</code> “<strong>Lionhearted</strong>,”(<em>lion-hearted: very brave</em>) while his brother, King John, was given the <code>epithet</code> “Lackland.”</li></ul><p>From</p><ul><li>From its Greek roots, <code>epithet</code> would mean something “put on,” or added.</li></ul><p>Usage</p><ul><li>Sometimes  the added name follows a given name, as in Erik the Red or Billy the Kid.</li><li>In other cases, the <code>epithet</code> <strong>precedes</strong>(<em>precede somebody/something to happen before something or come before something/somebody in order</em>) the personal name, as in Mahatma (“Great-souled”) Gandi. <strong>In still others</strong>(<em>in still others: 还有一些中</em>), it’s used in place of the actual name, as in El Greco (“The Greek”) or El Cid (“The lord”).</li><li>In its other common meaning, an <code>epithet</code> is mocking or insulting name (like “Lackland” in the example sentence). When enemies <strong>are said to be</strong>(<em>be said to be doing: 据说正在进行</em>) “<strong>hurling</strong> <code>epithet</code>“(<em>hurl abuse, accusations, insults, etc. (at somebody): to shout offensive words, etc. at somebody</em>) at each other, it means they’re exchanging angry <strong>insults</strong>(<em>insult: a remark or an action that is said or done in order to offend somebody</em>).</li></ul><h2 id="HYP-HYPO"><a href="#HYP-HYPO" class="headerlink" title="HYP/HYPO"></a><code>HYP/HYPO</code></h2><blockquote><p>is a Greek prefix meaning “below, under.”<br>Many <em><strong><code>hypo-</code></strong></em> words are medical. A <code>hypodermic</code> needle injects medication under the skin. <code>Hypotension</code>, or low blood pressure, can be just as unhealthy as the better-known <code>hypertension</code>, or high blood pressure.</p></blockquote><h3 id="hypochondriac"><a href="#hypochondriac" class="headerlink" title="hypochondriac"></a><code>hypochondriac</code></h3><blockquote><p>A person <strong>overly</strong>(<em>overly: too; very</em>) concerned with his or her own health who often <strong>suffers</strong>(<em>suffer: to be badly affected by a disease, pain, sad feelings, a lack of something, etc.</em>) from <strong>delusions</strong>(<em>delusion: a false belief or opinion about yourself or your situation</em>) of physical disease.</p></blockquote><p>E.g.</p><ul><li>Hercule Poirot, the detective hero of the Agatha Christie <strong>mysteries</strong>(<em>mystery: a story, a film or a play in which crimes and strange events are only explained at the end</em>), is a <strong>notorious</strong>(<em>notorious: well known for being bad</em>) <code>hypochondriac</code>, always trying to protect himself from <strong>drafts</strong>(<em>draft: current of cold air</em>).</li></ul><p>Usage</p><ul><li>One disease a <code>hypochondriac</code> really does suffer from is <code>hypochondria</code>, the <strong>anxiety</strong>(<em>anxiety: the state of feeling nervous or worried that something bad is going to happen</em>) and <strong>depression</strong>(<em>depression: a medical condition in which a person feels very sad and anxious and often has physical symptoms such as being unable to sleep, etc.</em>) that come from worrying too much about one’s own health. Even though it’s easy to joke about <code>hypochondriacs</code>, <code>hypochondria</code> is not joking matter for the sufferer.</li><li>Somewhat surprisingly, the second part of <code>hypochondria</code> derives from <em><strong>chondros</strong></em>, the Greek word for “<strong>cartilage</strong>.”(<em>cartilage: the strong white tissue that is important in supporting and connecting parts of the body, and especially in joints to prevent the bones rubbing against each other</em>) The cartilage in <strong>question</strong>(<em>question: doubt or not being certain about something</em>) is that of the sternum, or breastbone. From ancient times, doctors believed that certain internal organs or regions were the <strong>seat</strong>(<em>seat: base, a place where something is located or based</em>) of various diseases, both physical and mental, and the area under the breastbone was thought to be the source of <code>hypochondria</code>.</li></ul><h3 id="hypoglycemia"><a href="#hypoglycemia" class="headerlink" title="hypoglycemia"></a><code>hypoglycemia</code></h3><blockquote><p>Abnormal decrease of sugar in blood.</p></blockquote><p>E.g.</p><ul><li>She had been controlling her <code>hypoglycemia</code> through diet and vitamins, but she now realized she needed to add daily exercise as well.</li></ul><p>From</p><ul><li>The root <code>glyk-</code> means “sweet” in Greek, so <code>glyc</code> shows up in the names of various terms referring to a sugar as a chemical ingredient, such as <em><strong>glycerine</strong></em>(<em>glycerine: 甘油；an alternative name for glycerol, frequently used in labels showing ingredients</em>) and <em><strong>monoglyceride</strong></em>(<em>monoglyceride: any of various esters of glycerol in which only one of the three hydroxyl groups is esterified and which are often used as emulsifiers</em>)(<em>ester: a chemical that is formed by the reaction between an acid and an alcohol. Esters made from acids that contain carbon are generally sweet-smelling.</em>)(<em>hydroxy: the chemical group, ion, or radical OH that consists of one atom of hydrogen and one of oxygen and is neutral or negatively charged</em>).</li></ul><p>Usage</p><ul><li>People with <strong>diabetes</strong>(<em>diabetes: a medical condition in which the body cannot produce enough insulin to control the amount of sugar in the blood</em>) have difficulty controlling the sugar in their blood. Too little can be dangerous; its early symptoms may be as <strong>minor</strong>(<em>minor: not very serious</em>) as nervousness, shaking, and sweating, but it can lead to <strong>seizure</strong>(<em>seizure: a sudden attack of an illness, especially one that affects the brain</em>) and <strong>unconsciousness</strong>(<em>unconsciousness: a state like sleep caused by injure or illness, when you are unable to use your senses</em>). Luckily, it can be taken care of easily by eating or drinking something high in <strong>carbohydrates</strong>(<em>carbohydrate: a substance such as sugar or starch that consists of carbon, hydrogen and oxygen. Carbohydrates in food provide the body with energy and heat</em>)(<em>starch: a white carbohydrate food substance found in potatoes, flour, rice, etc.; food containing this</em>). Its opposite, <code>hyperglycemid</code>, is the main symptom of diabetes, and usually requires an injection of <strong>insulin</strong>(<em>insulin: a chemical substance produced in the body that controls the amount of sugar in the blood (by influencing the rate at which it is removed); a similar artificial substance given to people whose bodies do not produce enough naturally</em>), which the sufferer usually gives himself.</li><li>Today many people – though not doctor – use <code>hypoglycemia</code> to mean a completely different condition, with some of the same <strong>milder</strong>(<em>mild: not severe or strong</em>) symptons, that doesn’t involve low blood sugar.</li></ul><h3 id="hypothermia"><a href="#hypothermia" class="headerlink" title="hypothermia"></a><code>hypothermia</code></h3><blockquote><p>Subnormal temperature of the body.</p></blockquote><p>E.g.</p><ul><li>By the time rescuers were able to pull the boy from the <strong>pond</strong>‘s(<em>pond: a small area of water, especially one that is artificial</em>) <strong>icy</strong>(<em>icy: covered with ice</em>) <strong>waters</strong>(<em>waters: the water in a particular lake, river, sea or ocean</em>), <code>hypothermia</code> had reached a life-threatening <strong>stage</strong>(<em>stage: a period or state that something/somebody passes through while developing or making progress</em>).</li></ul><p>Usage</p><ul><li><code>Hypothermia</code>, which usually results from <strong>submersion</strong>(<em>submersion (of something) (in something): the act or process of going or being put under the surface of water or liquid; the state of being under water or liquid</em>) in icy water or <strong>prolonged</strong>(<em>prolonged: continuing for a long time</em>) <strong>exposure</strong>(<em>exposure: a medical condition caused by being out in very cold weather for too long without protection</em>) to cold, may <strong>constitute</strong>(<em>constitute + noun: to be considered to be something</em>) a <strong>grave</strong>(<em>grave: (of situations, feelings, etc.) very serious and important; giving you a reason to feel worried</em>) <strong>medical</strong>(<em>medical: connected with illness and injury and their treatment</em>) <strong>emergency</strong>(<em>emergency: a sudden serious and dangerous event or situation that needs immediate action to deal with it</em>).<ul><li>It begins to be a <strong>concern</strong>(<em>concern: a feeling of worry, especially one that shared by many people</em>) when body temperature <strong>dips</strong>(<em>dip: to go downwards or to a lower level; to make something to do this</em>) below 95°F, and the pulse, breathing, and blood pressure start to decline. Below 90°, the point at which the normal reaction of shivering ceases, emergency treatment is <strong>called for</strong>(<em>call for: to need something</em>).</li></ul></li></ul><h3 id="hypothetical"><a href="#hypothetical" class="headerlink" title="hypothetical"></a><code>hypothetical</code></h3><blockquote><ol><li>Involving an assumption made for the sake of argument or further study or investigation.</li><li><strong>Imagined</strong>(<em>imagine: to form a picture in your mind of what something might be like</em>) for purposes of example.</li></ol></blockquote><p>E.g.</p><ul><li>The candidate refused to say what she would do if faced with a hypothetical military crisis.</li></ul><p>From</p><ul><li>The noun <code>hypothesis</code> comes straight from the Greek word meaning “foundation” or “base” – that is something “put under” something else.</li></ul><p>Usage</p><ul><li>So a <code>hypothesis</code> is something you assume to be true <strong>in order that</strong>(<em>in order that: so that something can happen</em>) you can use it as the <strong>base</strong>(<em>base: the lowest part of something, especially the parts or surface on which it rests or stands</em>) or <strong>basis</strong>(<em>basis: the important facts, ideas or events that support something and that it can develop from</em>) for a line of reasoning – and any such assumption can be called <code>hypothetical</code>.<ul><li>So, for example, the theory that the dinosaurs become extinct because of a giant <strong>meteor</strong>(<em>meteor: a piece of rock from outer space that makes a bright line across the night sky as it burns up while falling through the earth’s atmosphere</em>) that <strong>struck</strong>(<em>strike: to hit somebody/something hard with force</em>) the earth near the Yucatan Peninsula involves the <code>hypothesis</code> that such a collision would have such terrible effects on the earth’s climate that the great reptiles would have been <strong>doomed</strong>(<em>doom: to make somebody/something certain to fail, suffer, die, etc.</em>).</li></ul></li><li>Once a <code>hypothesis</code> has been thoroughly studied and researched without being proved wrong, it generally comes to be <em><strong>theory</strong></em> instead.</li></ul><h2 id="THERM-THERMO"><a href="#THERM-THERMO" class="headerlink" title="THERM/THERMO"></a><code>THERM/THERMO</code></h2><blockquote><p>comes from the Greek word meaning “warm.”<br>A <code>thermometer</code> measures the amount of warmth in a body, the air, or an oven.<br>A <code>thermostat</code> makes sure the temperature stays at the same level.<br>And it’s easy to see why the German <strong>manufacturers</strong>(<em>manufacturer: a person or company that produces goods in large quantities</em>) of a <strong>vacuum-insulated</strong>(<em>vacuum: a space that is completely empty of all substances</em>)(<em>insulate something (from/against something): to protect something with a material that prevents heat, sound, electricity, etc. from passing through</em>) bottle back in 1904 gave it the name <code>Thermos</code>.</p></blockquote><h3 id="thermal"><a href="#thermal" class="headerlink" title="thermal"></a><code>thermal</code></h3><blockquote><ol><li>Of, relating to, or caused by heat.</li><li>Designed to insulate in order to retain body heat.</li></ol></blockquote><p>E.g.</p><ul><li>A special <strong>weave</strong>(<em>weave: the way in which threads are arranged in a piece of cloth that has been woven; that pattern that the threads make</em>) called <code>thermal</code> weave <strong>traps</strong>(<em>trap something: to catch or keep something in a place and prevent it from escaping, especially that you can use it</em>) insulating air in little pockets to increase the <strong>warmth</strong>(<em>warmth: the state or quality of being warm, rather than hot or cold</em>) of long underwear and blankets.</li></ul><p>Usage</p><ul><li>In days gone by, much of the male population of the northern states in the cold months would wear a <strong>garment</strong>(<em>garment: a piece of clothing</em>) of underwear covering the entire body, called a union suit.<ul><li>Union suit kept <strong>sodbusters</strong>(<em>sodbuster: homesteader; a person who liveed and worked on a homestead</em>)(<em>homestead: a house with the land and buildings around it, especially a farm</em>)(<em>the land: used to refer to the countryside and the way people live in the country as opposite to in cities</em>), cowboys, and townsfolk alike not only warm but also <strong>itchy</strong>(<em>having or producing an itch on the skin</em>) and a little on the <strong>smelly</strong>(<em>having an unpleasant smell</em>) side (back when bathing once a week was considered the <strong>height</strong>(<em>height: the point when something is at its strongest or best</em>) of cleanliness)</li></ul></li><li><code>Thermal</code> <strong>imaging</strong>(<em>imaging: the process of capturing, storing and showing an image on a computer screen</em>) is <strong>photograhpy</strong>(<em>photography: the art, process or job of taking photograghs or filming something</em>) that captures “heat pictures” – rather than ordinary light pictures – of objects.</li><li>And <code>thermal</code> pollution occurs when industrial water use ends up warming a river in a damaging way.</li><li>Small-plane pilots use <code>thermal</code> as a noun for a warm <strong>updraft</strong>(<em>updraft: a upward movement of gas (as air)</em>), often over a plowed field or desert, that lifts their wings, just as it enables hawks to <strong>soar</strong>(<em>soar: to fly very high in the air or remain high in the air</em>) upward without moving their wings. </li></ul><h3 id="thermodynamics"><a href="#thermodynamics" class="headerlink" title="thermodynamics"></a><code>thermodynamics</code></h3><blockquote><p>Physics that deals with the mechanical actions or relations of heat.</p></blockquote><p>E.g.</p><ul><li>With his college major in electrical engineering, he assumed it would be an easy step to a graduate-school concentrate in <code>thermodynamics</code>.</li></ul><p>Usage</p><ul><li><code>Thermodynamics</code> is based on the fact that all forms of energy, including heat and mechanical energy, are basically the same. Thus, it deals with the ways in which one form of energy converted into another, when one of the forms is heat.</li><li>The study of <code>thermodynamics</code> dates from before the invention of the first practical steam engine – an engine that uses steam to produce physical power – in the 18th century.</li><li>Today most of the world’s electrical power is actually produced by steam engines, and the <strong>principal</strong>(<em>principal: the most important; main</em>) uses of <code>thermodynamics</code> is in power production.</li></ul><h3 id="thermonuclear"><a href="#thermonuclear" class="headerlink" title="thermonuclear"></a><code>thermonuclear</code></h3><blockquote><p>Of or relating to the changes in the nucleus of atoms with low atomic weight, such as <strong>hydrogen</strong>(<em>hydrogen: 氢</em>), that require a very high temperature to begin.</p></blockquote><p>E.g.</p><ul><li>In the 1950s and ‘60s, anxious American families built thousands of underground “<strong>fallout</strong> shelters”(<em>fallout: dangerous radioactive dust that in the air after a nuclear explosion</em>) to protect themselves from the radiation of a <code>thermonuclear</code> <strong>blast</strong>(<em>blast: an explosion or a powerful movement of air caused by an explosion</em>).</li></ul><p>From</p><ul><li><em><strong>Nuclear</strong></em> is the adjective for <em><strong>nucleus</strong></em>(<em>nucleus (plural: nuclei): the part of an atom that contains most of its mass and that carries a positive electric charge</em>), the main central part of an atom.</li></ul><p>Usage</p><ul><li>The original nuclear explosives, <strong>detonated</strong>(<em>detonate (something): to explode, or to make a bomb or other device explode</em>) in 1945, were so-called <em><strong>fission</strong></em>(<em>fission: the act or process of splitting the nucleus of an atom, when a large of energy is released</em>) bombs, since they relied on the fission, or splitting, of the nuclei of uranium atoms. </li><li>But an even greater source of destructive power <strong>lay in</strong>(<em>lay in: store</em>) nuclear <strong>fusion</strong>(<em>fusion: the act or process of combining the nuclei of atoms to form a heavier nucleus, with energy being released</em>), the forcing together of atomic nuclei.</li><li>The light and heat given off by stars such as the sun come from a <strong>sustained</strong>(<em>sustained: continuing for a period of time without becoming less</em>) fusion – or <code>thermonuclear</code> – reaction deep within it. On earth, such <code>thermonuclear</code> reactions were used to develop the hydrogen bomb, a bomb based on a fusion reaction that merged hydrogen atoms  to become <strong>helium</strong>(<em>helium: 氦</em>) atoms.</li><li>The <code>thermonuclear</code> era, which began in 1952, produced bombs hundreds of times more powerful than those exploded at the end of World War Ⅱ.</li><li>Why the <code>thermo-</code> in <code>thermonuclear</code>? Because great heat is required to trigger the fusion process, and thhe trigger used is actually a fission bomb.</li></ul><h3 id="British-thermal-unit"><a href="#British-thermal-unit" class="headerlink" title="British thermal unit"></a><code>British thermal unit</code></h3><blockquote><p>The quantity of heat required to raise the temperature of one pound of water one degree <strong>Fahrenheit</strong>(<em>Fahrenheit: of or using a scale of temperature in which water freezes at 32° and boils at 212°</em>) at a specified temperature.</p></blockquote><p>E.g.</p><ul><li>Woo-stove <strong>manufacturers</strong>(<em>manufacturer: a person or company that produces goods in large quantities</em>) compete with each other in their claims of how many <code>British thermal units</code> of heat output their stoves can produce.</li></ul><p>Usage</p><ul><li>Despite its name, the <code>British thermal unit</code>, or BTU, may be more widely used in North America than in <strong>Britain</strong>(<em>Britain: the island containing England, Scotland and Wales</em>).</li><li>Air conditions, <strong>furnaces</strong>(<em>furnace: a space surrounded on all sides by walls and a roof for heating metal or grass to very high temperatures</em>), and <strong>stoves</strong>(<em>stove: a piece of equipment that burn various fuels and is used for heating room</em>) are generally <strong>rated</strong>(<em>rate: to place somebody/something in a particular position on a scale in relation to similar people or things</em>) by BTUs. (Though “BTUs” is often short for “BTUs per hour”; in air-conditioner ratings, for instance, “BTUs” really means “BTUs of cooling capacity per hour.”)</li><li><strong>Fuels</strong>(<em>fuel: any material that produces heat or power, usually when it is burnt</em>) such natural gas and <strong>propane</strong>(<em>propane: 丙烷</em>) are also compared using BTUs.</li><li>The BTU first appeared in 1876 and isn’t part of <strong>the metric system</strong>(<em>the metric system: the system of measurement that uses the metre, the kilogram and the litre as basic units</em>) – the metric unit of energy is the much smaller <em><strong>joule</strong></em>(<em>joule: a unit of energy or work; 焦耳</em>) – so it isn’t much used by scientists, but its <strong>practicality</strong>(<em>practicality: the quality of being suitable, likely to be successful</em>) keeps it popular for <strong>consumer goods</strong>(<em>consumer goods: goods such as food, clothing, etc. bought by individual customers</em>) and fuels.</li><li>A better-known heat unit is the <em><strong>calorie</strong></em>(<em>calorie: a unit for measuring how much energy food will produce</em>); a BTU is equal to about 252 calories. (Since the familiar food calorie is actually a <em><strong>kilocalorie</strong></em>, a BTU equals only about a quarter of a food calorie)</li></ul><h2 id="POLY"><a href="#POLY" class="headerlink" title="POLY"></a>POLY</h2><blockquote><p>comes from <em><strong><code>polys</code></strong></em>, the Greek word for “many”.<br>A <code>polytechnic</code> institute offers instruction in many fields.<br><code>Polygamy</code> is marriage in which one has many <strong>spouses</strong>(<em>spouse: a husband or wife</em>), or at least more that the legal limit of one.<br>And <code>polysyllabic</code> words are words of many syllables – of which  there are quite a few in this book.</p></blockquote><h3 id="polyp"><a href="#polyp" class="headerlink" title="polyp"></a><code>polyp</code></h3><blockquote><ol><li>A sea <strong>invertebrate</strong>(<em>invertebrate: any animal with no backbone, for example a worm</em>) that has a mouth opening at one end surrounded by stinging <strong>tentacles</strong>(<em>tentacle: a long, thin part of the body of some creatures, such as squid, used for feeling or holding things, for moving or for getting food</em>).</li><li>A growth projecting from a <strong>mucous membrane</strong>(<em>mucous membrane: a thin layer of skin that covers the inside of the nose and mouth and the outside of other organs in the body, producing mucus to prevent these parts from becoming dry</em>), as on the colon or <strong>vocal cords</strong>(<em>vocal cords: the thin pieces of tissue in the throat that are moved by the flow of air to produce the voice</em>).</li></ol></blockquote><p>E.g.</p><ul><li>She had had a polyp removed from her throat, and for two weeks afterward she could only whisper.</li></ul><p>From</p><ul><li>This term comes from <em><code>polypous</code></em>, a Greek word for “octopus,” which meant literally “many-footed.”</li></ul><p>Usage</p><ul><li>To the untrained eye, the invertebrate known as the <code>polyp</code> may likewise appear to be many-footed, though it never walks anywhere since its “feet” are tentacles, used for stinging tiny organisms which the <code>polyp</code> then <strong>devours</strong>(<em>devour something: to eat all of something quickly, especially because you are very hungry</em>).</li><li>The type of tumor known as <code>polyps</code> are got their name because some seem to be attached to the surface by branching “foot”–like roots, even though most do not. <code>Polyps</code> of the nose or vocal cords are usually only inconvenient, causing breathing difficulty or <strong>hoarseness</strong>(<em>hoarseness: the quality in somebody’s voice of sounding rough and unpleasant, especially because of a sore throat (= a painful throat because of an infection)</em>), and can be removed easily; however, <code>polyps</code> in the intestines can sometimes <strong>turn</strong>(<em>turn: to change into a particular state or condition; to make something do this</em>) <strong>cancerous</strong>(<em>cancerous: affected or caused by cancer</em>).</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>English Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First-Attempt</title>
    <link href="/2023/01/08/First-Attempt/"/>
    <url>/2023/01/08/First-Attempt/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Hexo-Github-个人博客搭建过程"><a href="#基于Hexo-Github-个人博客搭建过程" class="headerlink" title="基于Hexo-Github 个人博客搭建过程"></a>基于Hexo-Github 个人博客搭建过程</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=4&vd_source=fac7af0417c747fc2d0ad3beee7b7066">本地生成博客内容_哔哩哔哩_bilibili</a></li><li><a href="https://blog.csdn.net/wsmrzx/article/details/81478103">Hexo系列(三) 常用命令详解_半虹的博客-CSDN博客</a></li></ul><h2 id="第一步：安装工具包："><a href="#第一步：安装工具包：" class="headerlink" title="第一步：安装工具包："></a>第一步：安装工具包：</h2><ol><li>Node.js<ul><li>从nodejs官网下载安装</li><li>安装完成之后使用<code>node -v</code>命令确认安装正确。进一步检查Node.js自带的<code>npm</code>包管理工具是否正常安装，使用<code>npm -v</code>查看版本。</li></ul></li><li>Git</li></ol><h2 id="第二步：在github中新建repository"><a href="#第二步：在github中新建repository" class="headerlink" title="第二步：在github中新建repository"></a>第二步：在github中新建repository</h2><ul><li>新建的repository需要注意命名<ul><li><code>GithubUserName.github.io</code></li></ul></li></ul><h2 id="第三步：生成邮箱的ssh公钥，放到github个人设置中"><a href="#第三步：生成邮箱的ssh公钥，放到github个人设置中" class="headerlink" title="第三步：生成邮箱的ssh公钥，放到github个人设置中"></a>第三步：生成邮箱的ssh公钥，放到github个人设置中</h2><ul><li>生成个人邮箱的密钥（github账号注册的邮箱地址）<figure class="highlight shell"><figcaption><span># 在任意文件夹打开Git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;个人邮箱地址&quot;<br></code></pre></td></tr></table></figure></li><li>在本地的文件夹中(<code>C:\Users\UserName</code>)找到<code>.ssh</code>文件夹下的<code>id_rsa.pub</code>文件，使用记事本打开，复制改密钥。</li><li>在github中的setting下，找到SSH and GPG keys，新建SSH keys，名称随意，并将拷贝的公钥复印到对应的位置中。</li></ul><h2 id="第四步：生成本地博客内容"><a href="#第四步：生成本地博客内容" class="headerlink" title="第四步：生成本地博客内容"></a>第四步：生成本地博客内容</h2><ul><li>首先需要初始化，看到<code>INFO  Start blogging with Hexo!</code>即初始化完成<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">shell <span class="hljs-meta"># 新建自己想要存放文件的空白文件夹</span><br>hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li>使用<code>hexo s</code>命令（server）可以启动本地Blog</li></ul><h2 id="第五步：发布"><a href="#第五步：发布" class="headerlink" title="第五步：发布"></a>第五步：发布</h2><ul><li>在hexo初始化的文件夹中，找到<code>_config.yml</code>配置文件，使用编辑器打开，然后修改deploy<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repository:</span> <span class="hljs-comment"># 直接从个人刚才新建的仓库中，进行拷贝仓库地址即可</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>安装部署工具。在blog的目录下，打开Git Bash，使用以下命令进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>使用<code>hexo g</code>命令（generate）生成静态文件</p></li><li><p>使用<code>hexo d</code>命令（deploy）部署网站</p><ul><li>本地的文件会被上传到github仓库中</li><li>通过网址可以打开刚才新建的个人博客了<ul><li><code>https://GithubUserName.github.io</code></li></ul></li></ul></li></ul><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ul><li><p>使用npm安装主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure></li><li><p><a href="https://hexo.fluid-dev.com/docs/start/">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p></li></ul><h2 id="创建新的post"><a href="#创建新的post" class="headerlink" title="创建新的post"></a>创建新的post</h2><p><a href="https://hexo.io/zh-cn/docs/writing.html">写作 | Hexo</a></p><ul><li>使用<code>hexo new PostName</code>创建新的post，会在本地创建一个markdown文件。</li><li>可以使用<code>hexo s</code>先在本地查看效果和完善。</li><li>确认无误后，使用命令<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>进行发布。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/08/hello-world/"/>
    <url>/2023/01/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
